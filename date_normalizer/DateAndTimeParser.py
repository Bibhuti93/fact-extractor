# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .DateAndTimeListener import DateAndTimeListener
else:
    from DateAndTimeListener import DateAndTimeListener


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u00a9\u08cf\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\3\2\7\2L\n\2\f\2\16\2O\13\2\3\2\3\2\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u01fd\n\3\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u028c")
        buf.write(u"\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0357\n\5\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0410")
        buf.write(u"\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\3\7\5\7\u04c9\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write(u"\b\3\b\3\b\3\b\3\b\5\b\u0518\n\b\3\t\3\t\3\t\3\t\3\t")
        buf.write(u"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write(u"\3\t\3\t\3\t\3\t\5\t\u0530\n\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0581\n\n\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write(u"\u05c2\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0600")
        buf.write(u"\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0615\n\r\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u066a\n\16")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u06f3")
        buf.write(u"\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0745\n\20")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\3\22\5\22\u0794\n\22\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23")
        buf.write(u"\u07ae\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write(u"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u07cb\n")
        buf.write(u"\24\3\25\3\25\5\25\u07cf\n\25\3\26\3\26\5\26\u07d3\n")
        buf.write(u"\26\3\27\3\27\5\27\u07d7\n\27\3\30\3\30\5\30\u07db\n")
        buf.write(u"\30\3\31\3\31\5\31\u07df\n\31\3\32\3\32\5\32\u07e3\n")
        buf.write(u"\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write(u"\33\3\33\3\33\3\33\5\33\u07fd\n\33\3\34\3\34\3\34\3\34")
        buf.write(u"\3\34\3\34\3\34\5\34\u0806\n\34\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\5\35\u085a\n\35\3\36\3\36\3\36\3")
        buf.write(u"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write(u"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write(u"\36\3\36\3\36\3\36\3\36\3\36\5\36\u087a\n\36\3\37\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0884\n\37\3 \3 ")
        buf.write(u"\3 \3 \3 \3 \3 \3 \5 \u088e\n \3!\3!\3!\3!\3!\3!\3!\3")
        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!")
        buf.write(u"\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u08b6\n!\3")
        buf.write(u"\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u08c4")
        buf.write(u"\n\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\2\2&\2\4\6\b\n\f\16")
        buf.write(u"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BD")
        buf.write(u"FH\2\2\u0a67\2M\3\2\2\2\4\u01fc\3\2\2\2\6\u028b\3\2\2")
        buf.write(u"\2\b\u0356\3\2\2\2\n\u040f\3\2\2\2\f\u04c8\3\2\2\2\16")
        buf.write(u"\u0517\3\2\2\2\20\u052f\3\2\2\2\22\u0580\3\2\2\2\24\u05c1")
        buf.write(u"\3\2\2\2\26\u05ff\3\2\2\2\30\u0614\3\2\2\2\32\u0669\3")
        buf.write(u"\2\2\2\34\u06f2\3\2\2\2\36\u0744\3\2\2\2 \u0746\3\2\2")
        buf.write(u"\2\"\u0793\3\2\2\2$\u07ad\3\2\2\2&\u07ca\3\2\2\2(\u07ce")
        buf.write(u"\3\2\2\2*\u07d2\3\2\2\2,\u07d6\3\2\2\2.\u07da\3\2\2\2")
        buf.write(u"\60\u07de\3\2\2\2\62\u07e2\3\2\2\2\64\u07fc\3\2\2\2\66")
        buf.write(u"\u0805\3\2\2\28\u0859\3\2\2\2:\u0879\3\2\2\2<\u0883\3")
        buf.write(u"\2\2\2>\u088d\3\2\2\2@\u08b5\3\2\2\2B\u08c3\3\2\2\2D")
        buf.write(u"\u08c5\3\2\2\2F\u08c8\3\2\2\2H\u08cb\3\2\2\2JL\5\4\3")
        buf.write(u"\2KJ\3\2\2\2LO\3\2\2\2MK\3\2\2\2MN\3\2\2\2NP\3\2\2\2")
        buf.write(u"OM\3\2\2\2PQ\7\2\2\3Q\3\3\2\2\2RS\5\6\4\2ST\b\3\1\2T")
        buf.write(u"\u01fd\3\2\2\2UV\5\b\5\2VW\b\3\1\2W\u01fd\3\2\2\2XY\5")
        buf.write(u"\n\6\2YZ\b\3\1\2Z\u01fd\3\2\2\2[\\\5\f\7\2\\]\b\3\1\2")
        buf.write(u"]\u01fd\3\2\2\2^_\7k\2\2_`\5\20\t\2`a\7\34\2\2ab\5\64")
        buf.write(u"\33\2bc\b\3\1\2c\u01fd\3\2\2\2de\7\u0085\2\2ef\5\20\t")
        buf.write(u"\2fg\7\34\2\2gh\5\64\33\2hi\b\3\1\2i\u01fd\3\2\2\2jk")
        buf.write(u"\7\u0092\2\2kl\5\20\t\2lm\7\34\2\2mn\5\64\33\2no\b\3")
        buf.write(u"\1\2o\u01fd\3\2\2\2pq\7s\2\2qr\5\20\t\2rs\7\34\2\2st")
        buf.write(u"\5\64\33\2tu\b\3\1\2u\u01fd\3\2\2\2vw\7z\2\2wx\5\20\t")
        buf.write(u"\2xy\7\34\2\2yz\5\64\33\2z{\b\3\1\2{\u01fd\3\2\2\2|}")
        buf.write(u"\7\u009a\2\2}~\5\20\t\2~\177\7\34\2\2\177\u0080\5\64")
        buf.write(u"\33\2\u0080\u0081\b\3\1\2\u0081\u01fd\3\2\2\2\u0082\u0083")
        buf.write(u"\7i\2\2\u0083\u0084\7\37\2\2\u0084\u0085\7\34\2\2\u0085")
        buf.write(u"\u0086\5\64\33\2\u0086\u0087\b\3\1\2\u0087\u01fd\3\2")
        buf.write(u"\2\2\u0088\u0089\7\u0083\2\2\u0089\u008a\7\37\2\2\u008a")
        buf.write(u"\u008b\7\34\2\2\u008b\u008c\5\64\33\2\u008c\u008d\b\3")
        buf.write(u"\1\2\u008d\u01fd\3\2\2\2\u008e\u008f\7\u0091\2\2\u008f")
        buf.write(u"\u0090\7\37\2\2\u0090\u0091\7\34\2\2\u0091\u0092\5\64")
        buf.write(u"\33\2\u0092\u0093\b\3\1\2\u0093\u01fd\3\2\2\2\u0094\u0095")
        buf.write(u"\7q\2\2\u0095\u0096\7\37\2\2\u0096\u0097\7\34\2\2\u0097")
        buf.write(u"\u0098\5\64\33\2\u0098\u0099\b\3\1\2\u0099\u01fd\3\2")
        buf.write(u"\2\2\u009a\u009b\7y\2\2\u009b\u009c\7\37\2\2\u009c\u009d")
        buf.write(u"\7\34\2\2\u009d\u009e\5\64\33\2\u009e\u009f\b\3\1\2\u009f")
        buf.write(u"\u01fd\3\2\2\2\u00a0\u00a1\7\u0098\2\2\u00a1\u00a2\7")
        buf.write(u"\37\2\2\u00a2\u00a3\7\34\2\2\u00a3\u00a4\5\64\33\2\u00a4")
        buf.write(u"\u00a5\b\3\1\2\u00a5\u01fd\3\2\2\2\u00a6\u00a7\7i\2\2")
        buf.write(u"\u00a7\u00a8\5(\25\2\u00a8\u00a9\7\34\2\2\u00a9\u00aa")
        buf.write(u"\5\64\33\2\u00aa\u00ab\b\3\1\2\u00ab\u01fd\3\2\2\2\u00ac")
        buf.write(u"\u00ad\7\u0083\2\2\u00ad\u00ae\5(\25\2\u00ae\u00af\7")
        buf.write(u"\34\2\2\u00af\u00b0\5\64\33\2\u00b0\u00b1\b\3\1\2\u00b1")
        buf.write(u"\u01fd\3\2\2\2\u00b2\u00b3\7\u0091\2\2\u00b3\u00b4\5")
        buf.write(u"(\25\2\u00b4\u00b5\7\34\2\2\u00b5\u00b6\5\64\33\2\u00b6")
        buf.write(u"\u00b7\b\3\1\2\u00b7\u01fd\3\2\2\2\u00b8\u00b9\7q\2\2")
        buf.write(u"\u00b9\u00ba\5(\25\2\u00ba\u00bb\7\34\2\2\u00bb\u00bc")
        buf.write(u"\5\64\33\2\u00bc\u00bd\b\3\1\2\u00bd\u01fd\3\2\2\2\u00be")
        buf.write(u"\u00bf\7y\2\2\u00bf\u00c0\5(\25\2\u00c0\u00c1\7\34\2")
        buf.write(u"\2\u00c1\u00c2\5\64\33\2\u00c2\u00c3\b\3\1\2\u00c3\u01fd")
        buf.write(u"\3\2\2\2\u00c4\u00c5\7\u0098\2\2\u00c5\u00c6\5(\25\2")
        buf.write(u"\u00c6\u00c7\7\34\2\2\u00c7\u00c8\5\64\33\2\u00c8\u00c9")
        buf.write(u"\b\3\1\2\u00c9\u01fd\3\2\2\2\u00ca\u00cb\5\30\r\2\u00cb")
        buf.write(u"\u00cc\b\3\1\2\u00cc\u01fd\3\2\2\2\u00cd\u00ce\7\u0082")
        buf.write(u"\2\2\u00ce\u00cf\5\20\t\2\u00cf\u00d0\b\3\1\2\u00d0\u01fd")
        buf.write(u"\3\2\2\2\u00d1\u00d2\7p\2\2\u00d2\u00d3\5\20\t\2\u00d3")
        buf.write(u"\u00d4\b\3\1\2\u00d4\u01fd\3\2\2\2\u00d5\u00d6\7m\2\2")
        buf.write(u"\u00d6\u00d7\7\37\2\2\u00d7\u01fd\b\3\1\2\u00d8\u00d9")
        buf.write(u"\7w\2\2\u00d9\u00da\5\20\t\2\u00da\u00db\b\3\1\2\u00db")
        buf.write(u"\u01fd\3\2\2\2\u00dc\u00dd\5\20\t\2\u00dd\u00de\7p\2")
        buf.write(u"\2\u00de\u00df\b\3\1\2\u00df\u01fd\3\2\2\2\u00e0\u00e1")
        buf.write(u"\5\20\t\2\u00e1\u00e2\7\u0082\2\2\u00e2\u00e3\b\3\1\2")
        buf.write(u"\u00e3\u01fd\3\2\2\2\u00e4\u00e5\5\20\t\2\u00e5\u00e6")
        buf.write(u"\7d\2\2\u00e6\u00e7\b\3\1\2\u00e7\u01fd\3\2\2\2\u00e8")
        buf.write(u"\u00e9\5\20\t\2\u00e9\u00ea\7G\2\2\u00ea\u00eb\b\3\1")
        buf.write(u"\2\u00eb\u01fd\3\2\2\2\u00ec\u00ed\5\16\b\2\u00ed\u00ee")
        buf.write(u"\7G\2\2\u00ee\u00ef\b\3\1\2\u00ef\u01fd\3\2\2\2\u00f0")
        buf.write(u"\u00f1\7p\2\2\u00f1\u00f2\5\64\33\2\u00f2\u00f3\b\3\1")
        buf.write(u"\2\u00f3\u01fd\3\2\2\2\u00f4\u00f5\7w\2\2\u00f5\u00f6")
        buf.write(u"\5\64\33\2\u00f6\u00f7\b\3\1\2\u00f7\u01fd\3\2\2\2\u00f8")
        buf.write(u"\u00f9\7\u0082\2\2\u00f9\u00fa\5\64\33\2\u00fa\u00fb")
        buf.write(u"\b\3\1\2\u00fb\u01fd\3\2\2\2\u00fc\u00fd\5\64\33\2\u00fd")
        buf.write(u"\u00fe\7p\2\2\u00fe\u00ff\b\3\1\2\u00ff\u01fd\3\2\2\2")
        buf.write(u"\u0100\u0101\5\64\33\2\u0101\u0102\7\u0082\2\2\u0102")
        buf.write(u"\u0103\b\3\1\2\u0103\u01fd\3\2\2\2\u0104\u0105\5&\24")
        buf.write(u"\2\u0105\u0106\7\u00a4\2\2\u0106\u0107\7\u00a7\2\2\u0107")
        buf.write(u"\u0108\b\3\1\2\u0108\u01fd\3\2\2\2\u0109\u010a\5&\24")
        buf.write(u"\2\u010a\u010b\7\u00a7\2\2\u010b\u010c\b\3\1\2\u010c")
        buf.write(u"\u01fd\3\2\2\2\u010d\u010e\7\u0099\2\2\u010e\u010f\5")
        buf.write(u"8\35\2\u010f\u0110\b\3\1\2\u0110\u01fd\3\2\2\2\u0111")
        buf.write(u"\u0112\7\u0081\2\2\u0112\u0113\58\35\2\u0113\u0114\b")
        buf.write(u"\3\1\2\u0114\u01fd\3\2\2\2\u0115\u0116\7\'\2\2\u0116")
        buf.write(u"\u0117\58\35\2\u0117\u0118\b\3\1\2\u0118\u01fd\3\2\2")
        buf.write(u"\2\u0119\u011a\7o\2\2\u011a\u011b\58\35\2\u011b\u011c")
        buf.write(u"\b\3\1\2\u011c\u01fd\3\2\2\2\u011d\u011e\7x\2\2\u011e")
        buf.write(u"\u011f\58\35\2\u011f\u0120\b\3\1\2\u0120\u01fd\3\2\2")
        buf.write(u"\2\u0121\u0122\58\35\2\u0122\u0123\7e\2\2\u0123\u0124")
        buf.write(u"\b\3\1\2\u0124\u01fd\3\2\2\2\u0125\u0126\7u\2\2\u0126")
        buf.write(u"\u0127\7]\2\2\u0127\u01fd\b\3\1\2\u0128\u0129\7w\2\2")
        buf.write(u"\u0129\u012a\7S\2\2\u012a\u01fd\b\3\1\2\u012b\u012c\7")
        buf.write(u"w\2\2\u012c\u012d\7\u0085\2\2\u012d\u01fd\b\3\1\2\u012e")
        buf.write(u"\u012f\7\23\2\2\u012f\u0130\5B\"\2\u0130\u0131\7\t\2")
        buf.write(u"\2\u0131\u0132\5B\"\2\u0132\u0133\b\3\1\2\u0133\u01fd")
        buf.write(u"\3\2\2\2\u0134\u0135\7-\2\2\u0135\u0136\7@\2\2\u0136")
        buf.write(u"\u0137\5B\"\2\u0137\u0138\7%\2\2\u0138\u0139\7@\2\2\u0139")
        buf.write(u"\u013a\5B\"\2\u013a\u013b\b\3\1\2\u013b\u01fd\3\2\2\2")
        buf.write(u"\u013c\u013d\7w\2\2\u013d\u013e\7h\2\2\u013e\u01fd\b")
        buf.write(u"\3\1\2\u013f\u0140\7\u008f\2\2\u0140\u01fd\b\3\1\2\u0141")
        buf.write(u"\u0142\7\u008e\2\2\u0142\u01fd\b\3\1\2\u0143\u0144\7")
        buf.write(u"\u0097\2\2\u0144\u0145\7\66\2\2\u0145\u0146\5\20\t\2")
        buf.write(u"\u0146\u0147\b\3\1\2\u0147\u01fd\3\2\2\2\u0148\u0149")
        buf.write(u"\7\\\2\2\u0149\u014a\5\22\n\2\u014a\u014b\b\3\1\2\u014b")
        buf.write(u"\u01fd\3\2\2\2\u014c\u014d\7\\\2\2\u014d\u014e\5\20\t")
        buf.write(u"\2\u014e\u014f\7G\2\2\u014f\u0150\b\3\1\2\u0150\u01fd")
        buf.write(u"\3\2\2\2\u0151\u0152\7\\\2\2\u0152\u0153\5\20\t\2\u0153")
        buf.write(u"\u0154\b\3\1\2\u0154\u01fd\3\2\2\2\u0155\u0156\7\u009b")
        buf.write(u"\2\2\u0156\u0157\7s\2\2\u0157\u0158\7\4\2\2\u0158\u0159")
        buf.write(u"\7Q\2\2\u0159\u01fd\b\3\1\2\u015a\u015b\7Q\2\2\u015b")
        buf.write(u"\u015c\7J\2\2\u015c\u015d\7\u009b\2\2\u015d\u015e\7s")
        buf.write(u"\2\2\u015e\u01fd\b\3\1\2\u015f\u0160\7-\2\2\u0160\u0161")
        buf.write(u"\7\u009b\2\2\u0161\u0162\7C\2\2\u0162\u01fd\b\3\1\2\u0163")
        buf.write(u"\u0164\7-\2\2\u0164\u0165\7\u009b\2\2\u0165\u0166\7E")
        buf.write(u"\2\2\u0166\u01fd\b\3\1\2\u0167\u0168\7-\2\2\u0168\u0169")
        buf.write(u"\7\u009b\2\2\u0169\u016a\7L\2\2\u016a\u01fd\b\3\1\2\u016b")
        buf.write(u"\u016c\7-\2\2\u016c\u016d\7\u009b\2\2\u016d\u016e\7\62")
        buf.write(u"\2\2\u016e\u01fd\b\3\1\2\u016f\u0170\7-\2\2\u0170\u0171")
        buf.write(u"\7\u009b\2\2\u0171\u0172\7\u009d\2\2\u0172\u01fd\b\3")
        buf.write(u"\1\2\u0173\u0174\7-\2\2\u0174\u0175\7\u009b\2\2\u0175")
        buf.write(u"\u0176\7|\2\2\u0176\u01fd\b\3\1\2\u0177\u0178\7-\2\2")
        buf.write(u"\u0178\u0179\7\u009c\2\2\u0179\u017a\7\37\2\2\u017a\u01fd")
        buf.write(u"\b\3\1\2\u017b\u017c\7-\2\2\u017c\u017d\5B\"\2\u017d")
        buf.write(u"\u017e\7C\2\2\u017e\u017f\b\3\1\2\u017f\u01fd\3\2\2\2")
        buf.write(u"\u0180\u0181\7-\2\2\u0181\u0182\5B\"\2\u0182\u0183\7")
        buf.write(u"E\2\2\u0183\u0184\b\3\1\2\u0184\u01fd\3\2\2\2\u0185\u0186")
        buf.write(u"\7-\2\2\u0186\u0187\5B\"\2\u0187\u0188\7L\2\2\u0188\u0189")
        buf.write(u"\b\3\1\2\u0189\u01fd\3\2\2\2\u018a\u018b\7-\2\2\u018b")
        buf.write(u"\u018c\5B\"\2\u018c\u018d\7\62\2\2\u018d\u018e\b\3\1")
        buf.write(u"\2\u018e\u01fd\3\2\2\2\u018f\u0190\7-\2\2\u0190\u0191")
        buf.write(u"\5B\"\2\u0191\u0192\7\u009d\2\2\u0192\u0193\b\3\1\2\u0193")
        buf.write(u"\u01fd\3\2\2\2\u0194\u0195\7-\2\2\u0195\u0196\5B\"\2")
        buf.write(u"\u0196\u0197\7}\2\2\u0197\u0198\b\3\1\2\u0198\u01fd\3")
        buf.write(u"\2\2\2\u0199\u019a\7-\2\2\u019a\u019b\5B\"\2\u019b\u019c")
        buf.write(u"\7|\2\2\u019c\u019d\b\3\1\2\u019d\u01fd\3\2\2\2\u019e")
        buf.write(u"\u019f\7-\2\2\u019f\u01a0\5B\"\2\u01a0\u01a1\7 \2\2\u01a1")
        buf.write(u"\u01a2\b\3\1\2\u01a2\u01fd\3\2\2\2\u01a3\u01a4\7-\2\2")
        buf.write(u"\u01a4\u01a5\5B\"\2\u01a5\u01a6\7\37\2\2\u01a6\u01a7")
        buf.write(u"\b\3\1\2\u01a7\u01fd\3\2\2\2\u01a8\u01a9\7\37\2\2\u01a9")
        buf.write(u"\u01aa\7m\2\2\u01aa\u01fd\b\3\1\2\u01ab\u01ac\5@!\2\u01ac")
        buf.write(u"\u01ad\b\3\1\2\u01ad\u01fd\3\2\2\2\u01ae\u01af\7\24\2")
        buf.write(u"\2\u01af\u01b0\5\16\b\2\u01b0\u01b1\7\4\2\2\u01b1\u01b2")
        buf.write(u"\5\16\b\2\u01b2\u01b3\b\3\1\2\u01b3\u01fd\3\2\2\2\u01b4")
        buf.write(u"\u01b5\7\24\2\2\u01b5\u01b6\5\32\16\2\u01b6\u01b7\7\4")
        buf.write(u"\2\2\u01b7\u01b8\5\32\16\2\u01b8\u01b9\b\3\1\2\u01b9")
        buf.write(u"\u01fd\3\2\2\2\u01ba\u01bb\7\24\2\2\u01bb\u01bc\5\24")
        buf.write(u"\13\2\u01bc\u01bd\7\4\2\2\u01bd\u01be\5\24\13\2\u01be")
        buf.write(u"\u01bf\b\3\1\2\u01bf\u01fd\3\2\2\2\u01c0\u01c1\7\24\2")
        buf.write(u"\2\u01c1\u01c2\5\26\f\2\u01c2\u01c3\7\4\2\2\u01c3\u01c4")
        buf.write(u"\5\26\f\2\u01c4\u01c5\b\3\1\2\u01c5\u01fd\3\2\2\2\u01c6")
        buf.write(u"\u01c7\5\16\b\2\u01c7\u01c8\b\3\1\2\u01c8\u01fd\3\2\2")
        buf.write(u"\2\u01c9\u01ca\5\32\16\2\u01ca\u01cb\b\3\1\2\u01cb\u01fd")
        buf.write(u"\3\2\2\2\u01cc\u01cd\5\24\13\2\u01cd\u01ce\b\3\1\2\u01ce")
        buf.write(u"\u01fd\3\2\2\2\u01cf\u01d0\5\26\f\2\u01d0\u01d1\b\3\1")
        buf.write(u"\2\u01d1\u01fd\3\2\2\2\u01d2\u01d3\5\66\34\2\u01d3\u01d4")
        buf.write(u"\b\3\1\2\u01d4\u01fd\3\2\2\2\u01d5\u01d6\7\24\2\2\u01d6")
        buf.write(u"\u01d7\5:\36\2\u01d7\u01d8\7\4\2\2\u01d8\u01d9\5:\36")
        buf.write(u"\2\u01d9\u01da\b\3\1\2\u01da\u01fd\3\2\2\2\u01db\u01dc")
        buf.write(u"\5:\36\2\u01dc\u01dd\b\3\1\2\u01dd\u01fd\3\2\2\2\u01de")
        buf.write(u"\u01df\5\22\n\2\u01df\u01e0\b\3\1\2\u01e0\u01fd\3\2\2")
        buf.write(u"\2\u01e1\u01e2\5\36\20\2\u01e2\u01e3\b\3\1\2\u01e3\u01fd")
        buf.write(u"\3\2\2\2\u01e4\u01e5\7\25\2\2\u01e5\u01e6\5&\24\2\u01e6")
        buf.write(u"\u01e7\7\7\2\2\u01e7\u01e8\5&\24\2\u01e8\u01e9\b\3\1")
        buf.write(u"\2\u01e9\u01fd\3\2\2\2\u01ea\u01eb\5&\24\2\u01eb\u01ec")
        buf.write(u"\b\3\1\2\u01ec\u01fd\3\2\2\2\u01ed\u01ee\5 \21\2\u01ee")
        buf.write(u"\u01ef\b\3\1\2\u01ef\u01fd\3\2\2\2\u01f0\u01f1\5\34\17")
        buf.write(u"\2\u01f1\u01f2\b\3\1\2\u01f2\u01fd\3\2\2\2\u01f3\u01f4")
        buf.write(u"\5\20\t\2\u01f4\u01f5\b\3\1\2\u01f5\u01fd\3\2\2\2\u01f6")
        buf.write(u"\u01f7\5> \2\u01f7\u01f8\b\3\1\2\u01f8\u01fd\3\2\2\2")
        buf.write(u"\u01f9\u01fa\5<\37\2\u01fa\u01fb\b\3\1\2\u01fb\u01fd")
        buf.write(u"\3\2\2\2\u01fcR\3\2\2\2\u01fcU\3\2\2\2\u01fcX\3\2\2\2")
        buf.write(u"\u01fc[\3\2\2\2\u01fc^\3\2\2\2\u01fcd\3\2\2\2\u01fcj")
        buf.write(u"\3\2\2\2\u01fcp\3\2\2\2\u01fcv\3\2\2\2\u01fc|\3\2\2\2")
        buf.write(u"\u01fc\u0082\3\2\2\2\u01fc\u0088\3\2\2\2\u01fc\u008e")
        buf.write(u"\3\2\2\2\u01fc\u0094\3\2\2\2\u01fc\u009a\3\2\2\2\u01fc")
        buf.write(u"\u00a0\3\2\2\2\u01fc\u00a6\3\2\2\2\u01fc\u00ac\3\2\2")
        buf.write(u"\2\u01fc\u00b2\3\2\2\2\u01fc\u00b8\3\2\2\2\u01fc\u00be")
        buf.write(u"\3\2\2\2\u01fc\u00c4\3\2\2\2\u01fc\u00ca\3\2\2\2\u01fc")
        buf.write(u"\u00cd\3\2\2\2\u01fc\u00d1\3\2\2\2\u01fc\u00d5\3\2\2")
        buf.write(u"\2\u01fc\u00d8\3\2\2\2\u01fc\u00dc\3\2\2\2\u01fc\u00e0")
        buf.write(u"\3\2\2\2\u01fc\u00e4\3\2\2\2\u01fc\u00e8\3\2\2\2\u01fc")
        buf.write(u"\u00ec\3\2\2\2\u01fc\u00f0\3\2\2\2\u01fc\u00f4\3\2\2")
        buf.write(u"\2\u01fc\u00f8\3\2\2\2\u01fc\u00fc\3\2\2\2\u01fc\u0100")
        buf.write(u"\3\2\2\2\u01fc\u0104\3\2\2\2\u01fc\u0109\3\2\2\2\u01fc")
        buf.write(u"\u010d\3\2\2\2\u01fc\u0111\3\2\2\2\u01fc\u0115\3\2\2")
        buf.write(u"\2\u01fc\u0119\3\2\2\2\u01fc\u011d\3\2\2\2\u01fc\u0121")
        buf.write(u"\3\2\2\2\u01fc\u0125\3\2\2\2\u01fc\u0128\3\2\2\2\u01fc")
        buf.write(u"\u012b\3\2\2\2\u01fc\u012e\3\2\2\2\u01fc\u0134\3\2\2")
        buf.write(u"\2\u01fc\u013c\3\2\2\2\u01fc\u013f\3\2\2\2\u01fc\u0141")
        buf.write(u"\3\2\2\2\u01fc\u0143\3\2\2\2\u01fc\u0148\3\2\2\2\u01fc")
        buf.write(u"\u014c\3\2\2\2\u01fc\u0151\3\2\2\2\u01fc\u0155\3\2\2")
        buf.write(u"\2\u01fc\u015a\3\2\2\2\u01fc\u015f\3\2\2\2\u01fc\u0163")
        buf.write(u"\3\2\2\2\u01fc\u0167\3\2\2\2\u01fc\u016b\3\2\2\2\u01fc")
        buf.write(u"\u016f\3\2\2\2\u01fc\u0173\3\2\2\2\u01fc\u0177\3\2\2")
        buf.write(u"\2\u01fc\u017b\3\2\2\2\u01fc\u0180\3\2\2\2\u01fc\u0185")
        buf.write(u"\3\2\2\2\u01fc\u018a\3\2\2\2\u01fc\u018f\3\2\2\2\u01fc")
        buf.write(u"\u0194\3\2\2\2\u01fc\u0199\3\2\2\2\u01fc\u019e\3\2\2")
        buf.write(u"\2\u01fc\u01a3\3\2\2\2\u01fc\u01a8\3\2\2\2\u01fc\u01ab")
        buf.write(u"\3\2\2\2\u01fc\u01ae\3\2\2\2\u01fc\u01b4\3\2\2\2\u01fc")
        buf.write(u"\u01ba\3\2\2\2\u01fc\u01c0\3\2\2\2\u01fc\u01c6\3\2\2")
        buf.write(u"\2\u01fc\u01c9\3\2\2\2\u01fc\u01cc\3\2\2\2\u01fc\u01cf")
        buf.write(u"\3\2\2\2\u01fc\u01d2\3\2\2\2\u01fc\u01d5\3\2\2\2\u01fc")
        buf.write(u"\u01db\3\2\2\2\u01fc\u01de\3\2\2\2\u01fc\u01e1\3\2\2")
        buf.write(u"\2\u01fc\u01e4\3\2\2\2\u01fc\u01ea\3\2\2\2\u01fc\u01ed")
        buf.write(u"\3\2\2\2\u01fc\u01f0\3\2\2\2\u01fc\u01f3\3\2\2\2\u01fc")
        buf.write(u"\u01f6\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fd\5\3\2\2\2\u01fe")
        buf.write(u"\u01ff\7$\2\2\u01ff\u0200\7\66\2\2\u0200\u0201\7o\2\2")
        buf.write(u"\u0201\u0202\5B\"\2\u0202\u0203\7\60\2\2\u0203\u0204")
        buf.write(u"\b\4\1\2\u0204\u028c\3\2\2\2\u0205\u0206\7$\2\2\u0206")
        buf.write(u"\u0207\7\66\2\2\u0207\u0208\5B\"\2\u0208\u0209\7\60\2")
        buf.write(u"\2\u0209\u020a\7o\2\2\u020a\u020b\b\4\1\2\u020b\u028c")
        buf.write(u"\3\2\2\2\u020c\u020d\7$\2\2\u020d\u020e\7\66\2\2\u020e")
        buf.write(u"\u020f\5B\"\2\u020f\u0210\7o\2\2\u0210\u0211\7\60\2\2")
        buf.write(u"\u0211\u0212\b\4\1\2\u0212\u028c\3\2\2\2\u0213\u0214")
        buf.write(u"\7V\2\2\u0214\u0215\7\22\2\2\u0215\u0216\7\27\2\2\u0216")
        buf.write(u"\u0217\7o\2\2\u0217\u0218\5B\"\2\u0218\u0219\7\60\2\2")
        buf.write(u"\u0219\u021a\b\4\1\2\u021a\u028c\3\2\2\2\u021b\u021c")
        buf.write(u"\7V\2\2\u021c\u021d\7\22\2\2\u021d\u021e\7\27\2\2\u021e")
        buf.write(u"\u021f\5B\"\2\u021f\u0220\7\60\2\2\u0220\u0221\7o\2\2")
        buf.write(u"\u0221\u0222\b\4\1\2\u0222\u028c\3\2\2\2\u0223\u0224")
        buf.write(u"\7V\2\2\u0224\u0225\7\22\2\2\u0225\u0226\7\27\2\2\u0226")
        buf.write(u"\u0227\5B\"\2\u0227\u0228\7o\2\2\u0228\u0229\7\60\2\2")
        buf.write(u"\u0229\u022a\b\4\1\2\u022a\u028c\3\2\2\2\u022b\u022c")
        buf.write(u"\7f\2\2\u022c\u022d\7\66\2\2\u022d\u022e\7o\2\2\u022e")
        buf.write(u"\u022f\5B\"\2\u022f\u0230\7\60\2\2\u0230\u0231\b\4\1")
        buf.write(u"\2\u0231\u028c\3\2\2\2\u0232\u0233\7f\2\2\u0233\u0234")
        buf.write(u"\7\66\2\2\u0234\u0235\5B\"\2\u0235\u0236\7\60\2\2\u0236")
        buf.write(u"\u0237\7o\2\2\u0237\u0238\b\4\1\2\u0238\u028c\3\2\2\2")
        buf.write(u"\u0239\u023a\7f\2\2\u023a\u023b\7\66\2\2\u023b\u023c")
        buf.write(u"\5B\"\2\u023c\u023d\7o\2\2\u023d\u023e\7\60\2\2\u023e")
        buf.write(u"\u023f\b\4\1\2\u023f\u028c\3\2\2\2\u0240\u0241\7$\2\2")
        buf.write(u"\u0241\u0242\7\64\2\2\u0242\u0243\7\u0081\2\2\u0243\u0244")
        buf.write(u"\5B\"\2\u0244\u0245\7\60\2\2\u0245\u0246\b\4\1\2\u0246")
        buf.write(u"\u028c\3\2\2\2\u0247\u0248\7$\2\2\u0248\u0249\7\66\2")
        buf.write(u"\2\u0249\u024a\5B\"\2\u024a\u024b\7\60\2\2\u024b\u024c")
        buf.write(u"\7\u0081\2\2\u024c\u024d\b\4\1\2\u024d\u028c\3\2\2\2")
        buf.write(u"\u024e\u024f\7$\2\2\u024f\u0250\7\66\2\2\u0250\u0251")
        buf.write(u"\5B\"\2\u0251\u0252\7\u0081\2\2\u0252\u0253\7\60\2\2")
        buf.write(u"\u0253\u0254\b\4\1\2\u0254\u028c\3\2\2\2\u0255\u0256")
        buf.write(u"\7$\2\2\u0256\u0257\7\66\2\2\u0257\u0258\7b\2\2\u0258")
        buf.write(u"\u0259\5B\"\2\u0259\u025a\7\60\2\2\u025a\u025b\b\4\1")
        buf.write(u"\2\u025b\u028c\3\2\2\2\u025c\u025d\7$\2\2\u025d\u025e")
        buf.write(u"\7\66\2\2\u025e\u025f\5B\"\2\u025f\u0260\7\60\2\2\u0260")
        buf.write(u"\u0261\7b\2\2\u0261\u0262\b\4\1\2\u0262\u028c\3\2\2\2")
        buf.write(u"\u0263\u0264\7V\2\2\u0264\u0265\7\22\2\2\u0265\u0266")
        buf.write(u"\7\26\2\2\u0266\u0267\7\u0081\2\2\u0267\u0268\5B\"\2")
        buf.write(u"\u0268\u0269\7\60\2\2\u0269\u026a\b\4\1\2\u026a\u028c")
        buf.write(u"\3\2\2\2\u026b\u026c\7V\2\2\u026c\u026d\7\22\2\2\u026d")
        buf.write(u"\u026e\7\27\2\2\u026e\u026f\5B\"\2\u026f\u0270\7\60\2")
        buf.write(u"\2\u0270\u0271\7\u0081\2\2\u0271\u0272\b\4\1\2\u0272")
        buf.write(u"\u028c\3\2\2\2\u0273\u0274\7V\2\2\u0274\u0275\7\22\2")
        buf.write(u"\2\u0275\u0276\7\27\2\2\u0276\u0277\5B\"\2\u0277\u0278")
        buf.write(u"\7\u0081\2\2\u0278\u0279\7\60\2\2\u0279\u027a\b\4\1\2")
        buf.write(u"\u027a\u028c\3\2\2\2\u027b\u027c\7V\2\2\u027c\u027d\7")
        buf.write(u"\22\2\2\u027d\u027e\7\27\2\2\u027e\u027f\5B\"\2\u027f")
        buf.write(u"\u0280\7\60\2\2\u0280\u0281\7b\2\2\u0281\u0282\b\4\1")
        buf.write(u"\2\u0282\u028c\3\2\2\2\u0283\u0284\7V\2\2\u0284\u0285")
        buf.write(u"\7\22\2\2\u0285\u0286\7\27\2\2\u0286\u0287\7b\2\2\u0287")
        buf.write(u"\u0288\5B\"\2\u0288\u0289\7\60\2\2\u0289\u028a\b\4\1")
        buf.write(u"\2\u028a\u028c\3\2\2\2\u028b\u01fe\3\2\2\2\u028b\u0205")
        buf.write(u"\3\2\2\2\u028b\u020c\3\2\2\2\u028b\u0213\3\2\2\2\u028b")
        buf.write(u"\u021b\3\2\2\2\u028b\u0223\3\2\2\2\u028b\u022b\3\2\2")
        buf.write(u"\2\u028b\u0232\3\2\2\2\u028b\u0239\3\2\2\2\u028b\u0240")
        buf.write(u"\3\2\2\2\u028b\u0247\3\2\2\2\u028b\u024e\3\2\2\2\u028b")
        buf.write(u"\u0255\3\2\2\2\u028b\u025c\3\2\2\2\u028b\u0263\3\2\2")
        buf.write(u"\2\u028b\u026b\3\2\2\2\u028b\u0273\3\2\2\2\u028b\u027b")
        buf.write(u"\3\2\2\2\u028b\u0283\3\2\2\2\u028c\7\3\2\2\2\u028d\u028e")
        buf.write(u"\7$\2\2\u028e\u028f\7?\2\2\u028f\u0290\7m\2\2\u0290\u0291")
        buf.write(u"\7\u0089\2\2\u0291\u0357\b\5\1\2\u0292\u0293\7$\2\2\u0293")
        buf.write(u"\u0294\7?\2\2\u0294\u0295\7\u0089\2\2\u0295\u0296\7m")
        buf.write(u"\2\2\u0296\u0357\b\5\1\2\u0297\u0298\7$\2\2\u0298\u0299")
        buf.write(u"\7\u0089\2\2\u0299\u029a\7m\2\2\u029a\u0357\b\5\1\2\u029b")
        buf.write(u"\u029c\7$\2\2\u029c\u029d\7@\2\2\u029d\u029e\7n\2\2\u029e")
        buf.write(u"\u029f\5B\"\2\u029f\u02a0\7\u008b\2\2\u02a0\u02a1\b\5")
        buf.write(u"\1\2\u02a1\u0357\3\2\2\2\u02a2\u02a3\7$\2\2\u02a3\u02a4")
        buf.write(u"\7@\2\2\u02a4\u02a5\5B\"\2\u02a5\u02a6\7\u008b\2\2\u02a6")
        buf.write(u"\u02a7\7n\2\2\u02a7\u02a8\b\5\1\2\u02a8\u0357\3\2\2\2")
        buf.write(u"\u02a9\u02aa\7$\2\2\u02aa\u02ab\7@\2\2\u02ab\u02ac\5")
        buf.write(u"B\"\2\u02ac\u02ad\7n\2\2\u02ad\u02ae\7\u008b\2\2\u02ae")
        buf.write(u"\u02af\b\5\1\2\u02af\u0357\3\2\2\2\u02b0\u02b1\7V\2\2")
        buf.write(u"\u02b1\u02b2\7\22\2\2\u02b2\u02b3\7\32\2\2\u02b3\u02b4")
        buf.write(u"\7\u0089\2\2\u02b4\u02b5\7m\2\2\u02b5\u0357\b\5\1\2\u02b6")
        buf.write(u"\u02b7\7V\2\2\u02b7\u02b8\7\22\2\2\u02b8\u02b9\7\32\2")
        buf.write(u"\2\u02b9\u02ba\7m\2\2\u02ba\u02bb\7\u0089\2\2\u02bb\u0357")
        buf.write(u"\b\5\1\2\u02bc\u02bd\7V\2\2\u02bd\u02be\7\22\2\2\u02be")
        buf.write(u"\u02bf\7\34\2\2\u02bf\u02c0\7\u0089\2\2\u02c0\u02c1\7")
        buf.write(u"m\2\2\u02c1\u0357\b\5\1\2\u02c2\u02c3\7V\2\2\u02c3\u02c4")
        buf.write(u"\7\22\2\2\u02c4\u02c5\7\33\2\2\u02c5\u02c6\7n\2\2\u02c6")
        buf.write(u"\u02c7\5B\"\2\u02c7\u02c8\7\u008b\2\2\u02c8\u02c9\b\5")
        buf.write(u"\1\2\u02c9\u0357\3\2\2\2\u02ca\u02cb\7V\2\2\u02cb\u02cc")
        buf.write(u"\7\22\2\2\u02cc\u02cd\7\33\2\2\u02cd\u02ce\5B\"\2\u02ce")
        buf.write(u"\u02cf\7\u008b\2\2\u02cf\u02d0\7n\2\2\u02d0\u02d1\b\5")
        buf.write(u"\1\2\u02d1\u0357\3\2\2\2\u02d2\u02d3\7V\2\2\u02d3\u02d4")
        buf.write(u"\7\22\2\2\u02d4\u02d5\7\33\2\2\u02d5\u02d6\5B\"\2\u02d6")
        buf.write(u"\u02d7\7n\2\2\u02d7\u02d8\7\u008b\2\2\u02d8\u02d9\b\5")
        buf.write(u"\1\2\u02d9\u0357\3\2\2\2\u02da\u02db\7f\2\2\u02db\u02dc")
        buf.write(u"\7?\2\2\u02dc\u02dd\7m\2\2\u02dd\u02de\7\u0089\2\2\u02de")
        buf.write(u"\u0357\b\5\1\2\u02df\u02e0\7f\2\2\u02e0\u02e1\7?\2\2")
        buf.write(u"\u02e1\u02e2\7\u0089\2\2\u02e2\u02e3\7m\2\2\u02e3\u0357")
        buf.write(u"\b\5\1\2\u02e4\u02e5\7f\2\2\u02e5\u02e6\7\u0089\2\2\u02e6")
        buf.write(u"\u02e7\7m\2\2\u02e7\u0357\b\5\1\2\u02e8\u02e9\7f\2\2")
        buf.write(u"\u02e9\u02ea\7@\2\2\u02ea\u02eb\7n\2\2\u02eb\u02ec\5")
        buf.write(u"B\"\2\u02ec\u02ed\7\u008b\2\2\u02ed\u02ee\b\5\1\2\u02ee")
        buf.write(u"\u0357\3\2\2\2\u02ef\u02f0\7f\2\2\u02f0\u02f1\7@\2\2")
        buf.write(u"\u02f1\u02f2\5B\"\2\u02f2\u02f3\7n\2\2\u02f3\u02f4\7")
        buf.write(u"\u008b\2\2\u02f4\u02f5\b\5\1\2\u02f5\u0357\3\2\2\2\u02f6")
        buf.write(u"\u02f7\7f\2\2\u02f7\u02f8\7@\2\2\u02f8\u02f9\5B\"\2\u02f9")
        buf.write(u"\u02fa\7\u008b\2\2\u02fa\u02fb\7n\2\2\u02fb\u02fc\b\5")
        buf.write(u"\1\2\u02fc\u0357\3\2\2\2\u02fd\u02fe\7$\2\2\u02fe\u02ff")
        buf.write(u"\7?\2\2\u02ff\u0300\7\177\2\2\u0300\u0301\7\u0089\2\2")
        buf.write(u"\u0301\u0357\b\5\1\2\u0302\u0303\7$\2\2\u0303\u0304\7")
        buf.write(u"?\2\2\u0304\u0305\7\u0089\2\2\u0305\u0306\7\177\2\2\u0306")
        buf.write(u"\u0357\b\5\1\2\u0307\u0308\7$\2\2\u0308\u0309\7\u0089")
        buf.write(u"\2\2\u0309\u030a\7\177\2\2\u030a\u0357\b\5\1\2\u030b")
        buf.write(u"\u030c\7$\2\2\u030c\u030d\7@\2\2\u030d\u030e\7\u0080")
        buf.write(u"\2\2\u030e\u030f\5B\"\2\u030f\u0310\7\u008b\2\2\u0310")
        buf.write(u"\u0311\b\5\1\2\u0311\u0357\3\2\2\2\u0312\u0313\7$\2\2")
        buf.write(u"\u0313\u0314\7@\2\2\u0314\u0315\5B\"\2\u0315\u0316\7")
        buf.write(u"\u008b\2\2\u0316\u0317\7\u0080\2\2\u0317\u0318\b\5\1")
        buf.write(u"\2\u0318\u0357\3\2\2\2\u0319\u031a\7$\2\2\u031a\u031b")
        buf.write(u"\7@\2\2\u031b\u031c\5B\"\2\u031c\u031d\7\u0080\2\2\u031d")
        buf.write(u"\u031e\7\u008b\2\2\u031e\u031f\b\5\1\2\u031f\u0357\3")
        buf.write(u"\2\2\2\u0320\u0321\7$\2\2\u0321\u0322\7@\2\2\u0322\u0323")
        buf.write(u"\5B\"\2\u0323\u0324\7a\2\2\u0324\u0325\7\u008b\2\2\u0325")
        buf.write(u"\u0326\b\5\1\2\u0326\u0357\3\2\2\2\u0327\u0328\7$\2\2")
        buf.write(u"\u0328\u0329\7@\2\2\u0329\u032a\5B\"\2\u032a\u032b\7")
        buf.write(u"\u008b\2\2\u032b\u032c\7a\2\2\u032c\u032d\b\5\1\2\u032d")
        buf.write(u"\u0357\3\2\2\2\u032e\u032f\7V\2\2\u032f\u0330\7\22\2")
        buf.write(u"\2\u0330\u0331\7\33\2\2\u0331\u0332\7\u0080\2\2\u0332")
        buf.write(u"\u0333\5B\"\2\u0333\u0334\7\u008b\2\2\u0334\u0335\b\5")
        buf.write(u"\1\2\u0335\u0357\3\2\2\2\u0336\u0337\7V\2\2\u0337\u0338")
        buf.write(u"\7\22\2\2\u0338\u0339\7\33\2\2\u0339\u033a\5B\"\2\u033a")
        buf.write(u"\u033b\7\u008b\2\2\u033b\u033c\7\u0080\2\2\u033c\u033d")
        buf.write(u"\b\5\1\2\u033d\u0357\3\2\2\2\u033e\u033f\7V\2\2\u033f")
        buf.write(u"\u0340\7\22\2\2\u0340\u0341\7\33\2\2\u0341\u0342\5B\"")
        buf.write(u"\2\u0342\u0343\7\u0080\2\2\u0343\u0344\7\u008b\2\2\u0344")
        buf.write(u"\u0345\b\5\1\2\u0345\u0357\3\2\2\2\u0346\u0347\7V\2\2")
        buf.write(u"\u0347\u0348\7\22\2\2\u0348\u0349\7\33\2\2\u0349\u034a")
        buf.write(u"\5B\"\2\u034a\u034b\7a\2\2\u034b\u034c\7\u008b\2\2\u034c")
        buf.write(u"\u034d\b\5\1\2\u034d\u0357\3\2\2\2\u034e\u034f\7V\2\2")
        buf.write(u"\u034f\u0350\7\22\2\2\u0350\u0351\7\33\2\2\u0351\u0352")
        buf.write(u"\5B\"\2\u0352\u0353\7\u008b\2\2\u0353\u0354\7a\2\2\u0354")
        buf.write(u"\u0355\b\5\1\2\u0355\u0357\3\2\2\2\u0356\u028d\3\2\2")
        buf.write(u"\2\u0356\u0292\3\2\2\2\u0356\u0297\3\2\2\2\u0356\u029b")
        buf.write(u"\3\2\2\2\u0356\u02a2\3\2\2\2\u0356\u02a9\3\2\2\2\u0356")
        buf.write(u"\u02b0\3\2\2\2\u0356\u02b6\3\2\2\2\u0356\u02bc\3\2\2")
        buf.write(u"\2\u0356\u02c2\3\2\2\2\u0356\u02ca\3\2\2\2\u0356\u02d2")
        buf.write(u"\3\2\2\2\u0356\u02da\3\2\2\2\u0356\u02df\3\2\2\2\u0356")
        buf.write(u"\u02e4\3\2\2\2\u0356\u02e8\3\2\2\2\u0356\u02ef\3\2\2")
        buf.write(u"\2\u0356\u02f6\3\2\2\2\u0356\u02fd\3\2\2\2\u0356\u0302")
        buf.write(u"\3\2\2\2\u0356\u0307\3\2\2\2\u0356\u030b\3\2\2\2\u0356")
        buf.write(u"\u0312\3\2\2\2\u0356\u0319\3\2\2\2\u0356\u0320\3\2\2")
        buf.write(u"\2\u0356\u0327\3\2\2\2\u0356\u032e\3\2\2\2\u0356\u0336")
        buf.write(u"\3\2\2\2\u0356\u033e\3\2\2\2\u0356\u0346\3\2\2\2\u0356")
        buf.write(u"\u034e\3\2\2\2\u0357\t\3\2\2\2\u0358\u0359\7$\2\2\u0359")
        buf.write(u"\u035a\78\2\2\u035a\u035b\7p\2\2\u035b\u035c\7M\2\2\u035c")
        buf.write(u"\u0410\b\6\1\2\u035d\u035e\7$\2\2\u035e\u035f\78\2\2")
        buf.write(u"\u035f\u0360\7M\2\2\u0360\u0361\7p\2\2\u0361\u0410\b")
        buf.write(u"\6\1\2\u0362\u0363\7$\2\2\u0363\u0364\7\66\2\2\u0364")
        buf.write(u"\u0365\7o\2\2\u0365\u0366\5B\"\2\u0366\u0367\7N\2\2\u0367")
        buf.write(u"\u0368\b\6\1\2\u0368\u0410\3\2\2\2\u0369\u036a\7$\2\2")
        buf.write(u"\u036a\u036b\7\66\2\2\u036b\u036c\5B\"\2\u036c\u036d")
        buf.write(u"\7N\2\2\u036d\u036e\7o\2\2\u036e\u036f\b\6\1\2\u036f")
        buf.write(u"\u0410\3\2\2\2\u0370\u0371\7$\2\2\u0371\u0372\7\66\2")
        buf.write(u"\2\u0372\u0373\5B\"\2\u0373\u0374\7o\2\2\u0374\u0375")
        buf.write(u"\7N\2\2\u0375\u0376\b\6\1\2\u0376\u0410\3\2\2\2\u0377")
        buf.write(u"\u0378\7V\2\2\u0378\u0379\7\22\2\2\u0379\u037a\7\30\2")
        buf.write(u"\2\u037a\u037b\7M\2\2\u037b\u037c\7p\2\2\u037c\u0410")
        buf.write(u"\b\6\1\2\u037d\u037e\7V\2\2\u037e\u037f\7\22\2\2\u037f")
        buf.write(u"\u0380\7\30\2\2\u0380\u0381\7p\2\2\u0381\u0382\7M\2\2")
        buf.write(u"\u0382\u0410\b\6\1\2\u0383\u0384\7V\2\2\u0384\u0385\7")
        buf.write(u"\22\2\2\u0385\u0386\7\27\2\2\u0386\u0387\7o\2\2\u0387")
        buf.write(u"\u0388\5B\"\2\u0388\u0389\7N\2\2\u0389\u038a\b\6\1\2")
        buf.write(u"\u038a\u0410\3\2\2\2\u038b\u038c\7V\2\2\u038c\u038d\7")
        buf.write(u"\22\2\2\u038d\u038e\7\27\2\2\u038e\u038f\5B\"\2\u038f")
        buf.write(u"\u0390\7N\2\2\u0390\u0391\7o\2\2\u0391\u0392\b\6\1\2")
        buf.write(u"\u0392\u0410\3\2\2\2\u0393\u0394\7V\2\2\u0394\u0395\7")
        buf.write(u"\22\2\2\u0395\u0396\7\27\2\2\u0396\u0397\5B\"\2\u0397")
        buf.write(u"\u0398\7o\2\2\u0398\u0399\7N\2\2\u0399\u039a\b\6\1\2")
        buf.write(u"\u039a\u0410\3\2\2\2\u039b\u039c\7f\2\2\u039c\u039d\7")
        buf.write(u"8\2\2\u039d\u039e\7p\2\2\u039e\u039f\7M\2\2\u039f\u0410")
        buf.write(u"\b\6\1\2\u03a0\u03a1\7f\2\2\u03a1\u03a2\78\2\2\u03a2")
        buf.write(u"\u03a3\7M\2\2\u03a3\u03a4\7p\2\2\u03a4\u0410\b\6\1\2")
        buf.write(u"\u03a5\u03a6\7f\2\2\u03a6\u03a7\7\66\2\2\u03a7\u03a8")
        buf.write(u"\7o\2\2\u03a8\u03a9\5B\"\2\u03a9\u03aa\7N\2\2\u03aa\u03ab")
        buf.write(u"\b\6\1\2\u03ab\u0410\3\2\2\2\u03ac\u03ad\7f\2\2\u03ad")
        buf.write(u"\u03ae\7\66\2\2\u03ae\u03af\5B\"\2\u03af\u03b0\7o\2\2")
        buf.write(u"\u03b0\u03b1\7N\2\2\u03b1\u03b2\b\6\1\2\u03b2\u0410\3")
        buf.write(u"\2\2\2\u03b3\u03b4\7f\2\2\u03b4\u03b5\7\66\2\2\u03b5")
        buf.write(u"\u03b6\5B\"\2\u03b6\u03b7\7N\2\2\u03b7\u03b8\7o\2\2\u03b8")
        buf.write(u"\u03b9\b\6\1\2\u03b9\u0410\3\2\2\2\u03ba\u03bb\7$\2\2")
        buf.write(u"\u03bb\u03bc\7A\2\2\u03bc\u03bd\7\u0082\2\2\u03bd\u03be")
        buf.write(u"\7M\2\2\u03be\u0410\b\6\1\2\u03bf\u03c0\7$\2\2\u03c0")
        buf.write(u"\u03c1\78\2\2\u03c1\u03c2\7M\2\2\u03c2\u03c3\7\u0082")
        buf.write(u"\2\2\u03c3\u0410\b\6\1\2\u03c4\u03c5\7$\2\2\u03c5\u03c6")
        buf.write(u"\7\64\2\2\u03c6\u03c7\7\u0081\2\2\u03c7\u03c8\5B\"\2")
        buf.write(u"\u03c8\u03c9\7N\2\2\u03c9\u03ca\b\6\1\2\u03ca\u0410\3")
        buf.write(u"\2\2\2\u03cb\u03cc\7$\2\2\u03cc\u03cd\7\66\2\2\u03cd")
        buf.write(u"\u03ce\5B\"\2\u03ce\u03cf\7N\2\2\u03cf\u03d0\7\u0081")
        buf.write(u"\2\2\u03d0\u03d1\b\6\1\2\u03d1\u0410\3\2\2\2\u03d2\u03d3")
        buf.write(u"\7$\2\2\u03d3\u03d4\7\66\2\2\u03d4\u03d5\5B\"\2\u03d5")
        buf.write(u"\u03d6\7\u0081\2\2\u03d6\u03d7\7N\2\2\u03d7\u03d8\b\6")
        buf.write(u"\1\2\u03d8\u0410\3\2\2\2\u03d9\u03da\7$\2\2\u03da\u03db")
        buf.write(u"\7\66\2\2\u03db\u03dc\5B\"\2\u03dc\u03dd\7b\2\2\u03dd")
        buf.write(u"\u03de\7N\2\2\u03de\u03df\b\6\1\2\u03df\u0410\3\2\2\2")
        buf.write(u"\u03e0\u03e1\7$\2\2\u03e1\u03e2\7\66\2\2\u03e2\u03e3")
        buf.write(u"\5B\"\2\u03e3\u03e4\7N\2\2\u03e4\u03e5\7b\2\2\u03e5\u03e6")
        buf.write(u"\b\6\1\2\u03e6\u0410\3\2\2\2\u03e7\u03e8\7V\2\2\u03e8")
        buf.write(u"\u03e9\7\22\2\2\u03e9\u03ea\7\26\2\2\u03ea\u03eb\7\u0081")
        buf.write(u"\2\2\u03eb\u03ec\5B\"\2\u03ec\u03ed\7N\2\2\u03ed\u03ee")
        buf.write(u"\b\6\1\2\u03ee\u0410\3\2\2\2\u03ef\u03f0\7V\2\2\u03f0")
        buf.write(u"\u03f1\7\22\2\2\u03f1\u03f2\7\27\2\2\u03f2\u03f3\5B\"")
        buf.write(u"\2\u03f3\u03f4\7N\2\2\u03f4\u03f5\7\u0081\2\2\u03f5\u03f6")
        buf.write(u"\b\6\1\2\u03f6\u0410\3\2\2\2\u03f7\u03f8\7V\2\2\u03f8")
        buf.write(u"\u03f9\7\22\2\2\u03f9\u03fa\7\27\2\2\u03fa\u03fb\5B\"")
        buf.write(u"\2\u03fb\u03fc\7\u0081\2\2\u03fc\u03fd\7N\2\2\u03fd\u03fe")
        buf.write(u"\b\6\1\2\u03fe\u0410\3\2\2\2\u03ff\u0400\7V\2\2\u0400")
        buf.write(u"\u0401\7\22\2\2\u0401\u0402\7\27\2\2\u0402\u0403\5B\"")
        buf.write(u"\2\u0403\u0404\7b\2\2\u0404\u0405\7N\2\2\u0405\u0406")
        buf.write(u"\b\6\1\2\u0406\u0410\3\2\2\2\u0407\u0408\7V\2\2\u0408")
        buf.write(u"\u0409\7\22\2\2\u0409\u040a\7\27\2\2\u040a\u040b\5B\"")
        buf.write(u"\2\u040b\u040c\7N\2\2\u040c\u040d\7b\2\2\u040d\u040e")
        buf.write(u"\b\6\1\2\u040e\u0410\3\2\2\2\u040f\u0358\3\2\2\2\u040f")
        buf.write(u"\u035d\3\2\2\2\u040f\u0362\3\2\2\2\u040f\u0369\3\2\2")
        buf.write(u"\2\u040f\u0370\3\2\2\2\u040f\u0377\3\2\2\2\u040f\u037d")
        buf.write(u"\3\2\2\2\u040f\u0383\3\2\2\2\u040f\u038b\3\2\2\2\u040f")
        buf.write(u"\u0393\3\2\2\2\u040f\u039b\3\2\2\2\u040f\u03a0\3\2\2")
        buf.write(u"\2\u040f\u03a5\3\2\2\2\u040f\u03ac\3\2\2\2\u040f\u03b3")
        buf.write(u"\3\2\2\2\u040f\u03ba\3\2\2\2\u040f\u03bf\3\2\2\2\u040f")
        buf.write(u"\u03c4\3\2\2\2\u040f\u03cb\3\2\2\2\u040f\u03d2\3\2\2")
        buf.write(u"\2\u040f\u03d9\3\2\2\2\u040f\u03e0\3\2\2\2\u040f\u03e7")
        buf.write(u"\3\2\2\2\u040f\u03ef\3\2\2\2\u040f\u03f7\3\2\2\2\u040f")
        buf.write(u"\u03ff\3\2\2\2\u040f\u0407\3\2\2\2\u0410\13\3\2\2\2\u0411")
        buf.write(u"\u0412\7$\2\2\u0412\u0413\78\2\2\u0413\u0414\7p\2\2\u0414")
        buf.write(u"\u0415\7\f\2\2\u0415\u04c9\b\7\1\2\u0416\u0417\7$\2\2")
        buf.write(u"\u0417\u0418\7<\2\2\u0418\u0419\7\f\2\2\u0419\u041a\7")
        buf.write(u"p\2\2\u041a\u04c9\b\7\1\2\u041b\u041c\7$\2\2\u041c\u041d")
        buf.write(u"\7\66\2\2\u041d\u041e\7o\2\2\u041e\u041f\5B\"\2\u041f")
        buf.write(u"\u0420\7\13\2\2\u0420\u0421\b\7\1\2\u0421\u04c9\3\2\2")
        buf.write(u"\2\u0422\u0423\7$\2\2\u0423\u0424\7\66\2\2\u0424\u0425")
        buf.write(u"\5B\"\2\u0425\u0426\7\13\2\2\u0426\u0427\7o\2\2\u0427")
        buf.write(u"\u0428\b\7\1\2\u0428\u04c9\3\2\2\2\u0429\u042a\7$\2\2")
        buf.write(u"\u042a\u042b\7\66\2\2\u042b\u042c\5B\"\2\u042c\u042d")
        buf.write(u"\7o\2\2\u042d\u042e\7\13\2\2\u042e\u042f\b\7\1\2\u042f")
        buf.write(u"\u04c9\3\2\2\2\u0430\u0431\7V\2\2\u0431\u0432\7\22\2")
        buf.write(u"\2\u0432\u0433\7\31\2\2\u0433\u0434\7\f\2\2\u0434\u0435")
        buf.write(u"\7p\2\2\u0435\u04c9\b\7\1\2\u0436\u0437\7V\2\2\u0437")
        buf.write(u"\u0438\7\22\2\2\u0438\u0439\7\30\2\2\u0439\u043a\7p\2")
        buf.write(u"\2\u043a\u043b\7\f\2\2\u043b\u04c9\b\7\1\2\u043c\u043d")
        buf.write(u"\7V\2\2\u043d\u043e\7\22\2\2\u043e\u043f\7\27\2\2\u043f")
        buf.write(u"\u0440\7o\2\2\u0440\u0441\5B\"\2\u0441\u0442\7\13\2\2")
        buf.write(u"\u0442\u0443\b\7\1\2\u0443\u04c9\3\2\2\2\u0444\u0445")
        buf.write(u"\7V\2\2\u0445\u0446\7\22\2\2\u0446\u0447\7\27\2\2\u0447")
        buf.write(u"\u0448\5B\"\2\u0448\u0449\7\13\2\2\u0449\u044a\7o\2\2")
        buf.write(u"\u044a\u044b\b\7\1\2\u044b\u04c9\3\2\2\2\u044c\u044d")
        buf.write(u"\7V\2\2\u044d\u044e\7\22\2\2\u044e\u044f\7\27\2\2\u044f")
        buf.write(u"\u0450\5B\"\2\u0450\u0451\7o\2\2\u0451\u0452\7\13\2\2")
        buf.write(u"\u0452\u0453\b\7\1\2\u0453\u04c9\3\2\2\2\u0454\u0455")
        buf.write(u"\7f\2\2\u0455\u0456\78\2\2\u0456\u0457\7p\2\2\u0457\u0458")
        buf.write(u"\7\f\2\2\u0458\u04c9\b\7\1\2\u0459\u045a\7f\2\2\u045a")
        buf.write(u"\u045b\7<\2\2\u045b\u045c\7\f\2\2\u045c\u045d\7p\2\2")
        buf.write(u"\u045d\u04c9\b\7\1\2\u045e\u045f\7f\2\2\u045f\u0460\7")
        buf.write(u"\66\2\2\u0460\u0461\7o\2\2\u0461\u0462\5B\"\2\u0462\u0463")
        buf.write(u"\7\13\2\2\u0463\u0464\b\7\1\2\u0464\u04c9\3\2\2\2\u0465")
        buf.write(u"\u0466\7f\2\2\u0466\u0467\7\66\2\2\u0467\u0468\5B\"\2")
        buf.write(u"\u0468\u0469\7o\2\2\u0469\u046a\7\13\2\2\u046a\u046b")
        buf.write(u"\b\7\1\2\u046b\u04c9\3\2\2\2\u046c\u046d\7f\2\2\u046d")
        buf.write(u"\u046e\7\66\2\2\u046e\u046f\5B\"\2\u046f\u0470\7\13\2")
        buf.write(u"\2\u0470\u0471\7o\2\2\u0471\u0472\b\7\1\2\u0472\u04c9")
        buf.write(u"\3\2\2\2\u0473\u0474\7$\2\2\u0474\u0475\7A\2\2\u0475")
        buf.write(u"\u0476\7\u0082\2\2\u0476\u0477\7\f\2\2\u0477\u04c9\b")
        buf.write(u"\7\1\2\u0478\u0479\7$\2\2\u0479\u047a\7<\2\2\u047a\u047b")
        buf.write(u"\7\f\2\2\u047b\u047c\7\u0082\2\2\u047c\u04c9\b\7\1\2")
        buf.write(u"\u047d\u047e\7$\2\2\u047e\u047f\7\64\2\2\u047f\u0480")
        buf.write(u"\7\u0081\2\2\u0480\u0481\5B\"\2\u0481\u0482\7\13\2\2")
        buf.write(u"\u0482\u0483\b\7\1\2\u0483\u04c9\3\2\2\2\u0484\u0485")
        buf.write(u"\7$\2\2\u0485\u0486\7\66\2\2\u0486\u0487\5B\"\2\u0487")
        buf.write(u"\u0488\7\13\2\2\u0488\u0489\7\u0081\2\2\u0489\u048a\b")
        buf.write(u"\7\1\2\u048a\u04c9\3\2\2\2\u048b\u048c\7$\2\2\u048c\u048d")
        buf.write(u"\7\66\2\2\u048d\u048e\5B\"\2\u048e\u048f\7\u0081\2\2")
        buf.write(u"\u048f\u0490\7\13\2\2\u0490\u0491\b\7\1\2\u0491\u04c9")
        buf.write(u"\3\2\2\2\u0492\u0493\7$\2\2\u0493\u0494\7\66\2\2\u0494")
        buf.write(u"\u0495\5B\"\2\u0495\u0496\7b\2\2\u0496\u0497\7\13\2\2")
        buf.write(u"\u0497\u0498\b\7\1\2\u0498\u04c9\3\2\2\2\u0499\u049a")
        buf.write(u"\7$\2\2\u049a\u049b\7\66\2\2\u049b\u049c\5B\"\2\u049c")
        buf.write(u"\u049d\7\13\2\2\u049d\u049e\7b\2\2\u049e\u049f\b\7\1")
        buf.write(u"\2\u049f\u04c9\3\2\2\2\u04a0\u04a1\7V\2\2\u04a1\u04a2")
        buf.write(u"\7\22\2\2\u04a2\u04a3\7\26\2\2\u04a3\u04a4\7\u0081\2")
        buf.write(u"\2\u04a4\u04a5\5B\"\2\u04a5\u04a6\7\13\2\2\u04a6\u04a7")
        buf.write(u"\b\7\1\2\u04a7\u04c9\3\2\2\2\u04a8\u04a9\7V\2\2\u04a9")
        buf.write(u"\u04aa\7\22\2\2\u04aa\u04ab\7\27\2\2\u04ab\u04ac\5B\"")
        buf.write(u"\2\u04ac\u04ad\7\13\2\2\u04ad\u04ae\7\u0081\2\2\u04ae")
        buf.write(u"\u04af\b\7\1\2\u04af\u04c9\3\2\2\2\u04b0\u04b1\7V\2\2")
        buf.write(u"\u04b1\u04b2\7\22\2\2\u04b2\u04b3\7\27\2\2\u04b3\u04b4")
        buf.write(u"\5B\"\2\u04b4\u04b5\7\u0081\2\2\u04b5\u04b6\7\13\2\2")
        buf.write(u"\u04b6\u04b7\b\7\1\2\u04b7\u04c9\3\2\2\2\u04b8\u04b9")
        buf.write(u"\7V\2\2\u04b9\u04ba\7\22\2\2\u04ba\u04bb\7\27\2\2\u04bb")
        buf.write(u"\u04bc\5B\"\2\u04bc\u04bd\7b\2\2\u04bd\u04be\7\13\2\2")
        buf.write(u"\u04be\u04bf\b\7\1\2\u04bf\u04c9\3\2\2\2\u04c0\u04c1")
        buf.write(u"\7V\2\2\u04c1\u04c2\7\22\2\2\u04c2\u04c3\7\27\2\2\u04c3")
        buf.write(u"\u04c4\5B\"\2\u04c4\u04c5\7\13\2\2\u04c5\u04c6\7b\2\2")
        buf.write(u"\u04c6\u04c7\b\7\1\2\u04c7\u04c9\3\2\2\2\u04c8\u0411")
        buf.write(u"\3\2\2\2\u04c8\u0416\3\2\2\2\u04c8\u041b\3\2\2\2\u04c8")
        buf.write(u"\u0422\3\2\2\2\u04c8\u0429\3\2\2\2\u04c8\u0430\3\2\2")
        buf.write(u"\2\u04c8\u0436\3\2\2\2\u04c8\u043c\3\2\2\2\u04c8\u0444")
        buf.write(u"\3\2\2\2\u04c8\u044c\3\2\2\2\u04c8\u0454\3\2\2\2\u04c8")
        buf.write(u"\u0459\3\2\2\2\u04c8\u045e\3\2\2\2\u04c8\u0465\3\2\2")
        buf.write(u"\2\u04c8\u046c\3\2\2\2\u04c8\u0473\3\2\2\2\u04c8\u0478")
        buf.write(u"\3\2\2\2\u04c8\u047d\3\2\2\2\u04c8\u0484\3\2\2\2\u04c8")
        buf.write(u"\u048b\3\2\2\2\u04c8\u0492\3\2\2\2\u04c8\u0499\3\2\2")
        buf.write(u"\2\u04c8\u04a0\3\2\2\2\u04c8\u04a8\3\2\2\2\u04c8\u04b0")
        buf.write(u"\3\2\2\2\u04c8\u04b8\3\2\2\2\u04c8\u04c0\3\2\2\2\u04c9")
        buf.write(u"\r\3\2\2\2\u04ca\u04cb\7[\2\2\u04cb\u0518\b\b\1\2\u04cc")
        buf.write(u"\u04cd\7\36\2\2\u04cd\u0518\b\b\1\2\u04ce\u04cf\7>\2")
        buf.write(u"\2\u04cf\u0518\b\b\1\2\u04d0\u04d1\7\u009b\2\2\u04d1")
        buf.write(u"\u04d2\7\61\2\2\u04d2\u04d3\7\24\2\2\u04d3\u04d4\7]\2")
        buf.write(u"\2\u04d4\u0518\b\b\1\2\u04d5\u04d6\7\u009b\2\2\u04d6")
        buf.write(u"\u04d7\7\61\2\2\u04d7\u04d8\7\24\2\2\u04d8\u04d9\7\5")
        buf.write(u"\2\2\u04d9\u0518\b\b\1\2\u04da\u04db\7\65\2\2\u04db\u0518")
        buf.write(u"\b\b\1\2\u04dc\u04dd\7\u009b\2\2\u04dd\u04de\7\61\2\2")
        buf.write(u"\u04de\u04df\7)\2\2\u04df\u0518\b\b\1\2\u04e0\u04e1\7")
        buf.write(u"!\2\2\u04e1\u04e2\7\36\2\2\u04e2\u0518\b\b\1\2\u04e3")
        buf.write(u"\u04e4\7\"\2\2\u04e4\u0518\b\b\1\2\u04e5\u04e6\7=\2\2")
        buf.write(u"\u04e6\u0518\b\b\1\2\u04e7\u04e8\7\67\2\2\u04e8\u0518")
        buf.write(u"\b\b\1\2\u04e9\u04ea\5B\"\2\u04ea\u04eb\7\60\2\2\u04eb")
        buf.write(u"\u04ec\7\24\2\2\u04ec\u04ed\7\5\2\2\u04ed\u04ee\b\b\1")
        buf.write(u"\2\u04ee\u0518\3\2\2\2\u04ef\u04f0\5B\"\2\u04f0\u04f1")
        buf.write(u"\7\60\2\2\u04f1\u04f2\7\24\2\2\u04f2\u04f3\7]\2\2\u04f3")
        buf.write(u"\u04f4\b\b\1\2\u04f4\u0518\3\2\2\2\u04f5\u04f6\5B\"\2")
        buf.write(u"\u04f6\u04f7\7\60\2\2\u04f7\u04f8\7!\2\2\u04f8\u04f9")
        buf.write(u"\b\b\1\2\u04f9\u0518\3\2\2\2\u04fa\u04fb\7\'\2\2\u04fb")
        buf.write(u"\u04fc\5B\"\2\u04fc\u04fd\7\60\2\2\u04fd\u04fe\b\b\1")
        buf.write(u"\2\u04fe\u0518\3\2\2\2\u04ff\u0500\7!\2\2\u0500\u0501")
        buf.write(u"\5B\"\2\u0501\u0502\7\60\2\2\u0502\u0503\b\b\1\2\u0503")
        buf.write(u"\u0518\3\2\2\2\u0504\u0505\7-\2\2\u0505\u0506\5B\"\2")
        buf.write(u"\u0506\u0507\7\60\2\2\u0507\u0508\b\b\1\2\u0508\u0518")
        buf.write(u"\3\2\2\2\u0509\u050a\5B\"\2\u050a\u050b\7\60\2\2\u050b")
        buf.write(u"\u050c\7)\2\2\u050c\u050d\b\b\1\2\u050d\u0518\3\2\2\2")
        buf.write(u"\u050e\u050f\5B\"\2\u050f\u0510\7\60\2\2\u0510\u0511")
        buf.write(u"\7i\2\2\u0511\u0512\b\b\1\2\u0512\u0518\3\2\2\2\u0513")
        buf.write(u"\u0514\7\u009b\2\2\u0514\u0515\7\61\2\2\u0515\u0516\7")
        buf.write(u"i\2\2\u0516\u0518\b\b\1\2\u0517\u04ca\3\2\2\2\u0517\u04cc")
        buf.write(u"\3\2\2\2\u0517\u04ce\3\2\2\2\u0517\u04d0\3\2\2\2\u0517")
        buf.write(u"\u04d5\3\2\2\2\u0517\u04da\3\2\2\2\u0517\u04dc\3\2\2")
        buf.write(u"\2\u0517\u04e0\3\2\2\2\u0517\u04e3\3\2\2\2\u0517\u04e5")
        buf.write(u"\3\2\2\2\u0517\u04e7\3\2\2\2\u0517\u04e9\3\2\2\2\u0517")
        buf.write(u"\u04ef\3\2\2\2\u0517\u04f5\3\2\2\2\u0517\u04fa\3\2\2")
        buf.write(u"\2\u0517\u04ff\3\2\2\2\u0517\u0504\3\2\2\2\u0517\u0509")
        buf.write(u"\3\2\2\2\u0517\u050e\3\2\2\2\u0517\u0513\3\2\2\2\u0518")
        buf.write(u"\17\3\2\2\2\u0519\u051a\7C\2\2\u051a\u0530\b\t\1\2\u051b")
        buf.write(u"\u051c\7E\2\2\u051c\u0530\b\t\1\2\u051d\u051e\7L\2\2")
        buf.write(u"\u051e\u0530\b\t\1\2\u051f\u0520\7\62\2\2\u0520\u0530")
        buf.write(u"\b\t\1\2\u0521\u0522\7\u009d\2\2\u0522\u0530\b\t\1\2")
        buf.write(u"\u0523\u0524\7|\2\2\u0524\u0530\b\t\1\2\u0525\u0526\7")
        buf.write(u"\37\2\2\u0526\u0530\b\t\1\2\u0527\u0528\7\u00a2\2\2\u0528")
        buf.write(u"\u0530\b\t\1\2\u0529\u052a\7\u00a1\2\2\u052a\u052b\7")
        buf.write(u"&\2\2\u052b\u0530\b\t\1\2\u052c\u052d\7,\2\2\u052d\u052e")
        buf.write(u"\7\u0089\2\2\u052e\u0530\b\t\1\2\u052f\u0519\3\2\2\2")
        buf.write(u"\u052f\u051b\3\2\2\2\u052f\u051d\3\2\2\2\u052f\u051f")
        buf.write(u"\3\2\2\2\u052f\u0521\3\2\2\2\u052f\u0523\3\2\2\2\u052f")
        buf.write(u"\u0525\3\2\2\2\u052f\u0527\3\2\2\2\u052f\u0529\3\2\2")
        buf.write(u"\2\u052f\u052c\3\2\2\2\u0530\21\3\2\2\2\u0531\u0532\7")
        buf.write(u"\n\2\2\u0532\u0581\b\n\1\2\u0533\u0534\7I\2\2\u0534\u0581")
        buf.write(u"\b\n\1\2\u0535\u0536\7G\2\2\u0536\u0581\b\n\1\2\u0537")
        buf.write(u"\u0538\7\34\2\2\u0538\u0539\7G\2\2\u0539\u0581\b\n\1")
        buf.write(u"\2\u053a\u053b\79\2\2\u053b\u053c\7H\2\2\u053c\u0581")
        buf.write(u"\b\n\1\2\u053d\u053e\7Q\2\2\u053e\u0581\b\n\1\2\u053f")
        buf.write(u"\u0540\7\4\2\2\u0540\u0541\7c\2\2\u0541\u0581\b\n\1\2")
        buf.write(u"\u0542\u0543\7\b\2\2\u0543\u0544\7]\2\2\u0544\u0545\7")
        buf.write(u"\34\2\2\u0545\u0546\7c\2\2\u0546\u0581\b\n\1\2\u0547")
        buf.write(u"\u0548\7!\2\2\u0548\u0549\7Q\2\2\u0549\u0581\b\n\1\2")
        buf.write(u"\u054a\u054b\7h\2\2\u054b\u0581\b\n\1\2\u054c\u054d\7")
        buf.write(u"V\2\2\u054d\u054e\7h\2\2\u054e\u0581\b\n\1\2\u054f\u0550")
        buf.write(u"\7!\2\2\u0550\u0551\7c\2\2\u0551\u0581\b\n\1\2\u0552")
        buf.write(u"\u0553\7\u0086\2\2\u0553\u0581\b\n\1\2\u0554\u0555\7")
        buf.write(u"\34\2\2\u0555\u0556\7\u0086\2\2\u0556\u0581\b\n\1\2\u0557")
        buf.write(u"\u0558\79\2\2\u0558\u0559\7\u0087\2\2\u0559\u0581\b\n")
        buf.write(u"\1\2\u055a\u055b\7\4\2\2\u055b\u055c\7\21\2\2\u055c\u0581")
        buf.write(u"\b\n\1\2\u055d\u055e\7\b\2\2\u055e\u055f\7]\2\2\u055f")
        buf.write(u"\u0560\7\34\2\2\u0560\u0561\7\21\2\2\u0561\u0581\b\n")
        buf.write(u"\1\2\u0562\u0563\7O\2\2\u0563\u0581\b\n\1\2\u0564\u0565")
        buf.write(u"\7X\2\2\u0565\u0581\b\n\1\2\u0566\u0567\7\34\2\2\u0567")
        buf.write(u"\u0568\7X\2\2\u0568\u0581\b\n\1\2\u0569\u056a\79\2\2")
        buf.write(u"\u056a\u056b\7W\2\2\u056b\u0581\b\n\1\2\u056c\u056d\7")
        buf.write(u"\5\2\2\u056d\u0581\b\n\1\2\u056e\u056f\7]\2\2\u056f\u0581")
        buf.write(u"\b\n\1\2\u0570\u0571\7w\2\2\u0571\u0572\7T\2\2\u0572")
        buf.write(u"\u0581\b\n\1\2\u0573\u0574\79\2\2\u0574\u0575\7w\2\2")
        buf.write(u"\u0575\u0576\7T\2\2\u0576\u0581\b\n\1\2\u0577\u0578\7")
        buf.write(u"\7\2\2\u0578\u0579\7T\2\2\u0579\u0581\b\n\1\2\u057a\u057b")
        buf.write(u"\7l\2\2\u057b\u057c\7\5\2\2\u057c\u0581\b\n\1\2\u057d")
        buf.write(u"\u057e\7l\2\2\u057e\u057f\7]\2\2\u057f\u0581\b\n\1\2")
        buf.write(u"\u0580\u0531\3\2\2\2\u0580\u0533\3\2\2\2\u0580\u0535")
        buf.write(u"\3\2\2\2\u0580\u0537\3\2\2\2\u0580\u053a\3\2\2\2\u0580")
        buf.write(u"\u053d\3\2\2\2\u0580\u053f\3\2\2\2\u0580\u0542\3\2\2")
        buf.write(u"\2\u0580\u0547\3\2\2\2\u0580\u054a\3\2\2\2\u0580\u054c")
        buf.write(u"\3\2\2\2\u0580\u054f\3\2\2\2\u0580\u0552\3\2\2\2\u0580")
        buf.write(u"\u0554\3\2\2\2\u0580\u0557\3\2\2\2\u0580\u055a\3\2\2")
        buf.write(u"\2\u0580\u055d\3\2\2\2\u0580\u0562\3\2\2\2\u0580\u0564")
        buf.write(u"\3\2\2\2\u0580\u0566\3\2\2\2\u0580\u0569\3\2\2\2\u0580")
        buf.write(u"\u056c\3\2\2\2\u0580\u056e\3\2\2\2\u0580\u0570\3\2\2")
        buf.write(u"\2\u0580\u0573\3\2\2\2\u0580\u0577\3\2\2\2\u0580\u057a")
        buf.write(u"\3\2\2\2\u0580\u057d\3\2\2\2\u0581\23\3\2\2\2\u0582\u0583")
        buf.write(u"\7w\2\2\u0583\u0584\7M\2\2\u0584\u05c2\b\13\1\2\u0585")
        buf.write(u"\u0586\7M\2\2\u0586\u0587\7\u0082\2\2\u0587\u05c2\b\13")
        buf.write(u"\1\2\u0588\u0589\7\u0082\2\2\u0589\u058a\7M\2\2\u058a")
        buf.write(u"\u05c2\b\13\1\2\u058b\u058c\7\u009b\2\2\u058c\u058d\7")
        buf.write(u"M\2\2\u058d\u058e\7)\2\2\u058e\u05c2\b\13\1\2\u058f\u0590")
        buf.write(u"\7\u009b\2\2\u0590\u0591\7M\2\2\u0591\u0592\7i\2\2\u0592")
        buf.write(u"\u05c2\b\13\1\2\u0593\u0594\7M\2\2\u0594\u0595\7p\2\2")
        buf.write(u"\u0595\u05c2\b\13\1\2\u0596\u0597\7p\2\2\u0597\u0598")
        buf.write(u"\7M\2\2\u0598\u05c2\b\13\1\2\u0599\u059a\7M\2\2\u059a")
        buf.write(u"\u059b\7\u009f\2\2\u059b\u05c2\b\13\1\2\u059c\u059d\7")
        buf.write(u"-\2\2\u059d\u059e\7\u009b\2\2\u059e\u059f\7M\2\2\u059f")
        buf.write(u"\u05c2\b\13\1\2\u05a0\u05a1\7!\2\2\u05a1\u05a2\7\u009b")
        buf.write(u"\2\2\u05a2\u05a3\7M\2\2\u05a3\u05c2\b\13\1\2\u05a4\u05a5")
        buf.write(u"\7\u009b\2\2\u05a5\u05a6\7M\2\2\u05a6\u05a7\7!\2\2\u05a7")
        buf.write(u"\u05c2\b\13\1\2\u05a8\u05a9\7-\2\2\u05a9\u05aa\5B\"\2")
        buf.write(u"\u05aa\u05ab\7N\2\2\u05ab\u05ac\b\13\1\2\u05ac\u05c2")
        buf.write(u"\3\2\2\2\u05ad\u05ae\7!\2\2\u05ae\u05af\5B\"\2\u05af")
        buf.write(u"\u05b0\7N\2\2\u05b0\u05b1\b\13\1\2\u05b1\u05c2\3\2\2")
        buf.write(u"\2\u05b2\u05b3\5B\"\2\u05b3\u05b4\7N\2\2\u05b4\u05b5")
        buf.write(u"\7!\2\2\u05b5\u05b6\b\13\1\2\u05b6\u05c2\3\2\2\2\u05b7")
        buf.write(u"\u05b8\5B\"\2\u05b8\u05b9\7N\2\2\u05b9\u05ba\7)\2\2\u05ba")
        buf.write(u"\u05bb\b\13\1\2\u05bb\u05c2\3\2\2\2\u05bc\u05bd\5B\"")
        buf.write(u"\2\u05bd\u05be\7N\2\2\u05be\u05bf\7i\2\2\u05bf\u05c0")
        buf.write(u"\b\13\1\2\u05c0\u05c2\3\2\2\2\u05c1\u0582\3\2\2\2\u05c1")
        buf.write(u"\u0585\3\2\2\2\u05c1\u0588\3\2\2\2\u05c1\u058b\3\2\2")
        buf.write(u"\2\u05c1\u058f\3\2\2\2\u05c1\u0593\3\2\2\2\u05c1\u0596")
        buf.write(u"\3\2\2\2\u05c1\u0599\3\2\2\2\u05c1\u059c\3\2\2\2\u05c1")
        buf.write(u"\u05a0\3\2\2\2\u05c1\u05a4\3\2\2\2\u05c1\u05a8\3\2\2")
        buf.write(u"\2\u05c1\u05ad\3\2\2\2\u05c1\u05b2\3\2\2\2\u05c1\u05b7")
        buf.write(u"\3\2\2\2\u05c1\u05bc\3\2\2\2\u05c2\25\3\2\2\2\u05c3\u05c4")
        buf.write(u"\7u\2\2\u05c4\u05c5\7\f\2\2\u05c5\u0600\b\f\1\2\u05c6")
        buf.write(u"\u05c7\7\f\2\2\u05c7\u05c8\7\u0082\2\2\u05c8\u0600\b")
        buf.write(u"\f\1\2\u05c9\u05ca\7\u0082\2\2\u05ca\u05cb\7\f\2\2\u05cb")
        buf.write(u"\u0600\b\f\1\2\u05cc\u05cd\7\u009b\2\2\u05cd\u05ce\7")
        buf.write(u"\f\2\2\u05ce\u05cf\7)\2\2\u05cf\u0600\b\f\1\2\u05d0\u05d1")
        buf.write(u"\7\u009b\2\2\u05d1\u05d2\7\f\2\2\u05d2\u05d3\7i\2\2\u05d3")
        buf.write(u"\u0600\b\f\1\2\u05d4\u05d5\7\f\2\2\u05d5\u05d6\7p\2\2")
        buf.write(u"\u05d6\u0600\b\f\1\2\u05d7\u05d8\7\f\2\2\u05d8\u05d9")
        buf.write(u"\7\u009f\2\2\u05d9\u0600\b\f\1\2\u05da\u05db\7-\2\2\u05db")
        buf.write(u"\u05dc\7\u009b\2\2\u05dc\u05dd\7\f\2\2\u05dd\u0600\b")
        buf.write(u"\f\1\2\u05de\u05df\7!\2\2\u05df\u05e0\7\u009b\2\2\u05e0")
        buf.write(u"\u05e1\7\f\2\2\u05e1\u0600\b\f\1\2\u05e2\u05e3\7\u009b")
        buf.write(u"\2\2\u05e3\u05e4\7\f\2\2\u05e4\u05e5\7!\2\2\u05e5\u0600")
        buf.write(u"\b\f\1\2\u05e6\u05e7\7-\2\2\u05e7\u05e8\5B\"\2\u05e8")
        buf.write(u"\u05e9\7\13\2\2\u05e9\u05ea\b\f\1\2\u05ea\u0600\3\2\2")
        buf.write(u"\2\u05eb\u05ec\7!\2\2\u05ec\u05ed\5B\"\2\u05ed\u05ee")
        buf.write(u"\7\13\2\2\u05ee\u05ef\b\f\1\2\u05ef\u0600\3\2\2\2\u05f0")
        buf.write(u"\u05f1\5B\"\2\u05f1\u05f2\7\13\2\2\u05f2\u05f3\7!\2\2")
        buf.write(u"\u05f3\u05f4\b\f\1\2\u05f4\u0600\3\2\2\2\u05f5\u05f6")
        buf.write(u"\5B\"\2\u05f6\u05f7\7\13\2\2\u05f7\u05f8\7)\2\2\u05f8")
        buf.write(u"\u05f9\b\f\1\2\u05f9\u0600\3\2\2\2\u05fa\u05fb\5B\"\2")
        buf.write(u"\u05fb\u05fc\7\13\2\2\u05fc\u05fd\7i\2\2\u05fd\u05fe")
        buf.write(u"\b\f\1\2\u05fe\u0600\3\2\2\2\u05ff\u05c3\3\2\2\2\u05ff")
        buf.write(u"\u05c6\3\2\2\2\u05ff\u05c9\3\2\2\2\u05ff\u05cc\3\2\2")
        buf.write(u"\2\u05ff\u05d0\3\2\2\2\u05ff\u05d4\3\2\2\2\u05ff\u05d7")
        buf.write(u"\3\2\2\2\u05ff\u05da\3\2\2\2\u05ff\u05de\3\2\2\2\u05ff")
        buf.write(u"\u05e2\3\2\2\2\u05ff\u05e6\3\2\2\2\u05ff\u05eb\3\2\2")
        buf.write(u"\2\u05ff\u05f0\3\2\2\2\u05ff\u05f5\3\2\2\2\u05ff\u05fa")
        buf.write(u"\3\2\2\2\u0600\27\3\2\2\2\u0601\u0602\7i\2\2\u0602\u0603")
        buf.write(u"\7\u0089\2\2\u0603\u0615\b\r\1\2\u0604\u0605\7\u0083")
        buf.write(u"\2\2\u0605\u0606\7\u0089\2\2\u0606\u0615\b\r\1\2\u0607")
        buf.write(u"\u0608\7\u0091\2\2\u0608\u0609\7\u0089\2\2\u0609\u0615")
        buf.write(u"\b\r\1\2\u060a\u060b\7q\2\2\u060b\u060c\7\u0089\2\2\u060c")
        buf.write(u"\u0615\b\r\1\2\u060d\u060e\7y\2\2\u060e\u060f\7\u0089")
        buf.write(u"\2\2\u060f\u0615\b\r\1\2\u0610\u0611\7\u0089\2\2\u0611")
        buf.write(u"\u0612\5B\"\2\u0612\u0613\b\r\1\2\u0613\u0615\3\2\2\2")
        buf.write(u"\u0614\u0601\3\2\2\2\u0614\u0604\3\2\2\2\u0614\u0607")
        buf.write(u"\3\2\2\2\u0614\u060a\3\2\2\2\u0614\u060d\3\2\2\2\u0614")
        buf.write(u"\u0610\3\2\2\2\u0615\31\3\2\2\2\u0616\u0617\7v\2\2\u0617")
        buf.write(u"\u0618\7\u0089\2\2\u0618\u066a\b\16\1\2\u0619\u061a\7")
        buf.write(u"9\2\2\u061a\u061b\7\u0089\2\2\u061b\u066a\b\16\1\2\u061c")
        buf.write(u"\u061d\7\u0089\2\2\u061d\u061e\7\177\2\2\u061e\u066a")
        buf.write(u"\b\16\1\2\u061f\u0620\7\177\2\2\u0620\u0621\7\u0089\2")
        buf.write(u"\2\u0621\u066a\b\16\1\2\u0622\u0623\7\u009c\2\2\u0623")
        buf.write(u"\u0624\7\u0089\2\2\u0624\u0625\7)\2\2\u0625\u066a\b\16")
        buf.write(u"\1\2\u0626\u0627\7\u009c\2\2\u0627\u0628\7\u0089\2\2")
        buf.write(u"\u0628\u0629\7i\2\2\u0629\u066a\b\16\1\2\u062a\u062b")
        buf.write(u"\7\u0089\2\2\u062b\u062c\7m\2\2\u062c\u066a\b\16\1\2")
        buf.write(u"\u062d\u062e\7\u0089\2\2\u062e\u062f\7\u009e\2\2\u062f")
        buf.write(u"\u066a\b\16\1\2\u0630\u0631\7m\2\2\u0631\u0632\7\u0089")
        buf.write(u"\2\2\u0632\u066a\b\16\1\2\u0633\u0634\7-\2\2\u0634\u0635")
        buf.write(u"\7\u009c\2\2\u0635\u0636\7\u0089\2\2\u0636\u066a\b\16")
        buf.write(u"\1\2\u0637\u0638\7!\2\2\u0638\u0639\7\u009c\2\2\u0639")
        buf.write(u"\u063a\7\u0089\2\2\u063a\u066a\b\16\1\2\u063b\u063c\7")
        buf.write(u"\u009c\2\2\u063c\u063d\7\u0089\2\2\u063d\u063e\7!\2\2")
        buf.write(u"\u063e\u066a\b\16\1\2\u063f\u0640\7-\2\2\u0640\u0641")
        buf.write(u"\5B\"\2\u0641\u0642\7\u008b\2\2\u0642\u0643\b\16\1\2")
        buf.write(u"\u0643\u066a\3\2\2\2\u0644\u0645\7!\2\2\u0645\u0646\5")
        buf.write(u"B\"\2\u0646\u0647\7\u008b\2\2\u0647\u0648\b\16\1\2\u0648")
        buf.write(u"\u066a\3\2\2\2\u0649\u064a\7\'\2\2\u064a\u064b\5B\"\2")
        buf.write(u"\u064b\u064c\7\u008b\2\2\u064c\u064d\b\16\1\2\u064d\u066a")
        buf.write(u"\3\2\2\2\u064e\u064f\5B\"\2\u064f\u0650\7\u008b\2\2\u0650")
        buf.write(u"\u0651\7!\2\2\u0651\u0652\b\16\1\2\u0652\u066a\3\2\2")
        buf.write(u"\2\u0653\u0654\5B\"\2\u0654\u0655\7\u008b\2\2\u0655\u0656")
        buf.write(u"\7\24\2\2\u0656\u0657\7\5\2\2\u0657\u0658\b\16\1\2\u0658")
        buf.write(u"\u066a\3\2\2\2\u0659\u065a\5B\"\2\u065a\u065b\7\u008b")
        buf.write(u"\2\2\u065b\u065c\7\24\2\2\u065c\u065d\7]\2\2\u065d\u065e")
        buf.write(u"\b\16\1\2\u065e\u066a\3\2\2\2\u065f\u0660\5B\"\2\u0660")
        buf.write(u"\u0661\7\u008b\2\2\u0661\u0662\7)\2\2\u0662\u0663\b\16")
        buf.write(u"\1\2\u0663\u066a\3\2\2\2\u0664\u0665\5B\"\2\u0665\u0666")
        buf.write(u"\7\u008b\2\2\u0666\u0667\7i\2\2\u0667\u0668\b\16\1\2")
        buf.write(u"\u0668\u066a\3\2\2\2\u0669\u0616\3\2\2\2\u0669\u0619")
        buf.write(u"\3\2\2\2\u0669\u061c\3\2\2\2\u0669\u061f\3\2\2\2\u0669")
        buf.write(u"\u0622\3\2\2\2\u0669\u0626\3\2\2\2\u0669\u062a\3\2\2")
        buf.write(u"\2\u0669\u062d\3\2\2\2\u0669\u0630\3\2\2\2\u0669\u0633")
        buf.write(u"\3\2\2\2\u0669\u0637\3\2\2\2\u0669\u063b\3\2\2\2\u0669")
        buf.write(u"\u063f\3\2\2\2\u0669\u0644\3\2\2\2\u0669\u0649\3\2\2")
        buf.write(u"\2\u0669\u064e\3\2\2\2\u0669\u0653\3\2\2\2\u0669\u0659")
        buf.write(u"\3\2\2\2\u0669\u065f\3\2\2\2\u0669\u0664\3\2\2\2\u066a")
        buf.write(u"\33\3\2\2\2\u066b\u066c\7\u00a7\2\2\u066c\u06f3\b\17")
        buf.write(u"\1\2\u066d\u066e\7V\2\2\u066e\u066f\7\u00a7\2\2\u066f")
        buf.write(u"\u06f3\b\17\1\2\u0670\u0671\7u\2\2\u0671\u0672\7\f\2")
        buf.write(u"\2\u0672\u06f3\b\17\1\2\u0673\u0674\7\f\2\2\u0674\u0675")
        buf.write(u"\7\u00a7\2\2\u0675\u06f3\b\17\1\2\u0676\u0677\7\f\2\2")
        buf.write(u"\u0677\u0678\7\u00a6\2\2\u0678\u06f3\b\17\1\2\u0679\u067a")
        buf.write(u"\7\f\2\2\u067a\u067b\5D#\2\u067b\u067c\b\17\1\2\u067c")
        buf.write(u"\u06f3\3\2\2\2\u067d\u067e\7!\2\2\u067e\u067f\78\2\2")
        buf.write(u"\u067f\u0680\7\u00a7\2\2\u0680\u06f3\b\17\1\2\u0681\u0682")
        buf.write(u"\7i\2\2\u0682\u0683\7\30\2\2\u0683\u0684\7\u00a7\2\2")
        buf.write(u"\u0684\u06f3\b\17\1\2\u0685\u0686\7!\2\2\u0686\u0687")
        buf.write(u"\7<\2\2\u0687\u0688\7\f\2\2\u0688\u0689\7\u00a7\2\2\u0689")
        buf.write(u"\u06f3\b\17\1\2\u068a\u068b\7i\2\2\u068b\u068c\7\31\2")
        buf.write(u"\2\u068c\u068d\7\f\2\2\u068d\u068e\7\u00a7\2\2\u068e")
        buf.write(u"\u06f3\b\17\1\2\u068f\u0690\7\f\2\2\u0690\u0691\7\u0082")
        buf.write(u"\2\2\u0691\u06f3\b\17\1\2\u0692\u0693\7\u0082\2\2\u0693")
        buf.write(u"\u0694\7\f\2\2\u0694\u06f3\b\17\1\2\u0695\u0696\7\f\2")
        buf.write(u"\2\u0696\u0697\7d\2\2\u0697\u06f3\b\17\1\2\u0698\u0699")
        buf.write(u"\7\u009b\2\2\u0699\u069a\7\f\2\2\u069a\u069b\7i\2\2\u069b")
        buf.write(u"\u06f3\b\17\1\2\u069c\u069d\7\u009b\2\2\u069d\u069e\7")
        buf.write(u"\f\2\2\u069e\u069f\7)\2\2\u069f\u06f3\b\17\1\2\u06a0")
        buf.write(u"\u06a1\7\f\2\2\u06a1\u06a2\7p\2\2\u06a2\u06f3\b\17\1")
        buf.write(u"\2\u06a3\u06a4\7p\2\2\u06a4\u06a5\7\f\2\2\u06a5\u06f3")
        buf.write(u"\b\17\1\2\u06a6\u06a7\7\f\2\2\u06a7\u06a8\7\u009f\2\2")
        buf.write(u"\u06a8\u06f3\b\17\1\2\u06a9\u06aa\7\u009b\2\2\u06aa\u06ab")
        buf.write(u"\7\f\2\2\u06ab\u06ac\7\24\2\2\u06ac\u06ad\7\5\2\2\u06ad")
        buf.write(u"\u06f3\b\17\1\2\u06ae\u06af\7\u009b\2\2\u06af\u06b0\7")
        buf.write(u"\f\2\2\u06b0\u06b1\7\24\2\2\u06b1\u06b2\7]\2\2\u06b2")
        buf.write(u"\u06f3\b\17\1\2\u06b3\u06b4\7!\2\2\u06b4\u06b5\7\u009b")
        buf.write(u"\2\2\u06b5\u06b6\7\f\2\2\u06b6\u06f3\b\17\1\2\u06b7\u06b8")
        buf.write(u"\7-\2\2\u06b8\u06b9\7\u009b\2\2\u06b9\u06ba\7\f\2\2\u06ba")
        buf.write(u"\u06f3\b\17\1\2\u06bb\u06bc\7!\2\2\u06bc\u06bd\78\2\2")
        buf.write(u"\u06bd\u06be\7\u00a7\2\2\u06be\u06f3\b\17\1\2\u06bf\u06c0")
        buf.write(u"\7i\2\2\u06c0\u06c1\7\30\2\2\u06c1\u06c2\7\u00a7\2\2")
        buf.write(u"\u06c2\u06f3\b\17\1\2\u06c3\u06c4\7\13\2\2\u06c4\u06c5")
        buf.write(u"\5B\"\2\u06c5\u06c6\b\17\1\2\u06c6\u06f3\3\2\2\2\u06c7")
        buf.write(u"\u06c8\5B\"\2\u06c8\u06c9\7\13\2\2\u06c9\u06ca\7\24\2")
        buf.write(u"\2\u06ca\u06cb\7\5\2\2\u06cb\u06cc\b\17\1\2\u06cc\u06f3")
        buf.write(u"\3\2\2\2\u06cd\u06ce\5B\"\2\u06ce\u06cf\7\13\2\2\u06cf")
        buf.write(u"\u06d0\7\24\2\2\u06d0\u06d1\7]\2\2\u06d1\u06d2\b\17\1")
        buf.write(u"\2\u06d2\u06f3\3\2\2\2\u06d3\u06d4\5B\"\2\u06d4\u06d5")
        buf.write(u"\7\13\2\2\u06d5\u06d6\7!\2\2\u06d6\u06d7\b\17\1\2\u06d7")
        buf.write(u"\u06f3\3\2\2\2\u06d8\u06d9\7!\2\2\u06d9\u06da\5B\"\2")
        buf.write(u"\u06da\u06db\7\13\2\2\u06db\u06dc\b\17\1\2\u06dc\u06f3")
        buf.write(u"\3\2\2\2\u06dd\u06de\7-\2\2\u06de\u06df\5B\"\2\u06df")
        buf.write(u"\u06e0\7\13\2\2\u06e0\u06e1\b\17\1\2\u06e1\u06f3\3\2")
        buf.write(u"\2\2\u06e2\u06e3\5B\"\2\u06e3\u06e4\7\13\2\2\u06e4\u06e5")
        buf.write(u"\7)\2\2\u06e5\u06e6\b\17\1\2\u06e6\u06f3\3\2\2\2\u06e7")
        buf.write(u"\u06e8\5B\"\2\u06e8\u06e9\7\13\2\2\u06e9\u06ea\7i\2\2")
        buf.write(u"\u06ea\u06eb\b\17\1\2\u06eb\u06f3\3\2\2\2\u06ec\u06ed")
        buf.write(u"\7\13\2\2\u06ed\u06ee\7\u00a7\2\2\u06ee\u06f3\b\17\1")
        buf.write(u"\2\u06ef\u06f0\7\13\2\2\u06f0\u06f1\7\u00a6\2\2\u06f1")
        buf.write(u"\u06f3\b\17\1\2\u06f2\u066b\3\2\2\2\u06f2\u066d\3\2\2")
        buf.write(u"\2\u06f2\u0670\3\2\2\2\u06f2\u0673\3\2\2\2\u06f2\u0676")
        buf.write(u"\3\2\2\2\u06f2\u0679\3\2\2\2\u06f2\u067d\3\2\2\2\u06f2")
        buf.write(u"\u0681\3\2\2\2\u06f2\u0685\3\2\2\2\u06f2\u068a\3\2\2")
        buf.write(u"\2\u06f2\u068f\3\2\2\2\u06f2\u0692\3\2\2\2\u06f2\u0695")
        buf.write(u"\3\2\2\2\u06f2\u0698\3\2\2\2\u06f2\u069c\3\2\2\2\u06f2")
        buf.write(u"\u06a0\3\2\2\2\u06f2\u06a3\3\2\2\2\u06f2\u06a6\3\2\2")
        buf.write(u"\2\u06f2\u06a9\3\2\2\2\u06f2\u06ae\3\2\2\2\u06f2\u06b3")
        buf.write(u"\3\2\2\2\u06f2\u06b7\3\2\2\2\u06f2\u06bb\3\2\2\2\u06f2")
        buf.write(u"\u06bf\3\2\2\2\u06f2\u06c3\3\2\2\2\u06f2\u06c7\3\2\2")
        buf.write(u"\2\u06f2\u06cd\3\2\2\2\u06f2\u06d3\3\2\2\2\u06f2\u06d8")
        buf.write(u"\3\2\2\2\u06f2\u06dd\3\2\2\2\u06f2\u06e2\3\2\2\2\u06f2")
        buf.write(u"\u06e7\3\2\2\2\u06f2\u06ec\3\2\2\2\u06f2\u06ef\3\2\2")
        buf.write(u"\2\u06f3\35\3\2\2\2\u06f4\u06f5\7\\\2\2\u06f5\u06f6\7")
        buf.write(u"\61\2\2\u06f6\u0745\b\20\1\2\u06f7\u06f8\7{\2\2\u06f8")
        buf.write(u"\u0745\b\20\1\2\u06f9\u06fa\7\u0097\2\2\u06fa\u06fb\7")
        buf.write(u"\66\2\2\u06fb\u06fc\7\60\2\2\u06fc\u0745\b\20\1\2\u06fd")
        buf.write(u"\u06fe\7/\2\2\u06fe\u0745\b\20\1\2\u06ff\u0700\7\61\2")
        buf.write(u"\2\u0700\u0701\7!\2\2\u0701\u0702\7\61\2\2\u0702\u0745")
        buf.write(u"\b\20\1\2\u0703\u0704\7\\\2\2\u0704\u0705\7\u0089\2\2")
        buf.write(u"\u0705\u0745\b\20\1\2\u0706\u0707\7\u008a\2\2\u0707\u0745")
        buf.write(u"\b\20\1\2\u0708\u0709\7\u0096\2\2\u0709\u070a\7@\2\2")
        buf.write(u"\u070a\u070b\7\u008b\2\2\u070b\u0745\b\20\1\2\u070c\u070d")
        buf.write(u"\7\u0089\2\2\u070d\u070e\7!\2\2\u070e\u070f\7\u0089\2")
        buf.write(u"\2\u070f\u0745\b\20\1\2\u0710\u0711\7\20\2\2\u0711\u0745")
        buf.write(u"\b\20\1\2\u0712\u0713\7\\\2\2\u0713\u0714\7#\2\2\u0714")
        buf.write(u"\u0715\7\u008b\2\2\u0715\u0745\b\20\1\2\u0716\u0717\7")
        buf.write(u"#\2\2\u0717\u0718\7\u00a0\2\2\u0718\u0719\7\7\2\2\u0719")
        buf.write(u"\u071a\7M\2\2\u071a\u0745\b\20\1\2\u071b\u071c\7\\\2")
        buf.write(u"\2\u071c\u071d\7M\2\2\u071d\u0745\b\20\1\2\u071e\u071f")
        buf.write(u"\7K\2\2\u071f\u0745\b\20\1\2\u0720\u0721\7\u0097\2\2")
        buf.write(u"\u0721\u0722\7\66\2\2\u0722\u0723\7N\2\2\u0723\u0745")
        buf.write(u"\b\20\1\2\u0724\u0725\7M\2\2\u0725\u0726\7!\2\2\u0726")
        buf.write(u"\u0727\7M\2\2\u0727\u0745\b\20\1\2\u0728\u0729\7\\\2")
        buf.write(u"\2\u0729\u072a\7\u0093\2\2\u072a\u072b\7N\2\2\u072b\u0745")
        buf.write(u"\b\20\1\2\u072c\u072d\7\u0095\2\2\u072d\u0745\b\20\1")
        buf.write(u"\2\u072e\u072f\7t\2\2\u072f\u0730\7\u00a0\2\2\u0730\u0731")
        buf.write(u"\7\b\2\2\u0731\u0732\7\f\2\2\u0732\u0745\b\20\1\2\u0733")
        buf.write(u"\u0734\7t\2\2\u0734\u0735\7\u00a0\2\2\u0735\u0736\7<")
        buf.write(u"\2\2\u0736\u0737\7\f\2\2\u0737\u0745\b\20\1\2\u0738\u0739")
        buf.write(u"\7\\\2\2\u0739\u073a\7\u0094\2\2\u073a\u0745\b\20\1\2")
        buf.write(u"\u073b\u073c\7\\\2\2\u073c\u073d\7\f\2\2\u073d\u0745")
        buf.write(u"\b\20\1\2\u073e\u073f\7\u0097\2\2\u073f\u0740\7\64\2")
        buf.write(u"\2\u0740\u0741\7\13\2\2\u0741\u0745\b\20\1\2\u0742\u0743")
        buf.write(u"\7\r\2\2\u0743\u0745\b\20\1\2\u0744\u06f4\3\2\2\2\u0744")
        buf.write(u"\u06f7\3\2\2\2\u0744\u06f9\3\2\2\2\u0744\u06fd\3\2\2")
        buf.write(u"\2\u0744\u06ff\3\2\2\2\u0744\u0703\3\2\2\2\u0744\u0706")
        buf.write(u"\3\2\2\2\u0744\u0708\3\2\2\2\u0744\u070c\3\2\2\2\u0744")
        buf.write(u"\u0710\3\2\2\2\u0744\u0712\3\2\2\2\u0744\u0716\3\2\2")
        buf.write(u"\2\u0744\u071b\3\2\2\2\u0744\u071e\3\2\2\2\u0744\u0720")
        buf.write(u"\3\2\2\2\u0744\u0724\3\2\2\2\u0744\u0728\3\2\2\2\u0744")
        buf.write(u"\u072c\3\2\2\2\u0744\u072e\3\2\2\2\u0744\u0733\3\2\2")
        buf.write(u"\2\u0744\u0738\3\2\2\2\u0744\u073b\3\2\2\2\u0744\u073e")
        buf.write(u"\3\2\2\2\u0744\u0742\3\2\2\2\u0745\37\3\2\2\2\u0746\u0747")
        buf.write(u"\5\60\31\2\u0747\u0748\5\62\32\2\u0748\u0749\5\"\22\2")
        buf.write(u"\u0749\u074a\b\21\1\2\u074a!\3\2\2\2\u074b\u074c\5B\"")
        buf.write(u"\2\u074c\u074d\7:\2\2\u074d\u074e\b\22\1\2\u074e\u0794")
        buf.write(u"\3\2\2\2\u074f\u0750\5B\"\2\u0750\u0751\5B\"\2\u0751")
        buf.write(u"\u0752\b\22\1\2\u0752\u0794\3\2\2\2\u0753\u0754\5B\"")
        buf.write(u"\2\u0754\u0755\7\3\2\2\u0755\u0756\5B\"\2\u0756\u0757")
        buf.write(u"\b\22\1\2\u0757\u0794\3\2\2\2\u0758\u0759\5B\"\2\u0759")
        buf.write(u"\u075a\7%\2\2\u075a\u075b\5B\"\2\u075b\u075c\b\22\1\2")
        buf.write(u"\u075c\u0794\3\2\2\2\u075d\u075e\5B\"\2\u075e\u075f\7")
        buf.write(u"J\2\2\u075f\u0760\5B\"\2\u0760\u0761\b\22\1\2\u0761\u0794")
        buf.write(u"\3\2\2\2\u0762\u0763\5B\"\2\u0763\u0764\7%\2\2\u0764")
        buf.write(u"\u0765\7\u009b\2\2\u0765\u0766\7s\2\2\u0766\u0767\b\22")
        buf.write(u"\1\2\u0767\u0794\3\2\2\2\u0768\u0769\7\u009b\2\2\u0769")
        buf.write(u"\u076a\7s\2\2\u076a\u076b\7!\2\2\u076b\u076c\7@\2\2\u076c")
        buf.write(u"\u076d\5B\"\2\u076d\u076e\b\22\1\2\u076e\u0794\3\2\2")
        buf.write(u"\2\u076f\u0770\5B\"\2\u0770\u0771\7%\2\2\u0771\u0772")
        buf.write(u"\7\u0093\2\2\u0772\u0773\7r\2\2\u0773\u0774\b\22\1\2")
        buf.write(u"\u0774\u0794\3\2\2\2\u0775\u0776\7\u009b\2\2\u0776\u0777")
        buf.write(u"\7s\2\2\u0777\u0778\7\t\2\2\u0778\u0779\5B\"\2\u0779")
        buf.write(u"\u077a\b\22\1\2\u077a\u0794\3\2\2\2\u077b\u077c\5B\"")
        buf.write(u"\2\u077c\u077d\7J\2\2\u077d\u077e\7\u009b\2\2\u077e\u077f")
        buf.write(u"\7s\2\2\u077f\u0780\b\22\1\2\u0780\u0794\3\2\2\2\u0781")
        buf.write(u"\u0782\5B\"\2\u0782\u0783\7%\2\2\u0783\u0784\7P\2\2\u0784")
        buf.write(u"\u0785\b\22\1\2\u0785\u0794\3\2\2\2\u0786\u0787\5D#\2")
        buf.write(u"\u0787\u0788\b\22\1\2\u0788\u0794\3\2\2\2\u0789\u078a")
        buf.write(u"\7^\2\2\u078a\u078b\5H%\2\u078b\u078c\b\22\1\2\u078c")
        buf.write(u"\u0794\3\2\2\2\u078d\u078e\5H%\2\u078e\u078f\b\22\1\2")
        buf.write(u"\u078f\u0794\3\2\2\2\u0790\u0791\5B\"\2\u0791\u0792\b")
        buf.write(u"\22\1\2\u0792\u0794\3\2\2\2\u0793\u074b\3\2\2\2\u0793")
        buf.write(u"\u074f\3\2\2\2\u0793\u0753\3\2\2\2\u0793\u0758\3\2\2")
        buf.write(u"\2\u0793\u075d\3\2\2\2\u0793\u0762\3\2\2\2\u0793\u0768")
        buf.write(u"\3\2\2\2\u0793\u076f\3\2\2\2\u0793\u0775\3\2\2\2\u0793")
        buf.write(u"\u077b\3\2\2\2\u0793\u0781\3\2\2\2\u0793\u0786\3\2\2")
        buf.write(u"\2\u0793\u0789\3\2\2\2\u0793\u078d\3\2\2\2\u0793\u0790")
        buf.write(u"\3\2\2\2\u0794#\3\2\2\2\u0795\u0796\7\30\2\2\u0796\u0797")
        buf.write(u"\7I\2\2\u0797\u07ae\b\23\1\2\u0798\u0799\7\34\2\2\u0799")
        buf.write(u"\u079a\7G\2\2\u079a\u07ae\b\23\1\2\u079b\u079c\7\32\2")
        buf.write(u"\2\u079c\u079d\7X\2\2\u079d\u07ae\b\23\1\2\u079e\u079f")
        buf.write(u"\7\34\2\2\u079f\u07a0\7X\2\2\u07a0\u07ae\b\23\1\2\u07a1")
        buf.write(u"\u07a2\7\30\2\2\u07a2\u07a3\7h\2\2\u07a3\u07ae\b\23\1")
        buf.write(u"\2\u07a4\u07a5\7\34\2\2\u07a5\u07a6\7h\2\2\u07a6\u07ae")
        buf.write(u"\b\23\1\2\u07a7\u07a8\7\32\2\2\u07a8\u07a9\7\u0086\2")
        buf.write(u"\2\u07a9\u07ae\b\23\1\2\u07aa\u07ab\7\34\2\2\u07ab\u07ac")
        buf.write(u"\7\u0086\2\2\u07ac\u07ae\b\23\1\2\u07ad\u0795\3\2\2\2")
        buf.write(u"\u07ad\u0798\3\2\2\2\u07ad\u079b\3\2\2\2\u07ad\u079e")
        buf.write(u"\3\2\2\2\u07ad\u07a1\3\2\2\2\u07ad\u07a4\3\2\2\2\u07ad")
        buf.write(u"\u07a7\3\2\2\2\u07ad\u07aa\3\2\2\2\u07ae%\3\2\2\2\u07af")
        buf.write(u"\u07b0\5B\"\2\u07b0\u07b1\5\64\33\2\u07b1\u07b2\b\24")
        buf.write(u"\1\2\u07b2\u07cb\3\2\2\2\u07b3\u07b4\7k\2\2\u07b4\u07b5")
        buf.write(u"\5\64\33\2\u07b5\u07b6\b\24\1\2\u07b6\u07cb\3\2\2\2\u07b7")
        buf.write(u"\u07b8\5B\"\2\u07b8\u07b9\7\u00a4\2\2\u07b9\u07ba\5B")
        buf.write(u"\"\2\u07ba\u07bb\b\24\1\2\u07bb\u07cb\3\2\2\2\u07bc\u07bd")
        buf.write(u"\5B\"\2\u07bd\u07be\5*\26\2\u07be\u07bf\5\64\33\2\u07bf")
        buf.write(u"\u07c0\b\24\1\2\u07c0\u07cb\3\2\2\2\u07c1\u07c2\5B\"")
        buf.write(u"\2\u07c2\u07c3\5*\26\2\u07c3\u07c4\7w\2\2\u07c4\u07c5")
        buf.write(u"\7M\2\2\u07c5\u07c6\b\24\1\2\u07c6\u07cb\3\2\2\2\u07c7")
        buf.write(u"\u07c8\5\64\33\2\u07c8\u07c9\b\24\1\2\u07c9\u07cb\3\2")
        buf.write(u"\2\2\u07ca\u07af\3\2\2\2\u07ca\u07b3\3\2\2\2\u07ca\u07b7")
        buf.write(u"\3\2\2\2\u07ca\u07bc\3\2\2\2\u07ca\u07c1\3\2\2\2\u07ca")
        buf.write(u"\u07c7\3\2\2\2\u07cb\'\3\2\2\2\u07cc\u07cf\3\2\2\2\u07cd")
        buf.write(u"\u07cf\7\u0089\2\2\u07ce\u07cc\3\2\2\2\u07ce\u07cd\3")
        buf.write(u"\2\2\2\u07cf)\3\2\2\2\u07d0\u07d3\3\2\2\2\u07d1\u07d3")
        buf.write(u"\7\34\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d1\3\2\2\2\u07d3")
        buf.write(u"+\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d7\78\2\2\u07d6")
        buf.write(u"\u07d4\3\2\2\2\u07d6\u07d5\3\2\2\2\u07d7-\3\2\2\2\u07d8")
        buf.write(u"\u07db\3\2\2\2\u07d9\u07db\7%\2\2\u07da\u07d8\3\2\2\2")
        buf.write(u"\u07da\u07d9\3\2\2\2\u07db/\3\2\2\2\u07dc\u07df\3\2\2")
        buf.write(u"\2\u07dd\u07df\7\t\2\2\u07de\u07dc\3\2\2\2\u07de\u07dd")
        buf.write(u"\3\2\2\2\u07df\61\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07e3")
        buf.write(u"\7^\2\2\u07e2\u07e0\3\2\2\2\u07e2\u07e1\3\2\2\2\u07e3")
        buf.write(u"\63\3\2\2\2\u07e4\u07e5\7.\2\2\u07e5\u07fd\b\33\1\2\u07e6")
        buf.write(u"\u07e7\7*\2\2\u07e7\u07fd\b\33\1\2\u07e8\u07e9\7F\2\2")
        buf.write(u"\u07e9\u07fd\b\33\1\2\u07ea\u07eb\7\16\2\2\u07eb\u07fd")
        buf.write(u"\b\33\1\2\u07ec\u07ed\7D\2\2\u07ed\u07fd\b\33\1\2\u07ee")
        buf.write(u"\u07ef\7\63\2\2\u07ef\u07fd\b\33\1\2\u07f0\u07f1\7B\2")
        buf.write(u"\2\u07f1\u07fd\b\33\1\2\u07f2\u07f3\7\6\2\2\u07f3\u07fd")
        buf.write(u"\b\33\1\2\u07f4\u07f5\7\u0088\2\2\u07f5\u07fd\b\33\1")
        buf.write(u"\2\u07f6\u07f7\7_\2\2\u07f7\u07fd\b\33\1\2\u07f8\u07f9")
        buf.write(u"\7Y\2\2\u07f9\u07fd\b\33\1\2\u07fa\u07fb\7\35\2\2\u07fb")
        buf.write(u"\u07fd\b\33\1\2\u07fc\u07e4\3\2\2\2\u07fc\u07e6\3\2\2")
        buf.write(u"\2\u07fc\u07e8\3\2\2\2\u07fc\u07ea\3\2\2\2\u07fc\u07ec")
        buf.write(u"\3\2\2\2\u07fc\u07ee\3\2\2\2\u07fc\u07f0\3\2\2\2\u07fc")
        buf.write(u"\u07f2\3\2\2\2\u07fc\u07f4\3\2\2\2\u07fc\u07f6\3\2\2")
        buf.write(u"\2\u07fc\u07f8\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fd\65\3")
        buf.write(u"\2\2\2\u07fe\u07ff\7f\2\2\u07ff\u0800\58\35\2\u0800\u0801")
        buf.write(u"\b\34\1\2\u0801\u0806\3\2\2\2\u0802\u0803\58\35\2\u0803")
        buf.write(u"\u0804\b\34\1\2\u0804\u0806\3\2\2\2\u0805\u07fe\3\2\2")
        buf.write(u"\2\u0805\u0802\3\2\2\2\u0806\67\3\2\2\2\u0807\u0808\5")
        buf.write(u"B\"\2\u0808\u0809\7^\2\2\u0809\u080a\5B\"\2\u080a\u080b")
        buf.write(u"\7R\2\2\u080b\u080c\5.\30\2\u080c\u080d\5B\"\2\u080d")
        buf.write(u"\u080e\7\u0084\2\2\u080e\u080f\b\35\1\2\u080f\u085a\3")
        buf.write(u"\2\2\2\u0810\u0811\5B\"\2\u0811\u0812\7^\2\2\u0812\u0813")
        buf.write(u"\5.\30\2\u0813\u0814\5B\"\2\u0814\u0815\7R\2\2\u0815")
        buf.write(u"\u0816\b\35\1\2\u0816\u085a\3\2\2\2\u0817\u0818\5B\"")
        buf.write(u"\2\u0818\u0819\7^\2\2\u0819\u081a\5.\30\2\u081a\u081b")
        buf.write(u"\5B\"\2\u081b\u081c\7\u0084\2\2\u081c\u081d\b\35\1\2")
        buf.write(u"\u081d\u085a\3\2\2\2\u081e\u081f\5B\"\2\u081f\u0820\7")
        buf.write(u"R\2\2\u0820\u0821\5.\30\2\u0821\u0822\5B\"\2\u0822\u0823")
        buf.write(u"\7\u0084\2\2\u0823\u0824\b\35\1\2\u0824\u085a\3\2\2\2")
        buf.write(u"\u0825\u0826\5B\"\2\u0826\u0827\7^\2\2\u0827\u0828\b")
        buf.write(u"\35\1\2\u0828\u085a\3\2\2\2\u0829\u082a\5B\"\2\u082a")
        buf.write(u"\u082b\7^\2\2\u082b\u082c\7%\2\2\u082c\u082d\7\u009b")
        buf.write(u"\2\2\u082d\u082e\7s\2\2\u082e\u082f\b\35\1\2\u082f\u085a")
        buf.write(u"\3\2\2\2\u0830\u0831\5B\"\2\u0831\u0832\7^\2\2\u0832")
        buf.write(u"\u0833\7%\2\2\u0833\u0834\7P\2\2\u0834\u0835\b\35\1\2")
        buf.write(u"\u0835\u085a\3\2\2\2\u0836\u0837\5B\"\2\u0837\u0838\7")
        buf.write(u"^\2\2\u0838\u0839\7%\2\2\u0839\u083a\7\u0093\2\2\u083a")
        buf.write(u"\u083b\7r\2\2\u083b\u083c\b\35\1\2\u083c\u085a\3\2\2")
        buf.write(u"\2\u083d\u083e\7\u009b\2\2\u083e\u083f\7]\2\2\u083f\u0840")
        buf.write(u"\7%\2\2\u0840\u0841\7\u009b\2\2\u0841\u0842\7s\2\2\u0842")
        buf.write(u"\u085a\b\35\1\2\u0843\u0844\7\u009b\2\2\u0844\u0845\7")
        buf.write(u"]\2\2\u0845\u0846\7%\2\2\u0846\u0847\7P\2\2\u0847\u085a")
        buf.write(u"\b\35\1\2\u0848\u0849\7\u009b\2\2\u0849\u084a\7]\2\2")
        buf.write(u"\u084a\u084b\7%\2\2\u084b\u084c\7\u0093\2\2\u084c\u084d")
        buf.write(u"\7r\2\2\u084d\u085a\b\35\1\2\u084e\u084f\7\u009b\2\2")
        buf.write(u"\u084f\u0850\7]\2\2\u0850\u085a\b\35\1\2\u0851\u0852")
        buf.write(u"\5B\"\2\u0852\u0853\7R\2\2\u0853\u0854\b\35\1\2\u0854")
        buf.write(u"\u085a\3\2\2\2\u0855\u0856\5B\"\2\u0856\u0857\7\u0084")
        buf.write(u"\2\2\u0857\u0858\b\35\1\2\u0858\u085a\3\2\2\2\u0859\u0807")
        buf.write(u"\3\2\2\2\u0859\u0810\3\2\2\2\u0859\u0817\3\2\2\2\u0859")
        buf.write(u"\u081e\3\2\2\2\u0859\u0825\3\2\2\2\u0859\u0829\3\2\2")
        buf.write(u"\2\u0859\u0830\3\2\2\2\u0859\u0836\3\2\2\2\u0859\u083d")
        buf.write(u"\3\2\2\2\u0859\u0843\3\2\2\2\u0859\u0848\3\2\2\2\u0859")
        buf.write(u"\u084e\3\2\2\2\u0859\u0851\3\2\2\2\u0859\u0855\3\2\2")
        buf.write(u"\2\u085a9\3\2\2\2\u085b\u085c\7!\2\2\u085c\u085d\58\35")
        buf.write(u"\2\u085d\u085e\b\36\1\2\u085e\u087a\3\2\2\2\u085f\u0860")
        buf.write(u"\7-\2\2\u0860\u0861\58\35\2\u0861\u0862\b\36\1\2\u0862")
        buf.write(u"\u087a\3\2\2\2\u0863\u0864\58\35\2\u0864\u0865\7!\2\2")
        buf.write(u"\u0865\u0866\b\36\1\2\u0866\u087a\3\2\2\2\u0867\u0868")
        buf.write(u"\58\35\2\u0868\u0869\7\24\2\2\u0869\u086a\7\5\2\2\u086a")
        buf.write(u"\u086b\b\36\1\2\u086b\u087a\3\2\2\2\u086c\u086d\58\35")
        buf.write(u"\2\u086d\u086e\7\24\2\2\u086e\u086f\7]\2\2\u086f\u0870")
        buf.write(u"\b\36\1\2\u0870\u087a\3\2\2\2\u0871\u0872\58\35\2\u0872")
        buf.write(u"\u0873\7)\2\2\u0873\u0874\b\36\1\2\u0874\u087a\3\2\2")
        buf.write(u"\2\u0875\u0876\58\35\2\u0876\u0877\7i\2\2\u0877\u0878")
        buf.write(u"\b\36\1\2\u0878\u087a\3\2\2\2\u0879\u085b\3\2\2\2\u0879")
        buf.write(u"\u085f\3\2\2\2\u0879\u0863\3\2\2\2\u0879\u0867\3\2\2")
        buf.write(u"\2\u0879\u086c\3\2\2\2\u0879\u0871\3\2\2\2\u0879\u0875")
        buf.write(u"\3\2\2\2\u087a;\3\2\2\2\u087b\u087c\7\17\2\2\u087c\u0884")
        buf.write(u"\b\37\1\2\u087d\u087e\7(\2\2\u087e\u0884\b\37\1\2\u087f")
        buf.write(u"\u0880\7;\2\2\u0880\u0884\b\37\1\2\u0881\u0882\7j\2\2")
        buf.write(u"\u0882\u0884\b\37\1\2\u0883\u087b\3\2\2\2\u0883\u087d")
        buf.write(u"\3\2\2\2\u0883\u087f\3\2\2\2\u0883\u0881\3\2\2\2\u0884")
        buf.write(u"=\3\2\2\2\u0885\u0886\7+\2\2\u0886\u088e\b \1\2\u0887")
        buf.write(u"\u0888\7U\2\2\u0888\u088e\b \1\2\u0889\u088a\7`\2\2\u088a")
        buf.write(u"\u088e\b \1\2\u088b\u088c\7~\2\2\u088c\u088e\b \1\2\u088d")
        buf.write(u"\u0885\3\2\2\2\u088d\u0887\3\2\2\2\u088d\u0889\3\2\2")
        buf.write(u"\2\u088d\u088b\3\2\2\2\u088e?\3\2\2\2\u088f\u0890\7v")
        buf.write(u"\2\2\u0890\u0891\7\u008c\2\2\u0891\u08b6\b!\1\2\u0892")
        buf.write(u"\u0893\7\u008c\2\2\u0893\u0894\7\177\2\2\u0894\u08b6")
        buf.write(u"\b!\1\2\u0895\u0896\7\177\2\2\u0896\u0897\7\u008c\2\2")
        buf.write(u"\u0897\u08b6\b!\1\2\u0898\u0899\7\u009c\2\2\u0899\u089a")
        buf.write(u"\7\u008c\2\2\u089a\u089b\7)\2\2\u089b\u08b6\b!\1\2\u089c")
        buf.write(u"\u089d\7\u009c\2\2\u089d\u089e\7\u008c\2\2\u089e\u089f")
        buf.write(u"\7i\2\2\u089f\u08b6\b!\1\2\u08a0\u08a1\7\u008c\2\2\u08a1")
        buf.write(u"\u08a2\7m\2\2\u08a2\u08b6\b!\1\2\u08a3\u08a4\7m\2\2\u08a4")
        buf.write(u"\u08a5\7\u008c\2\2\u08a5\u08b6\b!\1\2\u08a6\u08a7\7\u008c")
        buf.write(u"\2\2\u08a7\u08a8\7\u009e\2\2\u08a8\u08b6\b!\1\2\u08a9")
        buf.write(u"\u08aa\7-\2\2\u08aa\u08ab\7\u009c\2\2\u08ab\u08ac\7\u008c")
        buf.write(u"\2\2\u08ac\u08b6\b!\1\2\u08ad\u08ae\7!\2\2\u08ae\u08af")
        buf.write(u"\7\u009c\2\2\u08af\u08b0\7\u008c\2\2\u08b0\u08b6\b!\1")
        buf.write(u"\2\u08b1\u08b2\7\u009c\2\2\u08b2\u08b3\7\u008c\2\2\u08b3")
        buf.write(u"\u08b4\7!\2\2\u08b4\u08b6\b!\1\2\u08b5\u088f\3\2\2\2")
        buf.write(u"\u08b5\u0892\3\2\2\2\u08b5\u0895\3\2\2\2\u08b5\u0898")
        buf.write(u"\3\2\2\2\u08b5\u089c\3\2\2\2\u08b5\u08a0\3\2\2\2\u08b5")
        buf.write(u"\u08a3\3\2\2\2\u08b5\u08a6\3\2\2\2\u08b5\u08a9\3\2\2")
        buf.write(u"\2\u08b5\u08ad\3\2\2\2\u08b5\u08b1\3\2\2\2\u08b6A\3\2")
        buf.write(u"\2\2\u08b7\u08b8\7Z\2\2\u08b8\u08c4\b\"\1\2\u08b9\u08ba")
        buf.write(u"\7\u009b\2\2\u08ba\u08c4\b\"\1\2\u08bb\u08bc\7\u009c")
        buf.write(u"\2\2\u08bc\u08c4\b\"\1\2\u08bd\u08be\7#\2\2\u08be\u08c4")
        buf.write(u"\b\"\1\2\u08bf\u08c0\7\u0093\2\2\u08c0\u08c4\b\"\1\2")
        buf.write(u"\u08c1\u08c2\7t\2\2\u08c2\u08c4\b\"\1\2\u08c3\u08b7\3")
        buf.write(u"\2\2\2\u08c3\u08b9\3\2\2\2\u08c3\u08bb\3\2\2\2\u08c3")
        buf.write(u"\u08bd\3\2\2\2\u08c3\u08bf\3\2\2\2\u08c3\u08c1\3\2\2")
        buf.write(u"\2\u08c4C\3\2\2\2\u08c5\u08c6\7\u00a5\2\2\u08c6\u08c7")
        buf.write(u"\b#\1\2\u08c7E\3\2\2\2\u08c8\u08c9\7\u00a7\2\2\u08c9")
        buf.write(u"\u08ca\b$\1\2\u08caG\3\2\2\2\u08cb\u08cc\7\u00a6\2\2")
        buf.write(u"\u08cc\u08cd\b%\1\2\u08cdI\3\2\2\2\"M\u01fc\u028b\u0356")
        buf.write(u"\u040f\u04c8\u0517\u052f\u0580\u05c1\u05ff\u0614\u0669")
        buf.write(u"\u06f2\u0744\u0793\u07ad\u07ca\u07ce\u07d2\u07d6\u07da")
        buf.write(u"\u07de\u07e2\u07fc\u0805\u0859\u0879\u0883\u088d\u08b5")
        buf.write(u"\u08c3")
        return buf.getvalue()


class DateAndTimeParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"':'", u"'a'", u"'adesso'", u"<INVALID>", 
                     u"'al'", u"'all'", u"'alle'", u"'alba'", u"'anni'", 
                     u"'anno'", u"'annualmente'", u"<INVALID>", u"'autunno'", 
                     u"'bisettimanalmente'", u"'cena'", u"'corso'", u"'dalle'", 
                     u"'da'", u"'dal'", u"'degli'", u"'dei'", u"'del'", 
                     u"'dell'", u"'della'", u"'delle'", u"'di'", u"<INVALID>", 
                     u"'domani'", u"<INVALID>", u"<INVALID>", u"'dopo'", 
                     u"'dopodomani'", u"<INVALID>", u"'durante'", u"'e'", 
                     u"'end'", u"'entro'", u"'estate'", u"'fa'", u"<INVALID>", 
                     u"'ferragosto'", u"'fine'", u"<INVALID>", u"<INVALID>", 
                     u"'giornalmente'", u"'giorni'", u"'giorno'", u"<INVALID>", 
                     u"<INVALID>", u"'gli'", u"'ieri'", u"'i'", u"<INVALID>", 
                     u"'il'", u"'in'", u"'in punto'", u"'inverno'", u"'l'", 
                     u"'altro ieri'", u"'indomani'", u"'la'", u"'le'", u"'lo'", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'marzo'", u"'mattina'", u"'mattinata'", u"'mattino'", 
                     u"'meno'", u"'mensilmente'", u"<INVALID>", u"'mese'", 
                     u"'mesi'", u"'mezzanotte'", u"<INVALID>", u"'mezzogiorno'", 
                     u"'minuti'", u"'minuto'", u"'momento'", u"'natale'", 
                     u"'nel'", u"'nottata'", u"'notte'", u"<INVALID>", u"<INVALID>", 
                     u"'oggi'", u"'ogni'", u"'ora'", u"'ore'", u"<INVALID>", 
                     u"'pasqua'", u"'passate'", u"'passati'", u"'pranzo'", 
                     u"'precedente'", u"'precedenti'", u"'per'", u"'piu'", 
                     u"'pomeriggio'", u"'prima'", u"'primavera'", u"'primo'", 
                     u"'proprio'", u"'prossima'", u"'prossime'", u"'prossimi'", 
                     u"'prossimo'", u"'quarta'", u"'quarti'", u"'quarto'", 
                     u"<INVALID>", u"'quest'", u"'questa'", u"'questo'", 
                     u"'questi'", u"'quinta'", u"'quinto'", u"'quotidianamente'", 
                     u"<INVALID>", u"<INVALID>", u"'san valentino'", u"'scorsa'", 
                     u"'scorse'", u"'scorsi'", u"'scorso'", u"'seconda'", 
                     u"'secondi'", u"'secondo'", u"'sera'", u"'serata'", 
                     u"<INVALID>", u"'settimana'", u"'settimanalmente'", 
                     u"'settimane'", u"'stagione'", u"'stagionei'", u"'stanotte'", 
                     u"'stasera'", u"'tardi'", u"'terza'", u"'terzo'", u"<INVALID>", 
                     u"'trimestre'", u"'trimestralmente'", u"'tutte'", u"'tutti'", 
                     u"'ultima'", u"<INVALID>", u"'ultimo'", u"'un'", u"'una'", 
                     u"<INVALID>", u"'ventura'", u"'venturo'", u"'volte'", 
                     u"'week'", u"'weekend'", u"<INVALID>", u"'/'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"A", u"ADESSO", u"AGOSTO", 
                      u"AL", u"ALL", u"ALLE", u"ALBA", u"ANNI", u"ANNO", 
                      u"ANNUALMENTE", u"APRILE", u"AUTUNNO", u"BISETTIMANALMENTE", 
                      u"CENA", u"CORSO", u"DALLE", u"DA", u"DAL", u"DEGLI", 
                      u"DEI", u"DEL", u"DELL", u"DELLA", u"DELLE", u"DI", 
                      u"DICEMBRE", u"DOMANI", u"DOMENICA", u"DOMENICHE", 
                      u"DOPO", u"DOPODOMANI", u"DUE", u"DURANTE", u"E", 
                      u"END", u"ENTRO", u"ESTATE", u"FA", u"FEBBRAIO", u"FERRAGOSTO", 
                      u"FINE", u"FRA", u"GENNAIO", u"GIORNALMENTE", u"GIORNI", 
                      u"GIORNO", u"GIOVEDI", u"GIUGNO", u"GLI", u"IERI", 
                      u"I", u"IERLALTRO", u"IL", u"IN", u"INPUNTO", u"INVERNO", 
                      u"L", u"ALTROIERI", u"INDOMANI", u"LA", u"LE", u"LO", 
                      u"LUGLIO", u"LUNEDI", u"MAGGIO", u"MARTEDI", u"MARZO", 
                      u"MATTINA", u"MATTINATA", u"MATTINO", u"MENO", u"MENSILMENTE", 
                      u"MERCOLEDI", u"MESE", u"MESI", u"MEZZANOTTE", u"MEZZO", 
                      u"MEZZOGIORNO", u"MINUTI", u"MINUTO", u"MOMENTO", 
                      u"NATALE", u"NEL", u"NOTTATA", u"NOTTE", u"NOVEMBRE", 
                      u"NUMBER", u"OGGI", u"OGNI", u"ORA", u"ORE", u"OTTOBRE", 
                      u"PASQUA", u"PASSATE", u"PASSATI", u"PRANZO", u"PRECEDENTE", 
                      u"PRECEDENTI", u"PER", u"PIU", u"POMERIGGIO", u"PRIMA", 
                      u"PRIMAVERA", u"PRIMO", u"PROPRIO", u"PROSSIMA", u"PROSSIME", 
                      u"PROSSIMI", u"PROSSIMO", u"QUARTA", u"QUARTI", u"QUARTO", 
                      u"QUATTRO", u"QUEST", u"QUESTA", u"QUESTO", u"QUESTI", 
                      u"QUINTA", u"QUINTO", u"QUOTIDIANAMENTE", u"SABATO", 
                      u"SABATI", u"SANVALENTINO", u"SCORSA", u"SCORSE", 
                      u"SCORSI", u"SCORSO", u"SECONDA", u"SECONDI", u"SECONDO", 
                      u"SERA", u"SERATA", u"SETTEMBRE", u"SETTIMANA", u"SETTIMANALMENTE", 
                      u"SETTIMANE", u"STAGIONE", u"STAGIONI", u"STANOTTE", 
                      u"STASERA", u"TARDI", u"TERZA", u"TERZO", u"TRE", 
                      u"TRIMESTRE", u"TRIMESTRALMENTE", u"TUTTE", u"TUTTI", 
                      u"ULTIMA", u"ULTIMI", u"ULTIMO", u"UN", u"UNA", u"VENERDI", 
                      u"VENTURA", u"VENTURO", u"VOLTE", u"WEEK", u"WEEKEND", 
                      u"WS", u"SLASH", u"THREEDIGNUM", u"TIMENUM", u"YEARNUM", 
                      u"YEAR19", u"YEAR20" ]

    RULE_value = 0
    RULE_date_or_time = 1
    RULE_day_duration = 2
    RULE_week_duration = 3
    RULE_month_duration = 4
    RULE_year_duration = 5
    RULE_day_relative = 6
    RULE_day_absolute = 7
    RULE_time_relative = 8
    RULE_month_relative = 9
    RULE_year_relative = 10
    RULE_week_number = 11
    RULE_week_relative = 12
    RULE_year = 13
    RULE_date_repeat = 14
    RULE_time_start = 15
    RULE_time_number = 16
    RULE_ampm = 17
    RULE_date = 18
    RULE_maybesettimana = 19
    RULE_maybedi = 20
    RULE_maybethe = 21
    RULE_eand = 22
    RULE_maybealle = 23
    RULE_maybeore = 24
    RULE_month = 25
    RULE_duration = 26
    RULE_timecomponents = 27
    RULE_rel_time_start = 28
    RULE_season = 29
    RULE_holiday = 30
    RULE_season_relative = 31
    RULE_number = 32
    RULE_threedignum = 33
    RULE_yearnum = 34
    RULE_timenum = 35

    ruleNames =  [ u"value", u"date_or_time", u"day_duration", u"week_duration", 
                   u"month_duration", u"year_duration", u"day_relative", 
                   u"day_absolute", u"time_relative", u"month_relative", 
                   u"year_relative", u"week_number", u"week_relative", u"year", 
                   u"date_repeat", u"time_start", u"time_number", u"ampm", 
                   u"date", u"maybesettimana", u"maybedi", u"maybethe", 
                   u"eand", u"maybealle", u"maybeore", u"month", u"duration", 
                   u"timecomponents", u"rel_time_start", u"season", u"holiday", 
                   u"season_relative", u"number", u"threedignum", u"yearnum", 
                   u"timenum" ]

    EOF = Token.EOF
    T__0=1
    A=2
    ADESSO=3
    AGOSTO=4
    AL=5
    ALL=6
    ALLE=7
    ALBA=8
    ANNI=9
    ANNO=10
    ANNUALMENTE=11
    APRILE=12
    AUTUNNO=13
    BISETTIMANALMENTE=14
    CENA=15
    CORSO=16
    DALLE=17
    DA=18
    DAL=19
    DEGLI=20
    DEI=21
    DEL=22
    DELL=23
    DELLA=24
    DELLE=25
    DI=26
    DICEMBRE=27
    DOMANI=28
    DOMENICA=29
    DOMENICHE=30
    DOPO=31
    DOPODOMANI=32
    DUE=33
    DURANTE=34
    E=35
    END=36
    ENTRO=37
    ESTATE=38
    FA=39
    FEBBRAIO=40
    FERRAGOSTO=41
    FINE=42
    FRA=43
    GENNAIO=44
    GIORNALMENTE=45
    GIORNI=46
    GIORNO=47
    GIOVEDI=48
    GIUGNO=49
    GLI=50
    IERI=51
    I=52
    IERLALTRO=53
    IL=54
    IN=55
    INPUNTO=56
    INVERNO=57
    L=58
    ALTROIERI=59
    INDOMANI=60
    LA=61
    LE=62
    LO=63
    LUGLIO=64
    LUNEDI=65
    MAGGIO=66
    MARTEDI=67
    MARZO=68
    MATTINA=69
    MATTINATA=70
    MATTINO=71
    MENO=72
    MENSILMENTE=73
    MERCOLEDI=74
    MESE=75
    MESI=76
    MEZZANOTTE=77
    MEZZO=78
    MEZZOGIORNO=79
    MINUTI=80
    MINUTO=81
    MOMENTO=82
    NATALE=83
    NEL=84
    NOTTATA=85
    NOTTE=86
    NOVEMBRE=87
    NUMBER=88
    OGGI=89
    OGNI=90
    ORA=91
    ORE=92
    OTTOBRE=93
    PASQUA=94
    PASSATE=95
    PASSATI=96
    PRANZO=97
    PRECEDENTE=98
    PRECEDENTI=99
    PER=100
    PIU=101
    POMERIGGIO=102
    PRIMA=103
    PRIMAVERA=104
    PRIMO=105
    PROPRIO=106
    PROSSIMA=107
    PROSSIME=108
    PROSSIMI=109
    PROSSIMO=110
    QUARTA=111
    QUARTI=112
    QUARTO=113
    QUATTRO=114
    QUEST=115
    QUESTA=116
    QUESTO=117
    QUESTI=118
    QUINTA=119
    QUINTO=120
    QUOTIDIANAMENTE=121
    SABATO=122
    SABATI=123
    SANVALENTINO=124
    SCORSA=125
    SCORSE=126
    SCORSI=127
    SCORSO=128
    SECONDA=129
    SECONDI=130
    SECONDO=131
    SERA=132
    SERATA=133
    SETTEMBRE=134
    SETTIMANA=135
    SETTIMANALMENTE=136
    SETTIMANE=137
    STAGIONE=138
    STAGIONI=139
    STANOTTE=140
    STASERA=141
    TARDI=142
    TERZA=143
    TERZO=144
    TRE=145
    TRIMESTRE=146
    TRIMESTRALMENTE=147
    TUTTE=148
    TUTTI=149
    ULTIMA=150
    ULTIMI=151
    ULTIMO=152
    UN=153
    UNA=154
    VENERDI=155
    VENTURA=156
    VENTURO=157
    VOLTE=158
    WEEK=159
    WEEKEND=160
    WS=161
    SLASH=162
    THREEDIGNUM=163
    TIMENUM=164
    YEARNUM=165
    YEAR19=166
    YEAR20=167

    def __init__(self, input):
        super(DateAndTimeParser, self).__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



        self.results = list()


    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.ValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DateAndTimeParser.EOF, 0)

        def date_or_time(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Date_or_timeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Date_or_timeContext,i)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_value

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterValue(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitValue(self)




    def value(self):

        localctx = DateAndTimeParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_value)

            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 75
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DateAndTimeParser.A) | (1 << DateAndTimeParser.ADESSO) | (1 << DateAndTimeParser.AGOSTO) | (1 << DateAndTimeParser.AL) | (1 << DateAndTimeParser.ALL) | (1 << DateAndTimeParser.ALLE) | (1 << DateAndTimeParser.ALBA) | (1 << DateAndTimeParser.ANNI) | (1 << DateAndTimeParser.ANNO) | (1 << DateAndTimeParser.ANNUALMENTE) | (1 << DateAndTimeParser.APRILE) | (1 << DateAndTimeParser.AUTUNNO) | (1 << DateAndTimeParser.BISETTIMANALMENTE) | (1 << DateAndTimeParser.DALLE) | (1 << DateAndTimeParser.DA) | (1 << DateAndTimeParser.DAL) | (1 << DateAndTimeParser.DI) | (1 << DateAndTimeParser.DICEMBRE) | (1 << DateAndTimeParser.DOMANI) | (1 << DateAndTimeParser.DOMENICA) | (1 << DateAndTimeParser.DOPO) | (1 << DateAndTimeParser.DOPODOMANI) | (1 << DateAndTimeParser.DUE) | (1 << DateAndTimeParser.DURANTE) | (1 << DateAndTimeParser.ENTRO) | (1 << DateAndTimeParser.ESTATE) | (1 << DateAndTimeParser.FEBBRAIO) | (1 << DateAndTimeParser.FERRAGOSTO) | (1 << DateAndTimeParser.FINE) | (1 << DateAndTimeParser.FRA) | (1 << DateAndTimeParser.GENNAIO) | (1 << DateAndTimeParser.GIORNALMENTE) | (1 << DateAndTimeParser.GIORNO) | (1 << DateAndTimeParser.GIOVEDI) | (1 << DateAndTimeParser.GIUGNO) | (1 << DateAndTimeParser.IERI) | (1 << DateAndTimeParser.IERLALTRO) | (1 << DateAndTimeParser.IN) | (1 << DateAndTimeParser.INVERNO) | (1 << DateAndTimeParser.ALTROIERI) | (1 << DateAndTimeParser.INDOMANI))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DateAndTimeParser.LUGLIO - 64)) | (1 << (DateAndTimeParser.LUNEDI - 64)) | (1 << (DateAndTimeParser.MAGGIO - 64)) | (1 << (DateAndTimeParser.MARTEDI - 64)) | (1 << (DateAndTimeParser.MARZO - 64)) | (1 << (DateAndTimeParser.MATTINA - 64)) | (1 << (DateAndTimeParser.MATTINO - 64)) | (1 << (DateAndTimeParser.MENSILMENTE - 64)) | (1 << (DateAndTimeParser.MERCOLEDI - 64)) | (1 << (DateAndTimeParser.MESE - 64)) | (1 << (DateAndTimeParser.MEZZANOTTE - 64)) | (1 << (DateAndTimeParser.MEZZOGIORNO - 64)) | (1 << (DateAndTimeParser.NATALE - 64)) | (1 << (DateAndTimeParser.NEL - 64)) | (1 << (DateAndTimeParser.NOTTE - 64)) | (1 << (DateAndTimeParser.NOVEMBRE - 64)) | (1 << (DateAndTimeParser.NUMBER - 64)) | (1 << (DateAndTimeParser.OGGI - 64)) | (1 << (DateAndTimeParser.OGNI - 64)) | (1 << (DateAndTimeParser.ORA - 64)) | (1 << (DateAndTimeParser.ORE - 64)) | (1 << (DateAndTimeParser.OTTOBRE - 64)) | (1 << (DateAndTimeParser.PASQUA - 64)) | (1 << (DateAndTimeParser.PER - 64)) | (1 << (DateAndTimeParser.POMERIGGIO - 64)) | (1 << (DateAndTimeParser.PRIMA - 64)) | (1 << (DateAndTimeParser.PRIMAVERA - 64)) | (1 << (DateAndTimeParser.PRIMO - 64)) | (1 << (DateAndTimeParser.PROPRIO - 64)) | (1 << (DateAndTimeParser.PROSSIMA - 64)) | (1 << (DateAndTimeParser.PROSSIMI - 64)) | (1 << (DateAndTimeParser.PROSSIMO - 64)) | (1 << (DateAndTimeParser.QUARTA - 64)) | (1 << (DateAndTimeParser.QUARTO - 64)) | (1 << (DateAndTimeParser.QUATTRO - 64)) | (1 << (DateAndTimeParser.QUEST - 64)) | (1 << (DateAndTimeParser.QUESTA - 64)) | (1 << (DateAndTimeParser.QUESTO - 64)) | (1 << (DateAndTimeParser.QUESTI - 64)) | (1 << (DateAndTimeParser.QUINTA - 64)) | (1 << (DateAndTimeParser.QUINTO - 64)) | (1 << (DateAndTimeParser.QUOTIDIANAMENTE - 64)) | (1 << (DateAndTimeParser.SABATO - 64)) | (1 << (DateAndTimeParser.SANVALENTINO - 64)) | (1 << (DateAndTimeParser.SCORSA - 64)) | (1 << (DateAndTimeParser.SCORSI - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DateAndTimeParser.SCORSO - 128)) | (1 << (DateAndTimeParser.SECONDA - 128)) | (1 << (DateAndTimeParser.SECONDO - 128)) | (1 << (DateAndTimeParser.SERA - 128)) | (1 << (DateAndTimeParser.SETTEMBRE - 128)) | (1 << (DateAndTimeParser.SETTIMANA - 128)) | (1 << (DateAndTimeParser.SETTIMANALMENTE - 128)) | (1 << (DateAndTimeParser.STAGIONE - 128)) | (1 << (DateAndTimeParser.STANOTTE - 128)) | (1 << (DateAndTimeParser.STASERA - 128)) | (1 << (DateAndTimeParser.TERZA - 128)) | (1 << (DateAndTimeParser.TERZO - 128)) | (1 << (DateAndTimeParser.TRE - 128)) | (1 << (DateAndTimeParser.TRIMESTRALMENTE - 128)) | (1 << (DateAndTimeParser.TUTTE - 128)) | (1 << (DateAndTimeParser.TUTTI - 128)) | (1 << (DateAndTimeParser.ULTIMA - 128)) | (1 << (DateAndTimeParser.ULTIMI - 128)) | (1 << (DateAndTimeParser.ULTIMO - 128)) | (1 << (DateAndTimeParser.UN - 128)) | (1 << (DateAndTimeParser.UNA - 128)) | (1 << (DateAndTimeParser.VENERDI - 128)) | (1 << (DateAndTimeParser.WEEK - 128)) | (1 << (DateAndTimeParser.WEEKEND - 128)) | (1 << (DateAndTimeParser.THREEDIGNUM - 128)) | (1 << (DateAndTimeParser.TIMENUM - 128)) | (1 << (DateAndTimeParser.YEARNUM - 128)))) != 0):
                self.state = 72
                self.date_or_time()
                self.state = 77
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 78
            self.match(DateAndTimeParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_or_timeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Date_or_timeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self._day_duration = None # Day_durationContext
            self._week_duration = None # Week_durationContext
            self._month_duration = None # Month_durationContext
            self._year_duration = None # Year_durationContext
            self._day_absolute = None # Day_absoluteContext
            self._month = None # MonthContext
            self._week_number = None # Week_numberContext
            self._day_relative = None # Day_relativeContext
            self._date = None # DateContext
            self._YEARNUM = None # Token
            self._timecomponents = None # TimecomponentsContext
            self.a = None # NumberContext
            self.b = None # NumberContext
            self._time_relative = None # Time_relativeContext
            self._number = None # NumberContext
            self._season_relative = None # Season_relativeContext
            self.x = None # Day_relativeContext
            self.y = None # Day_relativeContext
            self.m = None # Week_relativeContext
            self.n = None # Week_relativeContext
            self.o = None # Month_relativeContext
            self.p = None # Month_relativeContext
            self.q = None # Year_relativeContext
            self.r = None # Year_relativeContext
            self._week_relative = None # Week_relativeContext
            self._month_relative = None # Month_relativeContext
            self._year_relative = None # Year_relativeContext
            self._duration = None # DurationContext
            self.s = None # Rel_time_startContext
            self.t = None # Rel_time_startContext
            self._rel_time_start = None # Rel_time_startContext
            self._date_repeat = None # Date_repeatContext
            self.u = None # DateContext
            self.v = None # DateContext
            self._time_start = None # Time_startContext
            self._year = None # YearContext
            self._holiday = None # HolidayContext
            self._season = None # SeasonContext

        def day_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Day_durationContext,0)


        def week_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Week_durationContext,0)


        def month_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Month_durationContext,0)


        def year_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Year_durationContext,0)


        def PRIMO(self):
            return self.getToken(DateAndTimeParser.PRIMO, 0)

        def day_absolute(self):
            return self.getTypedRuleContext(DateAndTimeParser.Day_absoluteContext,0)


        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def month(self):
            return self.getTypedRuleContext(DateAndTimeParser.MonthContext,0)


        def SECONDO(self):
            return self.getToken(DateAndTimeParser.SECONDO, 0)

        def TERZO(self):
            return self.getToken(DateAndTimeParser.TERZO, 0)

        def QUARTO(self):
            return self.getToken(DateAndTimeParser.QUARTO, 0)

        def QUINTO(self):
            return self.getToken(DateAndTimeParser.QUINTO, 0)

        def ULTIMO(self):
            return self.getToken(DateAndTimeParser.ULTIMO, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def DOMENICA(self):
            return self.getToken(DateAndTimeParser.DOMENICA, 0)

        def SECONDA(self):
            return self.getToken(DateAndTimeParser.SECONDA, 0)

        def TERZA(self):
            return self.getToken(DateAndTimeParser.TERZA, 0)

        def QUARTA(self):
            return self.getToken(DateAndTimeParser.QUARTA, 0)

        def QUINTA(self):
            return self.getToken(DateAndTimeParser.QUINTA, 0)

        def ULTIMA(self):
            return self.getToken(DateAndTimeParser.ULTIMA, 0)

        def maybesettimana(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybesettimanaContext,0)


        def week_number(self):
            return self.getTypedRuleContext(DateAndTimeParser.Week_numberContext,0)


        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def PRECEDENTE(self):
            return self.getToken(DateAndTimeParser.PRECEDENTE, 0)

        def MATTINA(self):
            return self.getToken(DateAndTimeParser.MATTINA, 0)

        def day_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Day_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Day_relativeContext,i)


        def date(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.DateContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.DateContext,i)


        def SLASH(self):
            return self.getToken(DateAndTimeParser.SLASH, 0)

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def ULTIMI(self):
            return self.getToken(DateAndTimeParser.ULTIMI, 0)

        def timecomponents(self):
            return self.getTypedRuleContext(DateAndTimeParser.TimecomponentsContext,0)


        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def ENTRO(self):
            return self.getToken(DateAndTimeParser.ENTRO, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def QUESTI(self):
            return self.getToken(DateAndTimeParser.QUESTI, 0)

        def PRECEDENTI(self):
            return self.getToken(DateAndTimeParser.PRECEDENTI, 0)

        def QUEST(self):
            return self.getToken(DateAndTimeParser.QUEST, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def MINUTO(self):
            return self.getToken(DateAndTimeParser.MINUTO, 0)

        def DALLE(self):
            return self.getToken(DateAndTimeParser.DALLE, 0)

        def ALLE(self):
            return self.getToken(DateAndTimeParser.ALLE, 0)

        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.NumberContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.NumberContext,i)


        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def LE(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.LE)
            else:
                return self.getToken(DateAndTimeParser.LE, i)

        def E(self):
            return self.getToken(DateAndTimeParser.E, 0)

        def POMERIGGIO(self):
            return self.getToken(DateAndTimeParser.POMERIGGIO, 0)

        def STASERA(self):
            return self.getToken(DateAndTimeParser.STASERA, 0)

        def STANOTTE(self):
            return self.getToken(DateAndTimeParser.STANOTTE, 0)

        def TUTTI(self):
            return self.getToken(DateAndTimeParser.TUTTI, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def OGNI(self):
            return self.getToken(DateAndTimeParser.OGNI, 0)

        def time_relative(self):
            return self.getTypedRuleContext(DateAndTimeParser.Time_relativeContext,0)


        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def A(self):
            return self.getToken(DateAndTimeParser.A, 0)

        def MEZZOGIORNO(self):
            return self.getToken(DateAndTimeParser.MEZZOGIORNO, 0)

        def MENO(self):
            return self.getToken(DateAndTimeParser.MENO, 0)

        def LUNEDI(self):
            return self.getToken(DateAndTimeParser.LUNEDI, 0)

        def MARTEDI(self):
            return self.getToken(DateAndTimeParser.MARTEDI, 0)

        def MERCOLEDI(self):
            return self.getToken(DateAndTimeParser.MERCOLEDI, 0)

        def GIOVEDI(self):
            return self.getToken(DateAndTimeParser.GIOVEDI, 0)

        def VENERDI(self):
            return self.getToken(DateAndTimeParser.VENERDI, 0)

        def SABATO(self):
            return self.getToken(DateAndTimeParser.SABATO, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def SABATI(self):
            return self.getToken(DateAndTimeParser.SABATI, 0)

        def DOMENICHE(self):
            return self.getToken(DateAndTimeParser.DOMENICHE, 0)

        def season_relative(self):
            return self.getTypedRuleContext(DateAndTimeParser.Season_relativeContext,0)


        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def week_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Week_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Week_relativeContext,i)


        def month_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Month_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Month_relativeContext,i)


        def year_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Year_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Year_relativeContext,i)


        def duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.DurationContext,0)


        def rel_time_start(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Rel_time_startContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Rel_time_startContext,i)


        def date_repeat(self):
            return self.getTypedRuleContext(DateAndTimeParser.Date_repeatContext,0)


        def DAL(self):
            return self.getToken(DateAndTimeParser.DAL, 0)

        def AL(self):
            return self.getToken(DateAndTimeParser.AL, 0)

        def time_start(self):
            return self.getTypedRuleContext(DateAndTimeParser.Time_startContext,0)


        def year(self):
            return self.getTypedRuleContext(DateAndTimeParser.YearContext,0)


        def holiday(self):
            return self.getTypedRuleContext(DateAndTimeParser.HolidayContext,0)


        def season(self):
            return self.getTypedRuleContext(DateAndTimeParser.SeasonContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date_or_time

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate_or_time(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate_or_time(self)




    def date_or_time(self):

        localctx = DateAndTimeParser.Date_or_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_date_or_time)

        result = dict()
            
        try:
            self.state = 506
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 80
                localctx._day_duration = self.day_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._day_duration.s;
                result.append(result);
                        
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 83
                localctx._week_duration = self.week_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._week_duration.s;
                result.append(result);
                        
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 86
                localctx._month_duration = self.month_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._month_duration.s;
                result.append(result);
                        
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 89
                localctx._year_duration = self.year_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._year_duration.s;
                result.append(result);
                        
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 92
                self.match(DateAndTimeParser.PRIMO)
                self.state = 93
                localctx._day_absolute = self.day_absolute()
                self.state = 94
                self.match(DateAndTimeParser.DI)
                self.state = 95
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                       
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 98
                self.match(DateAndTimeParser.SECONDO)
                self.state = 99
                localctx._day_absolute = self.day_absolute()
                self.state = 100
                self.match(DateAndTimeParser.DI)
                self.state = 101
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:2$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                          
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 104
                self.match(DateAndTimeParser.TERZO)
                self.state = 105
                localctx._day_absolute = self.day_absolute()
                self.state = 106
                self.match(DateAndTimeParser.DI)
                self.state = 107
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:3$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                          
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 110
                self.match(DateAndTimeParser.QUARTO)
                self.state = 111
                localctx._day_absolute = self.day_absolute()
                self.state = 112
                self.match(DateAndTimeParser.DI)
                self.state = 113
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:4$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                          
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 116
                self.match(DateAndTimeParser.QUINTO)
                self.state = 117
                localctx._day_absolute = self.day_absolute()
                self.state = 118
                self.match(DateAndTimeParser.DI)
                self.state = 119
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:5$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                          
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 122
                self.match(DateAndTimeParser.ULTIMO)
                self.state = 123
                localctx._day_absolute = self.day_absolute()
                self.state = 124
                self.match(DateAndTimeParser.DI)
                self.state = 125
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                          
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 128
                self.match(DateAndTimeParser.PRIMA)
                self.state = 129
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 130
                self.match(DateAndTimeParser.DI)
                self.state = 131
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 134
                self.match(DateAndTimeParser.SECONDA)
                self.state = 135
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 136
                self.match(DateAndTimeParser.DI)
                self.state = 137
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:2$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 140
                self.match(DateAndTimeParser.TERZA)
                self.state = 141
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 142
                self.match(DateAndTimeParser.DI)
                self.state = 143
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:3$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 146
                self.match(DateAndTimeParser.QUARTA)
                self.state = 147
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 148
                self.match(DateAndTimeParser.DI)
                self.state = 149
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:4$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 152
                self.match(DateAndTimeParser.QUINTA)
                self.state = 153
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 154
                self.match(DateAndTimeParser.DI)
                self.state = 155
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:5$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 158
                self.match(DateAndTimeParser.ULTIMA)
                self.state = 159
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 160
                self.match(DateAndTimeParser.DI)
                self.state = 161
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                        
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 164
                self.match(DateAndTimeParser.PRIMA)
                self.state = 165
                self.maybesettimana()
                self.state = 166
                self.match(DateAndTimeParser.DI)
                self.state = 167
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                       
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 170
                self.match(DateAndTimeParser.SECONDA)
                self.state = 171
                self.maybesettimana()
                self.state = 172
                self.match(DateAndTimeParser.DI)
                self.state = 173
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:2$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                        
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 176
                self.match(DateAndTimeParser.TERZA)
                self.state = 177
                self.maybesettimana()
                self.state = 178
                self.match(DateAndTimeParser.DI)
                self.state = 179
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:3$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                          
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 182
                self.match(DateAndTimeParser.QUARTA)
                self.state = 183
                self.maybesettimana()
                self.state = 184
                self.match(DateAndTimeParser.DI)
                self.state = 185
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:4$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                          
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 188
                self.match(DateAndTimeParser.QUINTA)
                self.state = 189
                self.maybesettimana()
                self.state = 190
                self.match(DateAndTimeParser.DI)
                self.state = 191
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:5$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                          
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 194
                self.match(DateAndTimeParser.ULTIMA)
                self.state = 195
                self.maybesettimana()
                self.state = 196
                self.match(DateAndTimeParser.DI)
                self.state = 197
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                result.append(result);
                          
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 200
                localctx._week_number = self.week_number()

                result['type'] = DateEnum.TIMEX_WEEK;
                result['value'] = "%d" % (localctx._week_number.i);
                result.append(result);
                        
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 203
                self.match(DateAndTimeParser.SCORSO)
                self.state = 204
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                        
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 207
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 208
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                       
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 211
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 212
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                       
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 214
                self.match(DateAndTimeParser.QUESTO)
                self.state = 215
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:0$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                       
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 218
                localctx._day_absolute = self.day_absolute()
                self.state = 219
                self.match(DateAndTimeParser.PROSSIMO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                        
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 222
                localctx._day_absolute = self.day_absolute()
                self.state = 223
                self.match(DateAndTimeParser.SCORSO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                       
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 226
                localctx._day_absolute = self.day_absolute()
                self.state = 227
                self.match(DateAndTimeParser.PRECEDENTE)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                       
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 230
                localctx._day_absolute = self.day_absolute()
                self.state = 231
                self.match(DateAndTimeParser.MATTINA)

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$";
                result.append(result);
                     
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 234
                localctx._day_relative = self.day_relative()
                self.state = 235
                self.match(DateAndTimeParser.MATTINA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._day_relative.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$";
                result.append(result);
                     
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 238
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 239
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                result.append(result);
                        
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 242
                self.match(DateAndTimeParser.QUESTO)
                self.state = 243
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:0$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                result.append(result);
                       
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 246
                self.match(DateAndTimeParser.SCORSO)
                self.state = 247
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                result.append(result);
                       
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 250
                localctx._month = self.month()
                self.state = 251
                self.match(DateAndTimeParser.PROSSIMO)

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                result.append(result);
                        
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 254
                localctx._month = self.month()
                self.state = 255
                self.match(DateAndTimeParser.SCORSO)

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:-1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                result.append(result);
                        
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 258
                localctx._date = self.date()
                self.state = 259
                self.match(DateAndTimeParser.SLASH)
                self.state = 260
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = (None if localctx._YEARNUM is None else localctx._YEARNUM.text);
                result.append(result);
                    
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 263
                localctx._date = self.date()
                self.state = 264
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = (None if localctx._YEARNUM is None else localctx._YEARNUM.text);
                result.append(result);
                    
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 267
                self.match(DateAndTimeParser.ULTIMI)
                self.state = 268
                localctx._timecomponents = self.timecomponents()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "-:" + localctx._timecomponents.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                       
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 271
                self.match(DateAndTimeParser.SCORSI)
                self.state = 272
                localctx._timecomponents = self.timecomponents()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "-:" + localctx._timecomponents.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                       
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 275
                self.match(DateAndTimeParser.ENTRO)
                self.state = 276
                localctx._timecomponents = self.timecomponents()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                       
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 279
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 280
                localctx._timecomponents = self.timecomponents()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                       
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 283
                self.match(DateAndTimeParser.QUESTI)
                self.state = 284
                localctx._timecomponents = self.timecomponents()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                       
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 287
                localctx._timecomponents = self.timecomponents()
                self.state = 288
                self.match(DateAndTimeParser.PRECEDENTI)

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "-:" + localctx._timecomponents.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._timecomponents.s;
                result.append(result);
                        
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 291
                self.match(DateAndTimeParser.QUEST)
                self.state = 292
                self.match(DateAndTimeParser.ORA)

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = "01:_:_" ;
                result.append(result);
                       
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 294
                self.match(DateAndTimeParser.QUESTO)
                self.state = 295
                self.match(DateAndTimeParser.MINUTO)

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = "_:01:_" ;
                result.append(result);
                       
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 297
                self.match(DateAndTimeParser.QUESTO)
                self.state = 298
                self.match(DateAndTimeParser.SECONDO)

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = "$now$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = "_:_:01" ;
                result.append(result);
                       
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 300
                self.match(DateAndTimeParser.DALLE)
                self.state = 301
                localctx.a = self.number()
                self.state = 302
                self.match(DateAndTimeParser.ALLE)
                self.state = 303
                localctx.b = self.number()

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = (String.format("%02d",localctx.a.i) + ":_:_") ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = (String.format("%02d",(localctx.b.i-localctx.a.i)) + ":_:_") ;
                result.append(result);
                       
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 306
                self.match(DateAndTimeParser.FRA)
                self.state = 307
                self.match(DateAndTimeParser.LE)
                self.state = 308
                localctx.a = self.number()
                self.state = 309
                self.match(DateAndTimeParser.E)
                self.state = 310
                self.match(DateAndTimeParser.LE)
                self.state = 311
                localctx.b = self.number()

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = (String.format("%02d",localctx.a.i) + ":_:_") ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = (String.format("%02d",(localctx.b.i-localctx.a.i)) + ":_:_") ;
                result.append(result);
                       
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 314
                self.match(DateAndTimeParser.QUESTO)
                self.state = 315
                self.match(DateAndTimeParser.POMERIGGIO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$today$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$afternoon$" ;
                result.append(result);
                      
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 317
                self.match(DateAndTimeParser.STASERA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$today$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$evening$" ;
                result.append(result);
                      
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 319
                self.match(DateAndTimeParser.STANOTTE)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$today$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$night$" ;
                result.append(result);
                     
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 321
                self.match(DateAndTimeParser.TUTTI)
                self.state = 322
                self.match(DateAndTimeParser.I)
                self.state = 323
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$weekly$" ;
                result.append(result);
                       
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 326
                self.match(DateAndTimeParser.OGNI)
                self.state = 327
                localctx._time_relative = self.time_relative()

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = localctx._time_relative.s ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$daily$" ;
                result.append(result);
                       
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 330
                self.match(DateAndTimeParser.OGNI)
                self.state = 331
                localctx._day_absolute = self.day_absolute()
                self.state = 332
                self.match(DateAndTimeParser.MATTINA)

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$weekly$" ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$" ;
                result.append(result);
                       
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 335
                self.match(DateAndTimeParser.OGNI)
                self.state = 336
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$weekly$" ;
                result.append(result);
                       
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 339
                self.match(DateAndTimeParser.UN)
                self.state = 340
                self.match(DateAndTimeParser.QUARTO)
                self.state = 341
                self.match(DateAndTimeParser.A)
                self.state = 342
                self.match(DateAndTimeParser.MEZZOGIORNO)

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "11:45:_" ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$" ;
                result.append(result);
                       
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 344
                self.match(DateAndTimeParser.MEZZOGIORNO)
                self.state = 345
                self.match(DateAndTimeParser.MENO)
                self.state = 346
                self.match(DateAndTimeParser.UN)
                self.state = 347
                self.match(DateAndTimeParser.QUARTO)

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "11:45:_" ;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$" ;
                result.append(result);
                       
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 349
                self.match(DateAndTimeParser.FRA)
                self.state = 350
                self.match(DateAndTimeParser.UN)
                self.state = 351
                self.match(DateAndTimeParser.LUNEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$monday$";
                result.append(result);
                      
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 353
                self.match(DateAndTimeParser.FRA)
                self.state = 354
                self.match(DateAndTimeParser.UN)
                self.state = 355
                self.match(DateAndTimeParser.MARTEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$tuesday$";
                result.append(result);
                      
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 357
                self.match(DateAndTimeParser.FRA)
                self.state = 358
                self.match(DateAndTimeParser.UN)
                self.state = 359
                self.match(DateAndTimeParser.MERCOLEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$wednesday$";
                result.append(result);
                      
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 361
                self.match(DateAndTimeParser.FRA)
                self.state = 362
                self.match(DateAndTimeParser.UN)
                self.state = 363
                self.match(DateAndTimeParser.GIOVEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$thursday$";
                result.append(result);
                      
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 365
                self.match(DateAndTimeParser.FRA)
                self.state = 366
                self.match(DateAndTimeParser.UN)
                self.state = 367
                self.match(DateAndTimeParser.VENERDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$friday$";
                result.append(result);
                      
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 369
                self.match(DateAndTimeParser.FRA)
                self.state = 370
                self.match(DateAndTimeParser.UN)
                self.state = 371
                self.match(DateAndTimeParser.SABATO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                result.append(result);
                      
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 373
                self.match(DateAndTimeParser.FRA)
                self.state = 374
                self.match(DateAndTimeParser.UNA)
                self.state = 375
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                      
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 377
                self.match(DateAndTimeParser.FRA)
                self.state = 378
                localctx._number = self.number()
                self.state = 379
                self.match(DateAndTimeParser.LUNEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$monday$";
                result.append(result);
                      
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 382
                self.match(DateAndTimeParser.FRA)
                self.state = 383
                localctx._number = self.number()
                self.state = 384
                self.match(DateAndTimeParser.MARTEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$tuesday$";
                result.append(result);
                      
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 387
                self.match(DateAndTimeParser.FRA)
                self.state = 388
                localctx._number = self.number()
                self.state = 389
                self.match(DateAndTimeParser.MERCOLEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$wednesday$";
                result.append(result);
                      
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 392
                self.match(DateAndTimeParser.FRA)
                self.state = 393
                localctx._number = self.number()
                self.state = 394
                self.match(DateAndTimeParser.GIOVEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$thursday$";
                result.append(result);
                      
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 397
                self.match(DateAndTimeParser.FRA)
                self.state = 398
                localctx._number = self.number()
                self.state = 399
                self.match(DateAndTimeParser.VENERDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$friday$";
                result.append(result);
                      
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 402
                self.match(DateAndTimeParser.FRA)
                self.state = 403
                localctx._number = self.number()
                self.state = 404
                self.match(DateAndTimeParser.SABATI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                result.append(result);
                      
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 407
                self.match(DateAndTimeParser.FRA)
                self.state = 408
                localctx._number = self.number()
                self.state = 409
                self.match(DateAndTimeParser.SABATO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                result.append(result);
                      
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 412
                self.match(DateAndTimeParser.FRA)
                self.state = 413
                localctx._number = self.number()
                self.state = 414
                self.match(DateAndTimeParser.DOMENICHE)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                      
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 417
                self.match(DateAndTimeParser.FRA)
                self.state = 418
                localctx._number = self.number()
                self.state = 419
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + localctx._number.i + "$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                      
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 422
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 423
                self.match(DateAndTimeParser.PROSSIMA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                result.append(result);
                          
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 425
                localctx._season_relative = self.season_relative()

                result['type'] = DateEnum.TIMEX_SEASON;
                result['value'] = localctx._season_relative.s;
                result.append(result);
                          
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 428
                self.match(DateAndTimeParser.DA)
                self.state = 429
                localctx.x = self.day_relative()
                self.state = 430
                self.match(DateAndTimeParser.A)
                self.state = 431
                localctx.y = self.day_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.x.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.y.s;
                result.append(result);
                            
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 434
                self.match(DateAndTimeParser.DA)
                self.state = 435
                localctx.m = self.week_relative()
                self.state = 436
                self.match(DateAndTimeParser.A)
                self.state = 437
                localctx.n = self.week_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.m.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.n.s;
                result.append(result);
                            
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 440
                self.match(DateAndTimeParser.DA)
                self.state = 441
                localctx.o = self.month_relative()
                self.state = 442
                self.match(DateAndTimeParser.A)
                self.state = 443
                localctx.p = self.month_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.o.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.p.s;
                result.append(result);
                            
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 446
                self.match(DateAndTimeParser.DA)
                self.state = 447
                localctx.q = self.year_relative()
                self.state = 448
                self.match(DateAndTimeParser.A)
                self.state = 449
                localctx.r = self.year_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.q.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.r.s;
                result.append(result);
                            
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 452
                localctx._day_relative = self.day_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._day_relative.s;
                result.append(result);
                          
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 455
                localctx._week_relative = self.week_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._week_relative.s;
                result.append(result);
                          
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 458
                localctx._month_relative = self.month_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._month_relative.s;
                result.append(result);
                            
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 461
                localctx._year_relative = self.year_relative()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = localctx._year_relative.s;
                result.append(result);
                            
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 464
                localctx._duration = self.duration()

                result['type'] = DateEnum.TIMEX_DURATION;
                result['value'] = localctx._duration.s;
                result.append(result);
                      
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 467
                self.match(DateAndTimeParser.DA)
                self.state = 468
                localctx.s = self.rel_time_start()
                self.state = 469
                self.match(DateAndTimeParser.A)
                self.state = 470
                localctx.t = self.rel_time_start()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = localctx.s.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_TIME;
                result['value'] = localctx.t.s;
                result.append(result);
                      
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 473
                localctx._rel_time_start = self.rel_time_start()

                result['type'] = DateEnum.TIMEX_REL_START_TIME;
                result['value'] = localctx._rel_time_start.s;
                result.append(result);
                      
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 476
                localctx._time_relative = self.time_relative()

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = localctx._time_relative.s;
                result.append(result);
                      
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 479
                localctx._date_repeat = self.date_repeat()

                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = localctx._date_repeat.s;
                result.append(result);
                      
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 482
                self.match(DateAndTimeParser.DAL)
                self.state = 483
                localctx.u = self.date()
                self.state = 484
                self.match(DateAndTimeParser.AL)
                self.state = 485
                localctx.v = self.date()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.u.s;
                result.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.v.s;
                result.append(result);
                            
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 488
                localctx._date = self.date()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                result.append(result);
                      
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 491
                localctx._time_start = self.time_start()

                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = localctx._time_start.s;
                result.append(result);
                  
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 494
                localctx._year = self.year()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = localctx._year.s;
                result.append(result);
                      
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 497
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                result.append(result);
                      
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 500
                localctx._holiday = self.holiday()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._holiday.s;
                result.append(result);
                      
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 503
                localctx._season = self.season()

                result['type'] = DateEnum.TIMEX_SEASON;
                result['value'] = localctx._season.s;
                result.append(result);
                      
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_duration(self)




    def day_duration(self):

        localctx = DateAndTimeParser.Day_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_day_duration)
        try:
            self.state = 649
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(DateAndTimeParser.DURANTE)
                self.state = 509
                self.match(DateAndTimeParser.I)
                self.state = 510
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 511
                localctx._number = self.number()
                self.state = 512
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.match(DateAndTimeParser.DURANTE)
                self.state = 516
                self.match(DateAndTimeParser.I)
                self.state = 517
                localctx._number = self.number()
                self.state = 518
                self.match(DateAndTimeParser.GIORNI)
                self.state = 519
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(DateAndTimeParser.DURANTE)
                self.state = 523
                self.match(DateAndTimeParser.I)
                self.state = 524
                localctx._number = self.number()
                self.state = 525
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 526
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 529
                self.match(DateAndTimeParser.NEL)
                self.state = 530
                self.match(DateAndTimeParser.CORSO)
                self.state = 531
                self.match(DateAndTimeParser.DEI)
                self.state = 532
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 533
                localctx._number = self.number()
                self.state = 534
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 537
                self.match(DateAndTimeParser.NEL)
                self.state = 538
                self.match(DateAndTimeParser.CORSO)
                self.state = 539
                self.match(DateAndTimeParser.DEI)
                self.state = 540
                localctx._number = self.number()
                self.state = 541
                self.match(DateAndTimeParser.GIORNI)
                self.state = 542
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 545
                self.match(DateAndTimeParser.NEL)
                self.state = 546
                self.match(DateAndTimeParser.CORSO)
                self.state = 547
                self.match(DateAndTimeParser.DEI)
                self.state = 548
                localctx._number = self.number()
                self.state = 549
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 550
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 553
                self.match(DateAndTimeParser.PER)
                self.state = 554
                self.match(DateAndTimeParser.I)
                self.state = 555
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 556
                localctx._number = self.number()
                self.state = 557
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 560
                self.match(DateAndTimeParser.PER)
                self.state = 561
                self.match(DateAndTimeParser.I)
                self.state = 562
                localctx._number = self.number()
                self.state = 563
                self.match(DateAndTimeParser.GIORNI)
                self.state = 564
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 567
                self.match(DateAndTimeParser.PER)
                self.state = 568
                self.match(DateAndTimeParser.I)
                self.state = 569
                localctx._number = self.number()
                self.state = 570
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 571
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 574
                self.match(DateAndTimeParser.DURANTE)
                self.state = 575
                self.match(DateAndTimeParser.GLI)
                self.state = 576
                self.match(DateAndTimeParser.SCORSI)
                self.state = 577
                localctx._number = self.number()
                self.state = 578
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 581
                self.match(DateAndTimeParser.DURANTE)
                self.state = 582
                self.match(DateAndTimeParser.I)
                self.state = 583
                localctx._number = self.number()
                self.state = 584
                self.match(DateAndTimeParser.GIORNI)
                self.state = 585
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 588
                self.match(DateAndTimeParser.DURANTE)
                self.state = 589
                self.match(DateAndTimeParser.I)
                self.state = 590
                localctx._number = self.number()
                self.state = 591
                self.match(DateAndTimeParser.SCORSI)
                self.state = 592
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 595
                self.match(DateAndTimeParser.DURANTE)
                self.state = 596
                self.match(DateAndTimeParser.I)
                self.state = 597
                self.match(DateAndTimeParser.PASSATI)
                self.state = 598
                localctx._number = self.number()
                self.state = 599
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 602
                self.match(DateAndTimeParser.DURANTE)
                self.state = 603
                self.match(DateAndTimeParser.I)
                self.state = 604
                localctx._number = self.number()
                self.state = 605
                self.match(DateAndTimeParser.GIORNI)
                self.state = 606
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 609
                self.match(DateAndTimeParser.NEL)
                self.state = 610
                self.match(DateAndTimeParser.CORSO)
                self.state = 611
                self.match(DateAndTimeParser.DEGLI)
                self.state = 612
                self.match(DateAndTimeParser.SCORSI)
                self.state = 613
                localctx._number = self.number()
                self.state = 614
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 617
                self.match(DateAndTimeParser.NEL)
                self.state = 618
                self.match(DateAndTimeParser.CORSO)
                self.state = 619
                self.match(DateAndTimeParser.DEI)
                self.state = 620
                localctx._number = self.number()
                self.state = 621
                self.match(DateAndTimeParser.GIORNI)
                self.state = 622
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 625
                self.match(DateAndTimeParser.NEL)
                self.state = 626
                self.match(DateAndTimeParser.CORSO)
                self.state = 627
                self.match(DateAndTimeParser.DEI)
                self.state = 628
                localctx._number = self.number()
                self.state = 629
                self.match(DateAndTimeParser.SCORSI)
                self.state = 630
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 633
                self.match(DateAndTimeParser.NEL)
                self.state = 634
                self.match(DateAndTimeParser.CORSO)
                self.state = 635
                self.match(DateAndTimeParser.DEI)
                self.state = 636
                localctx._number = self.number()
                self.state = 637
                self.match(DateAndTimeParser.GIORNI)
                self.state = 638
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 641
                self.match(DateAndTimeParser.NEL)
                self.state = 642
                self.match(DateAndTimeParser.CORSO)
                self.state = 643
                self.match(DateAndTimeParser.DEI)
                self.state = 644
                self.match(DateAndTimeParser.PASSATI)
                self.state = 645
                localctx._number = self.number()
                self.state = 646
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def LA(self):
            return self.getToken(DateAndTimeParser.LA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def LE(self):
            return self.getToken(DateAndTimeParser.LE, 0)

        def PROSSIME(self):
            return self.getToken(DateAndTimeParser.PROSSIME, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DELLA(self):
            return self.getToken(DateAndTimeParser.DELLA, 0)

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def DELLE(self):
            return self.getToken(DateAndTimeParser.DELLE, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def SCORSE(self):
            return self.getToken(DateAndTimeParser.SCORSE, 0)

        def PASSATE(self):
            return self.getToken(DateAndTimeParser.PASSATE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_duration(self)




    def week_duration(self):

        localctx = DateAndTimeParser.Week_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_week_duration)
        try:
            self.state = 852
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(DateAndTimeParser.DURANTE)
                self.state = 652
                self.match(DateAndTimeParser.LA)
                self.state = 653
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 654
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(DateAndTimeParser.DURANTE)
                self.state = 657
                self.match(DateAndTimeParser.LA)
                self.state = 658
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 659
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.match(DateAndTimeParser.DURANTE)
                self.state = 662
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 663
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.match(DateAndTimeParser.DURANTE)
                self.state = 666
                self.match(DateAndTimeParser.LE)
                self.state = 667
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 668
                localctx._number = self.number()
                self.state = 669
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 672
                self.match(DateAndTimeParser.DURANTE)
                self.state = 673
                self.match(DateAndTimeParser.LE)
                self.state = 674
                localctx._number = self.number()
                self.state = 675
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 676
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 679
                self.match(DateAndTimeParser.DURANTE)
                self.state = 680
                self.match(DateAndTimeParser.LE)
                self.state = 681
                localctx._number = self.number()
                self.state = 682
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 683
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 686
                self.match(DateAndTimeParser.NEL)
                self.state = 687
                self.match(DateAndTimeParser.CORSO)
                self.state = 688
                self.match(DateAndTimeParser.DELLA)
                self.state = 689
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 690
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 692
                self.match(DateAndTimeParser.NEL)
                self.state = 693
                self.match(DateAndTimeParser.CORSO)
                self.state = 694
                self.match(DateAndTimeParser.DELLA)
                self.state = 695
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 696
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 698
                self.match(DateAndTimeParser.NEL)
                self.state = 699
                self.match(DateAndTimeParser.CORSO)
                self.state = 700
                self.match(DateAndTimeParser.DI)
                self.state = 701
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 702
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 704
                self.match(DateAndTimeParser.NEL)
                self.state = 705
                self.match(DateAndTimeParser.CORSO)
                self.state = 706
                self.match(DateAndTimeParser.DELLE)
                self.state = 707
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 708
                localctx._number = self.number()
                self.state = 709
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 712
                self.match(DateAndTimeParser.NEL)
                self.state = 713
                self.match(DateAndTimeParser.CORSO)
                self.state = 714
                self.match(DateAndTimeParser.DELLE)
                self.state = 715
                localctx._number = self.number()
                self.state = 716
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 717
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 720
                self.match(DateAndTimeParser.NEL)
                self.state = 721
                self.match(DateAndTimeParser.CORSO)
                self.state = 722
                self.match(DateAndTimeParser.DELLE)
                self.state = 723
                localctx._number = self.number()
                self.state = 724
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 725
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 728
                self.match(DateAndTimeParser.PER)
                self.state = 729
                self.match(DateAndTimeParser.LA)
                self.state = 730
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 731
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 733
                self.match(DateAndTimeParser.PER)
                self.state = 734
                self.match(DateAndTimeParser.LA)
                self.state = 735
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 736
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 738
                self.match(DateAndTimeParser.PER)
                self.state = 739
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 740
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 742
                self.match(DateAndTimeParser.PER)
                self.state = 743
                self.match(DateAndTimeParser.LE)
                self.state = 744
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 745
                localctx._number = self.number()
                self.state = 746
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 749
                self.match(DateAndTimeParser.PER)
                self.state = 750
                self.match(DateAndTimeParser.LE)
                self.state = 751
                localctx._number = self.number()
                self.state = 752
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 753
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 756
                self.match(DateAndTimeParser.PER)
                self.state = 757
                self.match(DateAndTimeParser.LE)
                self.state = 758
                localctx._number = self.number()
                self.state = 759
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 760
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 763
                self.match(DateAndTimeParser.DURANTE)
                self.state = 764
                self.match(DateAndTimeParser.LA)
                self.state = 765
                self.match(DateAndTimeParser.SCORSA)
                self.state = 766
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 768
                self.match(DateAndTimeParser.DURANTE)
                self.state = 769
                self.match(DateAndTimeParser.LA)
                self.state = 770
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 771
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 773
                self.match(DateAndTimeParser.DURANTE)
                self.state = 774
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 775
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 777
                self.match(DateAndTimeParser.DURANTE)
                self.state = 778
                self.match(DateAndTimeParser.LE)
                self.state = 779
                self.match(DateAndTimeParser.SCORSE)
                self.state = 780
                localctx._number = self.number()
                self.state = 781
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 784
                self.match(DateAndTimeParser.DURANTE)
                self.state = 785
                self.match(DateAndTimeParser.LE)
                self.state = 786
                localctx._number = self.number()
                self.state = 787
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 788
                self.match(DateAndTimeParser.SCORSE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 791
                self.match(DateAndTimeParser.DURANTE)
                self.state = 792
                self.match(DateAndTimeParser.LE)
                self.state = 793
                localctx._number = self.number()
                self.state = 794
                self.match(DateAndTimeParser.SCORSE)
                self.state = 795
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 798
                self.match(DateAndTimeParser.DURANTE)
                self.state = 799
                self.match(DateAndTimeParser.LE)
                self.state = 800
                localctx._number = self.number()
                self.state = 801
                self.match(DateAndTimeParser.PASSATE)
                self.state = 802
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 805
                self.match(DateAndTimeParser.DURANTE)
                self.state = 806
                self.match(DateAndTimeParser.LE)
                self.state = 807
                localctx._number = self.number()
                self.state = 808
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 809
                self.match(DateAndTimeParser.PASSATE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 812
                self.match(DateAndTimeParser.NEL)
                self.state = 813
                self.match(DateAndTimeParser.CORSO)
                self.state = 814
                self.match(DateAndTimeParser.DELLE)
                self.state = 815
                self.match(DateAndTimeParser.SCORSE)
                self.state = 816
                localctx._number = self.number()
                self.state = 817
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 820
                self.match(DateAndTimeParser.NEL)
                self.state = 821
                self.match(DateAndTimeParser.CORSO)
                self.state = 822
                self.match(DateAndTimeParser.DELLE)
                self.state = 823
                localctx._number = self.number()
                self.state = 824
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 825
                self.match(DateAndTimeParser.SCORSE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 828
                self.match(DateAndTimeParser.NEL)
                self.state = 829
                self.match(DateAndTimeParser.CORSO)
                self.state = 830
                self.match(DateAndTimeParser.DELLE)
                self.state = 831
                localctx._number = self.number()
                self.state = 832
                self.match(DateAndTimeParser.SCORSE)
                self.state = 833
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 836
                self.match(DateAndTimeParser.NEL)
                self.state = 837
                self.match(DateAndTimeParser.CORSO)
                self.state = 838
                self.match(DateAndTimeParser.DELLE)
                self.state = 839
                localctx._number = self.number()
                self.state = 840
                self.match(DateAndTimeParser.PASSATE)
                self.state = 841
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 844
                self.match(DateAndTimeParser.NEL)
                self.state = 845
                self.match(DateAndTimeParser.CORSO)
                self.state = 846
                self.match(DateAndTimeParser.DELLE)
                self.state = 847
                localctx._number = self.number()
                self.state = 848
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 849
                self.match(DateAndTimeParser.PASSATE)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Month_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Month_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def LO(self):
            return self.getToken(DateAndTimeParser.LO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth_duration(self)




    def month_duration(self):

        localctx = DateAndTimeParser.Month_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_month_duration)
        try:
            self.state = 1037
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(DateAndTimeParser.DURANTE)
                self.state = 855
                self.match(DateAndTimeParser.IL)
                self.state = 856
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 857
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.match(DateAndTimeParser.DURANTE)
                self.state = 860
                self.match(DateAndTimeParser.IL)
                self.state = 861
                self.match(DateAndTimeParser.MESE)
                self.state = 862
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 864
                self.match(DateAndTimeParser.DURANTE)
                self.state = 865
                self.match(DateAndTimeParser.I)
                self.state = 866
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 867
                localctx._number = self.number()
                self.state = 868
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.match(DateAndTimeParser.DURANTE)
                self.state = 872
                self.match(DateAndTimeParser.I)
                self.state = 873
                localctx._number = self.number()
                self.state = 874
                self.match(DateAndTimeParser.MESI)
                self.state = 875
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 878
                self.match(DateAndTimeParser.DURANTE)
                self.state = 879
                self.match(DateAndTimeParser.I)
                self.state = 880
                localctx._number = self.number()
                self.state = 881
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 882
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 885
                self.match(DateAndTimeParser.NEL)
                self.state = 886
                self.match(DateAndTimeParser.CORSO)
                self.state = 887
                self.match(DateAndTimeParser.DEL)
                self.state = 888
                self.match(DateAndTimeParser.MESE)
                self.state = 889
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 891
                self.match(DateAndTimeParser.NEL)
                self.state = 892
                self.match(DateAndTimeParser.CORSO)
                self.state = 893
                self.match(DateAndTimeParser.DEL)
                self.state = 894
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 895
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 897
                self.match(DateAndTimeParser.NEL)
                self.state = 898
                self.match(DateAndTimeParser.CORSO)
                self.state = 899
                self.match(DateAndTimeParser.DEI)
                self.state = 900
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 901
                localctx._number = self.number()
                self.state = 902
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 905
                self.match(DateAndTimeParser.NEL)
                self.state = 906
                self.match(DateAndTimeParser.CORSO)
                self.state = 907
                self.match(DateAndTimeParser.DEI)
                self.state = 908
                localctx._number = self.number()
                self.state = 909
                self.match(DateAndTimeParser.MESI)
                self.state = 910
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 913
                self.match(DateAndTimeParser.NEL)
                self.state = 914
                self.match(DateAndTimeParser.CORSO)
                self.state = 915
                self.match(DateAndTimeParser.DEI)
                self.state = 916
                localctx._number = self.number()
                self.state = 917
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 918
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 921
                self.match(DateAndTimeParser.PER)
                self.state = 922
                self.match(DateAndTimeParser.IL)
                self.state = 923
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 924
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 926
                self.match(DateAndTimeParser.PER)
                self.state = 927
                self.match(DateAndTimeParser.IL)
                self.state = 928
                self.match(DateAndTimeParser.MESE)
                self.state = 929
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 931
                self.match(DateAndTimeParser.PER)
                self.state = 932
                self.match(DateAndTimeParser.I)
                self.state = 933
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 934
                localctx._number = self.number()
                self.state = 935
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 938
                self.match(DateAndTimeParser.PER)
                self.state = 939
                self.match(DateAndTimeParser.I)
                self.state = 940
                localctx._number = self.number()
                self.state = 941
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 942
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 945
                self.match(DateAndTimeParser.PER)
                self.state = 946
                self.match(DateAndTimeParser.I)
                self.state = 947
                localctx._number = self.number()
                self.state = 948
                self.match(DateAndTimeParser.MESI)
                self.state = 949
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 952
                self.match(DateAndTimeParser.DURANTE)
                self.state = 953
                self.match(DateAndTimeParser.LO)
                self.state = 954
                self.match(DateAndTimeParser.SCORSO)
                self.state = 955
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 957
                self.match(DateAndTimeParser.DURANTE)
                self.state = 958
                self.match(DateAndTimeParser.IL)
                self.state = 959
                self.match(DateAndTimeParser.MESE)
                self.state = 960
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 962
                self.match(DateAndTimeParser.DURANTE)
                self.state = 963
                self.match(DateAndTimeParser.GLI)
                self.state = 964
                self.match(DateAndTimeParser.SCORSI)
                self.state = 965
                localctx._number = self.number()
                self.state = 966
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 969
                self.match(DateAndTimeParser.DURANTE)
                self.state = 970
                self.match(DateAndTimeParser.I)
                self.state = 971
                localctx._number = self.number()
                self.state = 972
                self.match(DateAndTimeParser.MESI)
                self.state = 973
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 976
                self.match(DateAndTimeParser.DURANTE)
                self.state = 977
                self.match(DateAndTimeParser.I)
                self.state = 978
                localctx._number = self.number()
                self.state = 979
                self.match(DateAndTimeParser.SCORSI)
                self.state = 980
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 983
                self.match(DateAndTimeParser.DURANTE)
                self.state = 984
                self.match(DateAndTimeParser.I)
                self.state = 985
                localctx._number = self.number()
                self.state = 986
                self.match(DateAndTimeParser.PASSATI)
                self.state = 987
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 990
                self.match(DateAndTimeParser.DURANTE)
                self.state = 991
                self.match(DateAndTimeParser.I)
                self.state = 992
                localctx._number = self.number()
                self.state = 993
                self.match(DateAndTimeParser.MESI)
                self.state = 994
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 997
                self.match(DateAndTimeParser.NEL)
                self.state = 998
                self.match(DateAndTimeParser.CORSO)
                self.state = 999
                self.match(DateAndTimeParser.DEGLI)
                self.state = 1000
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1001
                localctx._number = self.number()
                self.state = 1002
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1005
                self.match(DateAndTimeParser.NEL)
                self.state = 1006
                self.match(DateAndTimeParser.CORSO)
                self.state = 1007
                self.match(DateAndTimeParser.DEI)
                self.state = 1008
                localctx._number = self.number()
                self.state = 1009
                self.match(DateAndTimeParser.MESI)
                self.state = 1010
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1013
                self.match(DateAndTimeParser.NEL)
                self.state = 1014
                self.match(DateAndTimeParser.CORSO)
                self.state = 1015
                self.match(DateAndTimeParser.DEI)
                self.state = 1016
                localctx._number = self.number()
                self.state = 1017
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1018
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1021
                self.match(DateAndTimeParser.NEL)
                self.state = 1022
                self.match(DateAndTimeParser.CORSO)
                self.state = 1023
                self.match(DateAndTimeParser.DEI)
                self.state = 1024
                localctx._number = self.number()
                self.state = 1025
                self.match(DateAndTimeParser.PASSATI)
                self.state = 1026
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1029
                self.match(DateAndTimeParser.NEL)
                self.state = 1030
                self.match(DateAndTimeParser.CORSO)
                self.state = 1031
                self.match(DateAndTimeParser.DEI)
                self.state = 1032
                localctx._number = self.number()
                self.state = 1033
                self.match(DateAndTimeParser.MESI)
                self.state = 1034
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Year_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Year_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DELL(self):
            return self.getToken(DateAndTimeParser.DELL, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def LO(self):
            return self.getToken(DateAndTimeParser.LO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear_duration(self)




    def year_duration(self):

        localctx = DateAndTimeParser.Year_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_year_duration)
        try:
            self.state = 1222
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1040
                self.match(DateAndTimeParser.IL)
                self.state = 1041
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1042
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1045
                self.match(DateAndTimeParser.L)
                self.state = 1046
                self.match(DateAndTimeParser.ANNO)
                self.state = 1047
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1049
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1050
                self.match(DateAndTimeParser.I)
                self.state = 1051
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1052
                localctx._number = self.number()
                self.state = 1053
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1056
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1057
                self.match(DateAndTimeParser.I)
                self.state = 1058
                localctx._number = self.number()
                self.state = 1059
                self.match(DateAndTimeParser.ANNI)
                self.state = 1060
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1063
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1064
                self.match(DateAndTimeParser.I)
                self.state = 1065
                localctx._number = self.number()
                self.state = 1066
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1067
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1070
                self.match(DateAndTimeParser.NEL)
                self.state = 1071
                self.match(DateAndTimeParser.CORSO)
                self.state = 1072
                self.match(DateAndTimeParser.DELL)
                self.state = 1073
                self.match(DateAndTimeParser.ANNO)
                self.state = 1074
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1076
                self.match(DateAndTimeParser.NEL)
                self.state = 1077
                self.match(DateAndTimeParser.CORSO)
                self.state = 1078
                self.match(DateAndTimeParser.DEL)
                self.state = 1079
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1080
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1082
                self.match(DateAndTimeParser.NEL)
                self.state = 1083
                self.match(DateAndTimeParser.CORSO)
                self.state = 1084
                self.match(DateAndTimeParser.DEI)
                self.state = 1085
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1086
                localctx._number = self.number()
                self.state = 1087
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1090
                self.match(DateAndTimeParser.NEL)
                self.state = 1091
                self.match(DateAndTimeParser.CORSO)
                self.state = 1092
                self.match(DateAndTimeParser.DEI)
                self.state = 1093
                localctx._number = self.number()
                self.state = 1094
                self.match(DateAndTimeParser.ANNI)
                self.state = 1095
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1098
                self.match(DateAndTimeParser.NEL)
                self.state = 1099
                self.match(DateAndTimeParser.CORSO)
                self.state = 1100
                self.match(DateAndTimeParser.DEI)
                self.state = 1101
                localctx._number = self.number()
                self.state = 1102
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1103
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1106
                self.match(DateAndTimeParser.PER)
                self.state = 1107
                self.match(DateAndTimeParser.IL)
                self.state = 1108
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1109
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1111
                self.match(DateAndTimeParser.PER)
                self.state = 1112
                self.match(DateAndTimeParser.L)
                self.state = 1113
                self.match(DateAndTimeParser.ANNO)
                self.state = 1114
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1116
                self.match(DateAndTimeParser.PER)
                self.state = 1117
                self.match(DateAndTimeParser.I)
                self.state = 1118
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1119
                localctx._number = self.number()
                self.state = 1120
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1123
                self.match(DateAndTimeParser.PER)
                self.state = 1124
                self.match(DateAndTimeParser.I)
                self.state = 1125
                localctx._number = self.number()
                self.state = 1126
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1127
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1130
                self.match(DateAndTimeParser.PER)
                self.state = 1131
                self.match(DateAndTimeParser.I)
                self.state = 1132
                localctx._number = self.number()
                self.state = 1133
                self.match(DateAndTimeParser.ANNI)
                self.state = 1134
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1137
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1138
                self.match(DateAndTimeParser.LO)
                self.state = 1139
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1140
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1142
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1143
                self.match(DateAndTimeParser.L)
                self.state = 1144
                self.match(DateAndTimeParser.ANNO)
                self.state = 1145
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1147
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1148
                self.match(DateAndTimeParser.GLI)
                self.state = 1149
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1150
                localctx._number = self.number()
                self.state = 1151
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1154
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1155
                self.match(DateAndTimeParser.I)
                self.state = 1156
                localctx._number = self.number()
                self.state = 1157
                self.match(DateAndTimeParser.ANNI)
                self.state = 1158
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1161
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1162
                self.match(DateAndTimeParser.I)
                self.state = 1163
                localctx._number = self.number()
                self.state = 1164
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1165
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1168
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1169
                self.match(DateAndTimeParser.I)
                self.state = 1170
                localctx._number = self.number()
                self.state = 1171
                self.match(DateAndTimeParser.PASSATI)
                self.state = 1172
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1175
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1176
                self.match(DateAndTimeParser.I)
                self.state = 1177
                localctx._number = self.number()
                self.state = 1178
                self.match(DateAndTimeParser.ANNI)
                self.state = 1179
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1182
                self.match(DateAndTimeParser.NEL)
                self.state = 1183
                self.match(DateAndTimeParser.CORSO)
                self.state = 1184
                self.match(DateAndTimeParser.DEGLI)
                self.state = 1185
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1186
                localctx._number = self.number()
                self.state = 1187
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1190
                self.match(DateAndTimeParser.NEL)
                self.state = 1191
                self.match(DateAndTimeParser.CORSO)
                self.state = 1192
                self.match(DateAndTimeParser.DEI)
                self.state = 1193
                localctx._number = self.number()
                self.state = 1194
                self.match(DateAndTimeParser.ANNI)
                self.state = 1195
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1198
                self.match(DateAndTimeParser.NEL)
                self.state = 1199
                self.match(DateAndTimeParser.CORSO)
                self.state = 1200
                self.match(DateAndTimeParser.DEI)
                self.state = 1201
                localctx._number = self.number()
                self.state = 1202
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1203
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1206
                self.match(DateAndTimeParser.NEL)
                self.state = 1207
                self.match(DateAndTimeParser.CORSO)
                self.state = 1208
                self.match(DateAndTimeParser.DEI)
                self.state = 1209
                localctx._number = self.number()
                self.state = 1210
                self.match(DateAndTimeParser.PASSATI)
                self.state = 1211
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1214
                self.match(DateAndTimeParser.NEL)
                self.state = 1215
                self.match(DateAndTimeParser.CORSO)
                self.state = 1216
                self.match(DateAndTimeParser.DEI)
                self.state = 1217
                localctx._number = self.number()
                self.state = 1218
                self.match(DateAndTimeParser.ANNI)
                self.state = 1219
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def OGGI(self):
            return self.getToken(DateAndTimeParser.OGGI, 0)

        def DOMANI(self):
            return self.getToken(DateAndTimeParser.DOMANI, 0)

        def INDOMANI(self):
            return self.getToken(DateAndTimeParser.INDOMANI, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def GIORNO(self):
            return self.getToken(DateAndTimeParser.GIORNO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def IERI(self):
            return self.getToken(DateAndTimeParser.IERI, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def DOPODOMANI(self):
            return self.getToken(DateAndTimeParser.DOPODOMANI, 0)

        def ALTROIERI(self):
            return self.getToken(DateAndTimeParser.ALTROIERI, 0)

        def IERLALTRO(self):
            return self.getToken(DateAndTimeParser.IERLALTRO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def ENTRO(self):
            return self.getToken(DateAndTimeParser.ENTRO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_relative(self)




    def day_relative(self):

        localctx = DateAndTimeParser.Day_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_day_relative)
        try:
            self.state = 1301
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1224
                self.match(DateAndTimeParser.OGGI)
                localctx.s =  "$today$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self.match(DateAndTimeParser.DOMANI)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1228
                self.match(DateAndTimeParser.INDOMANI)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1230
                self.match(DateAndTimeParser.UN)
                self.state = 1231
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1232
                self.match(DateAndTimeParser.DA)
                self.state = 1233
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1235
                self.match(DateAndTimeParser.UN)
                self.state = 1236
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1237
                self.match(DateAndTimeParser.DA)
                self.state = 1238
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1240
                self.match(DateAndTimeParser.IERI)
                localctx.s =  "$yesterday$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1242
                self.match(DateAndTimeParser.UN)
                self.state = 1243
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1244
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$yesterday$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1246
                self.match(DateAndTimeParser.DOPO)
                self.state = 1247
                self.match(DateAndTimeParser.DOMANI)
                localctx.s =  "$day_after_tomorrow$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1249
                self.match(DateAndTimeParser.DOPODOMANI)
                localctx.s =  "$day_after_tomorrow$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1251
                self.match(DateAndTimeParser.ALTROIERI)
                localctx.s =  "$day_before_yesterday$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1253
                self.match(DateAndTimeParser.IERLALTRO)
                localctx.s =  "$day_before_yesterday$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1255
                localctx._number = self.number()
                self.state = 1256
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1257
                self.match(DateAndTimeParser.DA)
                self.state = 1258
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1261
                localctx._number = self.number()
                self.state = 1262
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1263
                self.match(DateAndTimeParser.DA)
                self.state = 1264
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1267
                localctx._number = self.number()
                self.state = 1268
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1269
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1272
                self.match(DateAndTimeParser.ENTRO)
                self.state = 1273
                localctx._number = self.number()
                self.state = 1274
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1277
                self.match(DateAndTimeParser.DOPO)
                self.state = 1278
                localctx._number = self.number()
                self.state = 1279
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1282
                self.match(DateAndTimeParser.FRA)
                self.state = 1283
                localctx._number = self.number()
                self.state = 1284
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + localctx._number.i + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1287
                localctx._number = self.number()
                self.state = 1288
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1289
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1292
                localctx._number = self.number()
                self.state = 1293
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1294
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$day:-" + localctx._number.i + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1297
                self.match(DateAndTimeParser.UN)
                self.state = 1298
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1299
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$day:-1$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_absoluteContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_absoluteContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def LUNEDI(self):
            return self.getToken(DateAndTimeParser.LUNEDI, 0)

        def MARTEDI(self):
            return self.getToken(DateAndTimeParser.MARTEDI, 0)

        def MERCOLEDI(self):
            return self.getToken(DateAndTimeParser.MERCOLEDI, 0)

        def GIOVEDI(self):
            return self.getToken(DateAndTimeParser.GIOVEDI, 0)

        def VENERDI(self):
            return self.getToken(DateAndTimeParser.VENERDI, 0)

        def SABATO(self):
            return self.getToken(DateAndTimeParser.SABATO, 0)

        def DOMENICA(self):
            return self.getToken(DateAndTimeParser.DOMENICA, 0)

        def WEEKEND(self):
            return self.getToken(DateAndTimeParser.WEEKEND, 0)

        def WEEK(self):
            return self.getToken(DateAndTimeParser.WEEK, 0)

        def END(self):
            return self.getToken(DateAndTimeParser.END, 0)

        def FINE(self):
            return self.getToken(DateAndTimeParser.FINE, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_absolute

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_absolute(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_absolute(self)




    def day_absolute(self):

        localctx = DateAndTimeParser.Day_absoluteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_day_absolute)
        try:
            self.state = 1325
            token = self._input.LA(1)
            if token in [DateAndTimeParser.LUNEDI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self.match(DateAndTimeParser.LUNEDI)
                localctx.s =  "$monday$" 

            elif token in [DateAndTimeParser.MARTEDI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(DateAndTimeParser.MARTEDI)
                localctx.s =  "$tuesday$" 

            elif token in [DateAndTimeParser.MERCOLEDI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.match(DateAndTimeParser.MERCOLEDI)
                localctx.s =  "$wednesday$" 

            elif token in [DateAndTimeParser.GIOVEDI]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1309
                self.match(DateAndTimeParser.GIOVEDI)
                localctx.s =  "$thursday$" 

            elif token in [DateAndTimeParser.VENERDI]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1311
                self.match(DateAndTimeParser.VENERDI)
                localctx.s =  "$friday$" 

            elif token in [DateAndTimeParser.SABATO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1313
                self.match(DateAndTimeParser.SABATO)
                localctx.s =  "$saturday$" 

            elif token in [DateAndTimeParser.DOMENICA]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1315
                self.match(DateAndTimeParser.DOMENICA)
                localctx.s =  "$sunday$" 

            elif token in [DateAndTimeParser.WEEKEND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1317
                self.match(DateAndTimeParser.WEEKEND)
                localctx.s =  "$weekend$" 

            elif token in [DateAndTimeParser.WEEK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1319
                self.match(DateAndTimeParser.WEEK)
                self.state = 1320
                self.match(DateAndTimeParser.END)
                localctx.s =  "$weekend$" 

            elif token in [DateAndTimeParser.FINE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1322
                self.match(DateAndTimeParser.FINE)
                self.state = 1323
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekend$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Time_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def ALBA(self):
            return self.getToken(DateAndTimeParser.ALBA, 0)

        def MATTINO(self):
            return self.getToken(DateAndTimeParser.MATTINO, 0)

        def MATTINA(self):
            return self.getToken(DateAndTimeParser.MATTINA, 0)

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def IN(self):
            return self.getToken(DateAndTimeParser.IN, 0)

        def MATTINATA(self):
            return self.getToken(DateAndTimeParser.MATTINATA, 0)

        def MEZZOGIORNO(self):
            return self.getToken(DateAndTimeParser.MEZZOGIORNO, 0)

        def A(self):
            return self.getToken(DateAndTimeParser.A, 0)

        def PRANZO(self):
            return self.getToken(DateAndTimeParser.PRANZO, 0)

        def ALL(self):
            return self.getToken(DateAndTimeParser.ALL, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def POMERIGGIO(self):
            return self.getToken(DateAndTimeParser.POMERIGGIO, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def SERA(self):
            return self.getToken(DateAndTimeParser.SERA, 0)

        def SERATA(self):
            return self.getToken(DateAndTimeParser.SERATA, 0)

        def CENA(self):
            return self.getToken(DateAndTimeParser.CENA, 0)

        def MEZZANOTTE(self):
            return self.getToken(DateAndTimeParser.MEZZANOTTE, 0)

        def NOTTE(self):
            return self.getToken(DateAndTimeParser.NOTTE, 0)

        def NOTTATA(self):
            return self.getToken(DateAndTimeParser.NOTTATA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def MOMENTO(self):
            return self.getToken(DateAndTimeParser.MOMENTO, 0)

        def AL(self):
            return self.getToken(DateAndTimeParser.AL, 0)

        def PROPRIO(self):
            return self.getToken(DateAndTimeParser.PROPRIO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_time_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTime_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTime_relative(self)




    def time_relative(self):

        localctx = DateAndTimeParser.Time_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_time_relative)
        try:
            self.state = 1406
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.match(DateAndTimeParser.ALBA)
                localctx.s =  "$dawn$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1329
                self.match(DateAndTimeParser.MATTINO)
                localctx.s =  "$morning$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1331
                self.match(DateAndTimeParser.MATTINA)
                localctx.s =  "$morning$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1333
                self.match(DateAndTimeParser.DI)
                self.state = 1334
                self.match(DateAndTimeParser.MATTINA)
                localctx.s =  "$morning$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1336
                self.match(DateAndTimeParser.IN)
                self.state = 1337
                self.match(DateAndTimeParser.MATTINATA)
                localctx.s =  "$morning$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1339
                self.match(DateAndTimeParser.MEZZOGIORNO)
                localctx.s =  "$noon$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1341
                self.match(DateAndTimeParser.A)
                self.state = 1342
                self.match(DateAndTimeParser.PRANZO)
                localctx.s =  "$noon$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1344
                self.match(DateAndTimeParser.ALL)
                self.state = 1345
                self.match(DateAndTimeParser.ORA)
                self.state = 1346
                self.match(DateAndTimeParser.DI)
                self.state = 1347
                self.match(DateAndTimeParser.PRANZO)
                localctx.s =  "$noon$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1349
                self.match(DateAndTimeParser.DOPO)
                self.state = 1350
                self.match(DateAndTimeParser.MEZZOGIORNO)
                localctx.s =  "$afternoon$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1352
                self.match(DateAndTimeParser.POMERIGGIO)
                localctx.s =  "$afternoon$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1354
                self.match(DateAndTimeParser.NEL)
                self.state = 1355
                self.match(DateAndTimeParser.POMERIGGIO)
                localctx.s =  "$afternoon$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1357
                self.match(DateAndTimeParser.DOPO)
                self.state = 1358
                self.match(DateAndTimeParser.PRANZO)
                localctx.s =  "$afternoon$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1360
                self.match(DateAndTimeParser.SERA)
                localctx.s =  "$evening$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1362
                self.match(DateAndTimeParser.DI)
                self.state = 1363
                self.match(DateAndTimeParser.SERA)
                localctx.s =  "$evening$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1365
                self.match(DateAndTimeParser.IN)
                self.state = 1366
                self.match(DateAndTimeParser.SERATA)
                localctx.s =  "$evening$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1368
                self.match(DateAndTimeParser.A)
                self.state = 1369
                self.match(DateAndTimeParser.CENA)
                localctx.s =  "$evening$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1371
                self.match(DateAndTimeParser.ALL)
                self.state = 1372
                self.match(DateAndTimeParser.ORA)
                self.state = 1373
                self.match(DateAndTimeParser.DI)
                self.state = 1374
                self.match(DateAndTimeParser.CENA)
                localctx.s =  "$evening$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1376
                self.match(DateAndTimeParser.MEZZANOTTE)
                localctx.s =  "$midnight$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1378
                self.match(DateAndTimeParser.NOTTE)
                localctx.s =  "$night$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1380
                self.match(DateAndTimeParser.DI)
                self.state = 1381
                self.match(DateAndTimeParser.NOTTE)
                localctx.s =  "$night$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1383
                self.match(DateAndTimeParser.IN)
                self.state = 1384
                self.match(DateAndTimeParser.NOTTATA)
                localctx.s =  "$night$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1386
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$now$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1388
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$now$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1390
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1391
                self.match(DateAndTimeParser.MOMENTO)
                localctx.s =  "$now$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1393
                self.match(DateAndTimeParser.IN)
                self.state = 1394
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1395
                self.match(DateAndTimeParser.MOMENTO)
                localctx.s =  "$now$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1397
                self.match(DateAndTimeParser.AL)
                self.state = 1398
                self.match(DateAndTimeParser.MOMENTO)
                localctx.s =  "$now$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1400
                self.match(DateAndTimeParser.PROPRIO)
                self.state = 1401
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$now$" 
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1403
                self.match(DateAndTimeParser.PROPRIO)
                self.state = 1404
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$now$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Month_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Month_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth_relative(self)




    def month_relative(self):

        localctx = DateAndTimeParser.Month_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_month_relative)
        try:
            self.state = 1471
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1409
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self.match(DateAndTimeParser.MESE)
                self.state = 1412
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1414
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1415
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1417
                self.match(DateAndTimeParser.UN)
                self.state = 1418
                self.match(DateAndTimeParser.MESE)
                self.state = 1419
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1421
                self.match(DateAndTimeParser.UN)
                self.state = 1422
                self.match(DateAndTimeParser.MESE)
                self.state = 1423
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1425
                self.match(DateAndTimeParser.MESE)
                self.state = 1426
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1428
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1429
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1431
                self.match(DateAndTimeParser.MESE)
                self.state = 1432
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1434
                self.match(DateAndTimeParser.FRA)
                self.state = 1435
                self.match(DateAndTimeParser.UN)
                self.state = 1436
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1438
                self.match(DateAndTimeParser.DOPO)
                self.state = 1439
                self.match(DateAndTimeParser.UN)
                self.state = 1440
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1442
                self.match(DateAndTimeParser.UN)
                self.state = 1443
                self.match(DateAndTimeParser.MESE)
                self.state = 1444
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1446
                self.match(DateAndTimeParser.FRA)
                self.state = 1447
                localctx._number = self.number()
                self.state = 1448
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1451
                self.match(DateAndTimeParser.DOPO)
                self.state = 1452
                localctx._number = self.number()
                self.state = 1453
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1456
                localctx._number = self.number()
                self.state = 1457
                self.match(DateAndTimeParser.MESI)
                self.state = 1458
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$month:" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1461
                localctx._number = self.number()
                self.state = 1462
                self.match(DateAndTimeParser.MESI)
                self.state = 1463
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1466
                localctx._number = self.number()
                self.state = 1467
                self.match(DateAndTimeParser.MESI)
                self.state = 1468
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$month:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Year_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Year_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUEST(self):
            return self.getToken(DateAndTimeParser.QUEST, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear_relative(self)




    def year_relative(self):

        localctx = DateAndTimeParser.Year_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_year_relative)
        try:
            self.state = 1533
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.match(DateAndTimeParser.QUEST)
                self.state = 1474
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.match(DateAndTimeParser.ANNO)
                self.state = 1477
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1479
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1480
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1482
                self.match(DateAndTimeParser.UN)
                self.state = 1483
                self.match(DateAndTimeParser.ANNO)
                self.state = 1484
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1486
                self.match(DateAndTimeParser.UN)
                self.state = 1487
                self.match(DateAndTimeParser.ANNO)
                self.state = 1488
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1490
                self.match(DateAndTimeParser.ANNO)
                self.state = 1491
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1493
                self.match(DateAndTimeParser.ANNO)
                self.state = 1494
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1496
                self.match(DateAndTimeParser.FRA)
                self.state = 1497
                self.match(DateAndTimeParser.UN)
                self.state = 1498
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1500
                self.match(DateAndTimeParser.DOPO)
                self.state = 1501
                self.match(DateAndTimeParser.UN)
                self.state = 1502
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1504
                self.match(DateAndTimeParser.UN)
                self.state = 1505
                self.match(DateAndTimeParser.ANNO)
                self.state = 1506
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1508
                self.match(DateAndTimeParser.FRA)
                self.state = 1509
                localctx._number = self.number()
                self.state = 1510
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1513
                self.match(DateAndTimeParser.DOPO)
                self.state = 1514
                localctx._number = self.number()
                self.state = 1515
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1518
                localctx._number = self.number()
                self.state = 1519
                self.match(DateAndTimeParser.ANNI)
                self.state = 1520
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1523
                localctx._number = self.number()
                self.state = 1524
                self.match(DateAndTimeParser.ANNI)
                self.state = 1525
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1528
                localctx._number = self.number()
                self.state = 1529
                self.match(DateAndTimeParser.ANNI)
                self.state = 1530
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_numberContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._number = None # NumberContext

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def SECONDA(self):
            return self.getToken(DateAndTimeParser.SECONDA, 0)

        def TERZA(self):
            return self.getToken(DateAndTimeParser.TERZA, 0)

        def QUARTA(self):
            return self.getToken(DateAndTimeParser.QUARTA, 0)

        def QUINTA(self):
            return self.getToken(DateAndTimeParser.QUINTA, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_number

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_number(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_number(self)




    def week_number(self):

        localctx = DateAndTimeParser.Week_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_week_number)
        try:
            self.state = 1554
            token = self._input.LA(1)
            if token in [DateAndTimeParser.PRIMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1535
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1536
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  1 

            elif token in [DateAndTimeParser.SECONDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.match(DateAndTimeParser.SECONDA)
                self.state = 1539
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  2 

            elif token in [DateAndTimeParser.TERZA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1541
                self.match(DateAndTimeParser.TERZA)
                self.state = 1542
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  3 

            elif token in [DateAndTimeParser.QUARTA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1544
                self.match(DateAndTimeParser.QUARTA)
                self.state = 1545
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  4 

            elif token in [DateAndTimeParser.QUINTA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1547
                self.match(DateAndTimeParser.QUINTA)
                self.state = 1548
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  5 

            elif token in [DateAndTimeParser.SETTIMANA]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1550
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1551
                localctx._number = self.number()
                localctx.i =  localctx._number.i 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUESTA(self):
            return self.getToken(DateAndTimeParser.QUESTA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def IN(self):
            return self.getToken(DateAndTimeParser.IN, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def VENTURA(self):
            return self.getToken(DateAndTimeParser.VENTURA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def ENTRO(self):
            return self.getToken(DateAndTimeParser.ENTRO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_relative(self)




    def week_relative(self):

        localctx = DateAndTimeParser.Week_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_week_relative)
        try:
            self.state = 1639
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1556
                self.match(DateAndTimeParser.QUESTA)
                self.state = 1557
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559
                self.match(DateAndTimeParser.IN)
                self.state = 1560
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:0$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1563
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1565
                self.match(DateAndTimeParser.SCORSA)
                self.state = 1566
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1568
                self.match(DateAndTimeParser.UNA)
                self.state = 1569
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1570
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1572
                self.match(DateAndTimeParser.UNA)
                self.state = 1573
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1574
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1576
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1577
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1579
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1580
                self.match(DateAndTimeParser.VENTURA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1582
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 1583
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1585
                self.match(DateAndTimeParser.FRA)
                self.state = 1586
                self.match(DateAndTimeParser.UNA)
                self.state = 1587
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1589
                self.match(DateAndTimeParser.DOPO)
                self.state = 1590
                self.match(DateAndTimeParser.UNA)
                self.state = 1591
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1593
                self.match(DateAndTimeParser.UNA)
                self.state = 1594
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1595
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1597
                self.match(DateAndTimeParser.FRA)
                self.state = 1598
                localctx._number = self.number()
                self.state = 1599
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1602
                self.match(DateAndTimeParser.DOPO)
                self.state = 1603
                localctx._number = self.number()
                self.state = 1604
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1607
                self.match(DateAndTimeParser.ENTRO)
                self.state = 1608
                localctx._number = self.number()
                self.state = 1609
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1612
                localctx._number = self.number()
                self.state = 1613
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1614
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1617
                localctx._number = self.number()
                self.state = 1618
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1619
                self.match(DateAndTimeParser.DA)
                self.state = 1620
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1623
                localctx._number = self.number()
                self.state = 1624
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1625
                self.match(DateAndTimeParser.DA)
                self.state = 1626
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$week:" + localctx._number.i + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1629
                localctx._number = self.number()
                self.state = 1630
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1631
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1634
                localctx._number = self.number()
                self.state = 1635
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1636
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$week:-" + localctx._number.i + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YearContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.YearContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._YEARNUM = None # Token
            self._TIMENUM = None # Token
            self._threedignum = None # ThreedignumContext
            self._number = None # NumberContext

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def QUEST(self):
            return self.getToken(DateAndTimeParser.QUEST, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def TIMENUM(self):
            return self.getToken(DateAndTimeParser.TIMENUM, 0)

        def threedignum(self):
            return self.getTypedRuleContext(DateAndTimeParser.ThreedignumContext,0)


        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def DELL(self):
            return self.getToken(DateAndTimeParser.DELL, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def PRECEDENTE(self):
            return self.getToken(DateAndTimeParser.PRECEDENTE, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear(self)




    def year(self):

        localctx = DateAndTimeParser.YearContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_year)
        try:
            self.state = 1776
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1641
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1643
                self.match(DateAndTimeParser.NEL)
                self.state = 1644
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1646
                self.match(DateAndTimeParser.QUEST)
                self.state = 1647
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:0$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1649
                self.match(DateAndTimeParser.ANNO)
                self.state = 1650
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1652
                self.match(DateAndTimeParser.ANNO)
                self.state = 1653
                localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
                localctx.s =  (None if localctx._TIMENUM is None else localctx._TIMENUM.text) 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1655
                self.match(DateAndTimeParser.ANNO)
                self.state = 1656
                localctx._threedignum = self.threedignum()
                localctx.s =  (None if localctx._threedignum is None else self._input.getText((localctx._threedignum.start,localctx._threedignum.stop))) 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1659
                self.match(DateAndTimeParser.DOPO)
                self.state = 1660
                self.match(DateAndTimeParser.IL)
                self.state = 1661
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1663
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1664
                self.match(DateAndTimeParser.DEL)
                self.state = 1665
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1667
                self.match(DateAndTimeParser.DOPO)
                self.state = 1668
                self.match(DateAndTimeParser.L)
                self.state = 1669
                self.match(DateAndTimeParser.ANNO)
                self.state = 1670
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1672
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1673
                self.match(DateAndTimeParser.DELL)
                self.state = 1674
                self.match(DateAndTimeParser.ANNO)
                self.state = 1675
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1677
                self.match(DateAndTimeParser.ANNO)
                self.state = 1678
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1680
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1681
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1683
                self.match(DateAndTimeParser.ANNO)
                self.state = 1684
                self.match(DateAndTimeParser.PRECEDENTE)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1686
                self.match(DateAndTimeParser.UN)
                self.state = 1687
                self.match(DateAndTimeParser.ANNO)
                self.state = 1688
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1690
                self.match(DateAndTimeParser.UN)
                self.state = 1691
                self.match(DateAndTimeParser.ANNO)
                self.state = 1692
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1694
                self.match(DateAndTimeParser.ANNO)
                self.state = 1695
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1697
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1698
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1700
                self.match(DateAndTimeParser.ANNO)
                self.state = 1701
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1703
                self.match(DateAndTimeParser.UN)
                self.state = 1704
                self.match(DateAndTimeParser.ANNO)
                self.state = 1705
                self.match(DateAndTimeParser.DA)
                self.state = 1706
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1708
                self.match(DateAndTimeParser.UN)
                self.state = 1709
                self.match(DateAndTimeParser.ANNO)
                self.state = 1710
                self.match(DateAndTimeParser.DA)
                self.state = 1711
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1713
                self.match(DateAndTimeParser.DOPO)
                self.state = 1714
                self.match(DateAndTimeParser.UN)
                self.state = 1715
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1717
                self.match(DateAndTimeParser.FRA)
                self.state = 1718
                self.match(DateAndTimeParser.UN)
                self.state = 1719
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1721
                self.match(DateAndTimeParser.DOPO)
                self.state = 1722
                self.match(DateAndTimeParser.IL)
                self.state = 1723
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1725
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1726
                self.match(DateAndTimeParser.DEL)
                self.state = 1727
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1729
                self.match(DateAndTimeParser.ANNI)
                self.state = 1730
                localctx._number = self.number()
                localctx.s =  "$period:19" + (None if localctx._number is None else self._input.getText((localctx._number.start,localctx._number.stop))) + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1733
                localctx._number = self.number()
                self.state = 1734
                self.match(DateAndTimeParser.ANNI)
                self.state = 1735
                self.match(DateAndTimeParser.DA)
                self.state = 1736
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1739
                localctx._number = self.number()
                self.state = 1740
                self.match(DateAndTimeParser.ANNI)
                self.state = 1741
                self.match(DateAndTimeParser.DA)
                self.state = 1742
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1745
                localctx._number = self.number()
                self.state = 1746
                self.match(DateAndTimeParser.ANNI)
                self.state = 1747
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1750
                self.match(DateAndTimeParser.DOPO)
                self.state = 1751
                localctx._number = self.number()
                self.state = 1752
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1755
                self.match(DateAndTimeParser.FRA)
                self.state = 1756
                localctx._number = self.number()
                self.state = 1757
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + localctx._number.i + "$" 
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1760
                localctx._number = self.number()
                self.state = 1761
                self.match(DateAndTimeParser.ANNI)
                self.state = 1762
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1765
                localctx._number = self.number()
                self.state = 1766
                self.match(DateAndTimeParser.ANNI)
                self.state = 1767
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-" + localctx._number.i + "$" 
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1770
                self.match(DateAndTimeParser.ANNI)
                self.state = 1771
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$period:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1773
                self.match(DateAndTimeParser.ANNI)
                self.state = 1774
                localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
                localctx.s =  "$period:" + (None if localctx._TIMENUM is None else localctx._TIMENUM.text) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_repeatContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Date_repeatContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def OGNI(self):
            return self.getToken(DateAndTimeParser.OGNI, 0)

        def GIORNO(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.GIORNO)
            else:
                return self.getToken(DateAndTimeParser.GIORNO, i)

        def QUOTIDIANAMENTE(self):
            return self.getToken(DateAndTimeParser.QUOTIDIANAMENTE, 0)

        def TUTTI(self):
            return self.getToken(DateAndTimeParser.TUTTI, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def GIORNALMENTE(self):
            return self.getToken(DateAndTimeParser.GIORNALMENTE, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def SETTIMANA(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.SETTIMANA)
            else:
                return self.getToken(DateAndTimeParser.SETTIMANA, i)

        def SETTIMANALMENTE(self):
            return self.getToken(DateAndTimeParser.SETTIMANALMENTE, 0)

        def TUTTE(self):
            return self.getToken(DateAndTimeParser.TUTTE, 0)

        def LE(self):
            return self.getToken(DateAndTimeParser.LE, 0)

        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def BISETTIMANALMENTE(self):
            return self.getToken(DateAndTimeParser.BISETTIMANALMENTE, 0)

        def DUE(self):
            return self.getToken(DateAndTimeParser.DUE, 0)

        def VOLTE(self):
            return self.getToken(DateAndTimeParser.VOLTE, 0)

        def AL(self):
            return self.getToken(DateAndTimeParser.AL, 0)

        def MESE(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.MESE)
            else:
                return self.getToken(DateAndTimeParser.MESE, i)

        def MENSILMENTE(self):
            return self.getToken(DateAndTimeParser.MENSILMENTE, 0)

        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def TRIMESTRALMENTE(self):
            return self.getToken(DateAndTimeParser.TRIMESTRALMENTE, 0)

        def QUATTRO(self):
            return self.getToken(DateAndTimeParser.QUATTRO, 0)

        def ALL(self):
            return self.getToken(DateAndTimeParser.ALL, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def TRIMESTRE(self):
            return self.getToken(DateAndTimeParser.TRIMESTRE, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def ANNUALMENTE(self):
            return self.getToken(DateAndTimeParser.ANNUALMENTE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date_repeat

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate_repeat(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate_repeat(self)




    def date_repeat(self):

        localctx = DateAndTimeParser.Date_repeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_date_repeat)
        try:
            self.state = 1858
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1778
                self.match(DateAndTimeParser.OGNI)
                self.state = 1779
                self.match(DateAndTimeParser.GIORNO)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.match(DateAndTimeParser.QUOTIDIANAMENTE)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1783
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1784
                self.match(DateAndTimeParser.I)
                self.state = 1785
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1787
                self.match(DateAndTimeParser.GIORNALMENTE)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1789
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1790
                self.match(DateAndTimeParser.DOPO)
                self.state = 1791
                self.match(DateAndTimeParser.GIORNO)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1793
                self.match(DateAndTimeParser.OGNI)
                self.state = 1794
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1796
                self.match(DateAndTimeParser.SETTIMANALMENTE)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1798
                self.match(DateAndTimeParser.TUTTE)
                self.state = 1799
                self.match(DateAndTimeParser.LE)
                self.state = 1800
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1802
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1803
                self.match(DateAndTimeParser.DOPO)
                self.state = 1804
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1806
                self.match(DateAndTimeParser.BISETTIMANALMENTE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1808
                self.match(DateAndTimeParser.OGNI)
                self.state = 1809
                self.match(DateAndTimeParser.DUE)
                self.state = 1810
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1812
                self.match(DateAndTimeParser.DUE)
                self.state = 1813
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1814
                self.match(DateAndTimeParser.AL)
                self.state = 1815
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1817
                self.match(DateAndTimeParser.OGNI)
                self.state = 1818
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1820
                self.match(DateAndTimeParser.MENSILMENTE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1822
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1823
                self.match(DateAndTimeParser.I)
                self.state = 1824
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1826
                self.match(DateAndTimeParser.MESE)
                self.state = 1827
                self.match(DateAndTimeParser.DOPO)
                self.state = 1828
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1830
                self.match(DateAndTimeParser.OGNI)
                self.state = 1831
                self.match(DateAndTimeParser.TRE)
                self.state = 1832
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1834
                self.match(DateAndTimeParser.TRIMESTRALMENTE)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1836
                self.match(DateAndTimeParser.QUATTRO)
                self.state = 1837
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1838
                self.match(DateAndTimeParser.ALL)
                self.state = 1839
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1841
                self.match(DateAndTimeParser.QUATTRO)
                self.state = 1842
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1843
                self.match(DateAndTimeParser.L)
                self.state = 1844
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1846
                self.match(DateAndTimeParser.OGNI)
                self.state = 1847
                self.match(DateAndTimeParser.TRIMESTRE)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1849
                self.match(DateAndTimeParser.OGNI)
                self.state = 1850
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$yearly$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1852
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1853
                self.match(DateAndTimeParser.GLI)
                self.state = 1854
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$yearly$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1856
                self.match(DateAndTimeParser.ANNUALMENTE)
                localctx.s =  "$yearly$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_startContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Time_startContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._time_number = None # Time_numberContext

        def maybealle(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybealleContext,0)


        def maybeore(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybeoreContext,0)


        def time_number(self):
            return self.getTypedRuleContext(DateAndTimeParser.Time_numberContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_time_start

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTime_start(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTime_start(self)




    def time_start(self):

        localctx = DateAndTimeParser.Time_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_time_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self.maybealle()
            self.state = 1861
            self.maybeore()
            self.state = 1862
            localctx._time_number = self.time_number()
            localctx.s =  localctx._time_number.s 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Time_numberContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext
            self.a = None # NumberContext
            self.b = None # NumberContext
            self._threedignum = None # ThreedignumContext
            self._timenum = None # TimenumContext

        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.NumberContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.NumberContext,i)


        def INPUNTO(self):
            return self.getToken(DateAndTimeParser.INPUNTO, 0)

        def E(self):
            return self.getToken(DateAndTimeParser.E, 0)

        def MENO(self):
            return self.getToken(DateAndTimeParser.MENO, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def QUARTO(self):
            return self.getToken(DateAndTimeParser.QUARTO, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def LE(self):
            return self.getToken(DateAndTimeParser.LE, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def QUARTI(self):
            return self.getToken(DateAndTimeParser.QUARTI, 0)

        def ALLE(self):
            return self.getToken(DateAndTimeParser.ALLE, 0)

        def MEZZO(self):
            return self.getToken(DateAndTimeParser.MEZZO, 0)

        def threedignum(self):
            return self.getTypedRuleContext(DateAndTimeParser.ThreedignumContext,0)


        def ORE(self):
            return self.getToken(DateAndTimeParser.ORE, 0)

        def timenum(self):
            return self.getTypedRuleContext(DateAndTimeParser.TimenumContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_time_number

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTime_number(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTime_number(self)




    def time_number(self):

        localctx = DateAndTimeParser.Time_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_time_number)
        try:
            self.state = 1937
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1865
                localctx._number = self.number()
                self.state = 1866
                self.match(DateAndTimeParser.INPUNTO)
                localctx.s =  String.format("%02d",localctx._number.i) + ":_:_" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1869
                localctx.a = self.number()
                self.state = 1870
                localctx.b = self.number()
                localctx.s =  "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i) + ":_" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1873
                localctx.a = self.number()
                self.state = 1874
                self.match(DateAndTimeParser.T__0)
                self.state = 1875
                localctx.b = self.number()
                localctx.s =  "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i) + ":_" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1878
                localctx.a = self.number()
                self.state = 1879
                self.match(DateAndTimeParser.E)
                self.state = 1880
                localctx.b = self.number()
                localctx.s =  "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i) + ":_" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1883
                localctx.a = self.number()
                self.state = 1884
                self.match(DateAndTimeParser.MENO)
                self.state = 1885
                localctx.b = self.number()
                localctx.s =  "%02d" % ((localctx.b.i+23) % 24) + ":" + "%02d" % ((60-localctx.a.i)) + ":_" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1888
                localctx._number = self.number()
                self.state = 1889
                self.match(DateAndTimeParser.E)
                self.state = 1890
                self.match(DateAndTimeParser.UN)
                self.state = 1891
                self.match(DateAndTimeParser.QUARTO)
                localctx.s =  "%02d" % (localctx._number.i) + ":" + 15 + ":_" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1894
                self.match(DateAndTimeParser.UN)
                self.state = 1895
                self.match(DateAndTimeParser.QUARTO)
                self.state = 1896
                self.match(DateAndTimeParser.DOPO)
                self.state = 1897
                self.match(DateAndTimeParser.LE)
                self.state = 1898
                localctx._number = self.number()
                localctx.s =  "%02d" % (localctx._number.i) + ":" + 15 + ":_" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1901
                localctx._number = self.number()
                self.state = 1902
                self.match(DateAndTimeParser.E)
                self.state = 1903
                self.match(DateAndTimeParser.TRE)
                self.state = 1904
                self.match(DateAndTimeParser.QUARTI)
                localctx.s =  "%02d" % (localctx._number.i) + ":" + 45 + ":_" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1907
                self.match(DateAndTimeParser.UN)
                self.state = 1908
                self.match(DateAndTimeParser.QUARTO)
                self.state = 1909
                self.match(DateAndTimeParser.ALLE)
                self.state = 1910
                localctx._number = self.number()
                localctx.s =  "%02d" % ((localctx._number.i+23) % 24) + ":" + 45 + ":_" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1913
                localctx._number = self.number()
                self.state = 1914
                self.match(DateAndTimeParser.MENO)
                self.state = 1915
                self.match(DateAndTimeParser.UN)
                self.state = 1916
                self.match(DateAndTimeParser.QUARTO)
                localctx.s =  "%02d" % ((localctx._number.i+23) % 24) + ":" + 45 + ":_" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1919
                localctx._number = self.number()
                self.state = 1920
                self.match(DateAndTimeParser.E)
                self.state = 1921
                self.match(DateAndTimeParser.MEZZO)
                localctx.s =  "%02d" % (localctx._number.i) + ":" + 30 + ":_" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1924
                localctx._threedignum = self.threedignum()
                localctx.s =  "%02d" % ((localctx._threedignum.i / 100)) + ":" + "%02d" % ((localctx._threedignum.i % 100)) + ":_"  
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1927
                self.match(DateAndTimeParser.ORE)
                self.state = 1928
                localctx._timenum = self.timenum()
                localctx.s =  "%02d" % ((localctx._timenum.i / 100)) + ":" + "%02d" % ((localctx._timenum.i % 100)) + ":_"  
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1931
                localctx._timenum = self.timenum()
                localctx.s =  "%02d" % ((localctx._timenum.i / 100)) + ":" + "%02d" % ((localctx._timenum.i % 100)) + ":_"  
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1934
                localctx._number = self.number()
                localctx.s =  String.format("%02d",localctx._number.i) + ":_:_" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmpmContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.AmpmContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def MATTINO(self):
            return self.getToken(DateAndTimeParser.MATTINO, 0)

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def MATTINA(self):
            return self.getToken(DateAndTimeParser.MATTINA, 0)

        def DELLA(self):
            return self.getToken(DateAndTimeParser.DELLA, 0)

        def NOTTE(self):
            return self.getToken(DateAndTimeParser.NOTTE, 0)

        def POMERIGGIO(self):
            return self.getToken(DateAndTimeParser.POMERIGGIO, 0)

        def SERA(self):
            return self.getToken(DateAndTimeParser.SERA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_ampm

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterAmpm(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitAmpm(self)




    def ampm(self):

        localctx = DateAndTimeParser.AmpmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ampm)
        try:
            self.state = 1963
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.match(DateAndTimeParser.DEL)
                self.state = 1940
                self.match(DateAndTimeParser.MATTINO)
                localctx.s =  "$am$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(DateAndTimeParser.DI)
                self.state = 1943
                self.match(DateAndTimeParser.MATTINA)
                localctx.s =  "$am$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1945
                self.match(DateAndTimeParser.DELLA)
                self.state = 1946
                self.match(DateAndTimeParser.NOTTE)
                localctx.s =  "$am$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1948
                self.match(DateAndTimeParser.DI)
                self.state = 1949
                self.match(DateAndTimeParser.NOTTE)
                localctx.s =  "$am$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1951
                self.match(DateAndTimeParser.DEL)
                self.state = 1952
                self.match(DateAndTimeParser.POMERIGGIO)
                localctx.s =  "$pm$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1954
                self.match(DateAndTimeParser.DI)
                self.state = 1955
                self.match(DateAndTimeParser.POMERIGGIO)
                localctx.s =  "$pm$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1957
                self.match(DateAndTimeParser.DELLA)
                self.state = 1958
                self.match(DateAndTimeParser.SERA)
                localctx.s =  "$pm$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1960
                self.match(DateAndTimeParser.DI)
                self.state = 1961
                self.match(DateAndTimeParser.SERA)
                localctx.s =  "$pm$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.DateContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext
            self._month = None # MonthContext
            self.a = None # NumberContext
            self.b = None # NumberContext

        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.NumberContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.NumberContext,i)


        def month(self):
            return self.getTypedRuleContext(DateAndTimeParser.MonthContext,0)


        def PRIMO(self):
            return self.getToken(DateAndTimeParser.PRIMO, 0)

        def SLASH(self):
            return self.getToken(DateAndTimeParser.SLASH, 0)

        def maybedi(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybediContext,0)


        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate(self)




    def date(self):

        localctx = DateAndTimeParser.DateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_date)
        try:
            self.state = 1992
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1965
                localctx._number = self.number()
                self.state = 1966
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.match(DateAndTimeParser.PRIMO)
                self.state = 1970
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":01" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1973
                localctx.a = self.number()
                self.state = 1974
                self.match(DateAndTimeParser.SLASH)
                self.state = 1975
                localctx.b = self.number()
                localctx.s =  "%02d" % (localctx.b.i) + ":" + "%02d" % (localctx.a.i) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1978
                localctx._number = self.number()
                self.state = 1979
                self.maybedi()
                self.state = 1980
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1983
                localctx._number = self.number()
                self.state = 1984
                self.maybedi()
                self.state = 1985
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1986
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "_:" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1989
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":_" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybesettimanaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybesettimanaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybesettimana

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybesettimana(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybesettimana(self)




    def maybesettimana(self):

        localctx = DateAndTimeParser.MaybesettimanaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_maybesettimana)
        try:
            self.state = 1996
            token = self._input.LA(1)
            if token in [DateAndTimeParser.DI]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.SETTIMANA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.match(DateAndTimeParser.SETTIMANA)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybediContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybediContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybedi

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybedi(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybedi(self)




    def maybedi(self):

        localctx = DateAndTimeParser.MaybediContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_maybedi)
        try:
            self.state = 2000
            token = self._input.LA(1)
            if token in [DateAndTimeParser.AGOSTO, DateAndTimeParser.APRILE, DateAndTimeParser.DICEMBRE, DateAndTimeParser.FEBBRAIO, DateAndTimeParser.GENNAIO, DateAndTimeParser.GIUGNO, DateAndTimeParser.LUGLIO, DateAndTimeParser.MAGGIO, DateAndTimeParser.MARZO, DateAndTimeParser.NOVEMBRE, DateAndTimeParser.OTTOBRE, DateAndTimeParser.QUESTO, DateAndTimeParser.SETTEMBRE]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.DI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.match(DateAndTimeParser.DI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybetheContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybetheContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybethe

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybethe(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybethe(self)




    def maybethe(self):

        localctx = DateAndTimeParser.MaybetheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_maybethe)
        try:
            self.state = 2004
            token = self._input.LA(1)
            if token in [DateAndTimeParser.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.IL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.match(DateAndTimeParser.IL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.EandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def E(self):
            return self.getToken(DateAndTimeParser.E, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_eand

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterEand(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitEand(self)




    def eand(self):

        localctx = DateAndTimeParser.EandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eand)
        try:
            self.state = 2008
            token = self._input.LA(1)
            if token in [DateAndTimeParser.DUE, DateAndTimeParser.NUMBER, DateAndTimeParser.QUATTRO, DateAndTimeParser.TRE, DateAndTimeParser.UN, DateAndTimeParser.UNA]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.E]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007
                self.match(DateAndTimeParser.E)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybealleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybealleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALLE(self):
            return self.getToken(DateAndTimeParser.ALLE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybealle

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybealle(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybealle(self)




    def maybealle(self):

        localctx = DateAndTimeParser.MaybealleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_maybealle)
        try:
            self.state = 2012
            token = self._input.LA(1)
            if token in [DateAndTimeParser.DUE, DateAndTimeParser.NUMBER, DateAndTimeParser.ORE, DateAndTimeParser.QUATTRO, DateAndTimeParser.TRE, DateAndTimeParser.UN, DateAndTimeParser.UNA, DateAndTimeParser.THREEDIGNUM, DateAndTimeParser.TIMENUM]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.ALLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(DateAndTimeParser.ALLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybeoreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybeoreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ORE(self):
            return self.getToken(DateAndTimeParser.ORE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybeore

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybeore(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybeore(self)




    def maybeore(self):

        localctx = DateAndTimeParser.MaybeoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_maybeore)
        try:
            self.state = 2016
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.match(DateAndTimeParser.ORE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MonthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MonthContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None

        def GENNAIO(self):
            return self.getToken(DateAndTimeParser.GENNAIO, 0)

        def FEBBRAIO(self):
            return self.getToken(DateAndTimeParser.FEBBRAIO, 0)

        def MARZO(self):
            return self.getToken(DateAndTimeParser.MARZO, 0)

        def APRILE(self):
            return self.getToken(DateAndTimeParser.APRILE, 0)

        def MAGGIO(self):
            return self.getToken(DateAndTimeParser.MAGGIO, 0)

        def GIUGNO(self):
            return self.getToken(DateAndTimeParser.GIUGNO, 0)

        def LUGLIO(self):
            return self.getToken(DateAndTimeParser.LUGLIO, 0)

        def AGOSTO(self):
            return self.getToken(DateAndTimeParser.AGOSTO, 0)

        def SETTEMBRE(self):
            return self.getToken(DateAndTimeParser.SETTEMBRE, 0)

        def OTTOBRE(self):
            return self.getToken(DateAndTimeParser.OTTOBRE, 0)

        def NOVEMBRE(self):
            return self.getToken(DateAndTimeParser.NOVEMBRE, 0)

        def DICEMBRE(self):
            return self.getToken(DateAndTimeParser.DICEMBRE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth(self)




    def month(self):

        localctx = DateAndTimeParser.MonthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_month)
        try:
            self.state = 2042
            token = self._input.LA(1)
            if token in [DateAndTimeParser.GENNAIO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2018
                self.match(DateAndTimeParser.GENNAIO)
                localctx.i =  1 

            elif token in [DateAndTimeParser.FEBBRAIO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2020
                self.match(DateAndTimeParser.FEBBRAIO)
                localctx.i =  2 

            elif token in [DateAndTimeParser.MARZO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2022
                self.match(DateAndTimeParser.MARZO)
                localctx.i =  3 

            elif token in [DateAndTimeParser.APRILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2024
                self.match(DateAndTimeParser.APRILE)
                localctx.i =  4 

            elif token in [DateAndTimeParser.MAGGIO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2026
                self.match(DateAndTimeParser.MAGGIO)
                localctx.i =  5 

            elif token in [DateAndTimeParser.GIUGNO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2028
                self.match(DateAndTimeParser.GIUGNO)
                localctx.i =  6 

            elif token in [DateAndTimeParser.LUGLIO]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2030
                self.match(DateAndTimeParser.LUGLIO)
                localctx.i =  7 

            elif token in [DateAndTimeParser.AGOSTO]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2032
                self.match(DateAndTimeParser.AGOSTO)
                localctx.i =  8 

            elif token in [DateAndTimeParser.SETTEMBRE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2034
                self.match(DateAndTimeParser.SETTEMBRE)
                localctx.i =  9 

            elif token in [DateAndTimeParser.OTTOBRE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2036
                self.match(DateAndTimeParser.OTTOBRE)
                localctx.i =  10 

            elif token in [DateAndTimeParser.NOVEMBRE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2038
                self.match(DateAndTimeParser.NOVEMBRE)
                localctx.i =  11 

            elif token in [DateAndTimeParser.DICEMBRE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2040
                self.match(DateAndTimeParser.DICEMBRE)
                localctx.i =  12 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.DurationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._timecomponents = None # TimecomponentsContext

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def timecomponents(self):
            return self.getTypedRuleContext(DateAndTimeParser.TimecomponentsContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDuration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDuration(self)




    def duration(self):

        localctx = DateAndTimeParser.DurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_duration)
        try:
            self.state = 2051
            token = self._input.LA(1)
            if token in [DateAndTimeParser.PER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.match(DateAndTimeParser.PER)
                self.state = 2045
                localctx._timecomponents = self.timecomponents()
                localctx.s =  localctx._timecomponents.s 

            elif token in [DateAndTimeParser.DUE, DateAndTimeParser.NUMBER, DateAndTimeParser.QUATTRO, DateAndTimeParser.TRE, DateAndTimeParser.UN, DateAndTimeParser.UNA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2048
                localctx._timecomponents = self.timecomponents()
                localctx.s =  localctx._timecomponents.s 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimecomponentsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.TimecomponentsContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self.a = None # NumberContext
            self.b = None # NumberContext
            self.c = None # NumberContext
            self._number = None # NumberContext

        def ORE(self):
            return self.getToken(DateAndTimeParser.ORE, 0)

        def MINUTI(self):
            return self.getToken(DateAndTimeParser.MINUTI, 0)

        def eand(self):
            return self.getTypedRuleContext(DateAndTimeParser.EandContext,0)


        def SECONDI(self):
            return self.getToken(DateAndTimeParser.SECONDI, 0)

        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.NumberContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.NumberContext,i)


        def E(self):
            return self.getToken(DateAndTimeParser.E, 0)

        def UN(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.UN)
            else:
                return self.getToken(DateAndTimeParser.UN, i)

        def QUARTO(self):
            return self.getToken(DateAndTimeParser.QUARTO, 0)

        def MEZZO(self):
            return self.getToken(DateAndTimeParser.MEZZO, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def QUARTI(self):
            return self.getToken(DateAndTimeParser.QUARTI, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_timecomponents

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTimecomponents(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTimecomponents(self)




    def timecomponents(self):

        localctx = DateAndTimeParser.TimecomponentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timecomponents)
        try:
            self.state = 2135
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                localctx.a = self.number()
                self.state = 2054
                self.match(DateAndTimeParser.ORE)
                self.state = 2055
                localctx.b = self.number()
                self.state = 2056
                self.match(DateAndTimeParser.MINUTI)
                self.state = 2057
                self.eand()
                self.state = 2058
                localctx.c = self.number()
                self.state = 2059
                self.match(DateAndTimeParser.SECONDI)
                localctx.s =  "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i) + ":" + "%02d" % (localctx.c.i)  
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2062
                localctx.a = self.number()
                self.state = 2063
                self.match(DateAndTimeParser.ORE)
                self.state = 2064
                self.eand()
                self.state = 2065
                localctx.b = self.number()
                self.state = 2066
                self.match(DateAndTimeParser.MINUTI)
                localctx.s =  "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i) + ":_" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2069
                localctx.a = self.number()
                self.state = 2070
                self.match(DateAndTimeParser.ORE)
                self.state = 2071
                self.eand()
                self.state = 2072
                localctx.b = self.number()
                self.state = 2073
                self.match(DateAndTimeParser.SECONDI)
                localctx.s =  "%02d" % (localctx.a.i) + ":_:" + "%02d" % (localctx.b.i)  
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2076
                localctx.a = self.number()
                self.state = 2077
                self.match(DateAndTimeParser.MINUTI)
                self.state = 2078
                self.eand()
                self.state = 2079
                localctx.b = self.number()
                self.state = 2080
                self.match(DateAndTimeParser.SECONDI)
                localctx.s =  "_:" + "%02d" % (localctx.a.i) + ":" + "%02d" % (localctx.b.i)  
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2083
                localctx._number = self.number()
                self.state = 2084
                self.match(DateAndTimeParser.ORE)
                localctx.s =  "%02d:_:_" % (localctx._number.i)  
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2087
                localctx._number = self.number()
                self.state = 2088
                self.match(DateAndTimeParser.ORE)
                self.state = 2089
                self.match(DateAndTimeParser.E)
                self.state = 2090
                self.match(DateAndTimeParser.UN)
                self.state = 2091
                self.match(DateAndTimeParser.QUARTO)
                localctx.s =  String.format("%02d:" + 15 + ":_", localctx._number.i)  
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2094
                localctx._number = self.number()
                self.state = 2095
                self.match(DateAndTimeParser.ORE)
                self.state = 2096
                self.match(DateAndTimeParser.E)
                self.state = 2097
                self.match(DateAndTimeParser.MEZZO)
                localctx.s =  String.format("%02d:" + 30 + ":_", localctx._number.i)  
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2100
                localctx._number = self.number()
                self.state = 2101
                self.match(DateAndTimeParser.ORE)
                self.state = 2102
                self.match(DateAndTimeParser.E)
                self.state = 2103
                self.match(DateAndTimeParser.TRE)
                self.state = 2104
                self.match(DateAndTimeParser.QUARTI)
                localctx.s =  String.format("%02d:" + 45 + ":_", localctx._number.i)  
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2107
                self.match(DateAndTimeParser.UN)
                self.state = 2108
                self.match(DateAndTimeParser.ORA)
                self.state = 2109
                self.match(DateAndTimeParser.E)
                self.state = 2110
                self.match(DateAndTimeParser.UN)
                self.state = 2111
                self.match(DateAndTimeParser.QUARTO)
                localctx.s =  "01:15:_"  
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2113
                self.match(DateAndTimeParser.UN)
                self.state = 2114
                self.match(DateAndTimeParser.ORA)
                self.state = 2115
                self.match(DateAndTimeParser.E)
                self.state = 2116
                self.match(DateAndTimeParser.MEZZO)
                localctx.s =  "01:30:_"  
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2118
                self.match(DateAndTimeParser.UN)
                self.state = 2119
                self.match(DateAndTimeParser.ORA)
                self.state = 2120
                self.match(DateAndTimeParser.E)
                self.state = 2121
                self.match(DateAndTimeParser.TRE)
                self.state = 2122
                self.match(DateAndTimeParser.QUARTI)
                localctx.s =  "01:45:_"  
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2124
                self.match(DateAndTimeParser.UN)
                self.state = 2125
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "01:_:_"  
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2127
                localctx._number = self.number()
                self.state = 2128
                self.match(DateAndTimeParser.MINUTI)
                localctx.s =  "_:%02d:_" % (localctx._number.i)  
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2131
                localctx._number = self.number()
                self.state = 2132
                self.match(DateAndTimeParser.SECONDI)
                localctx.s =  "_:_:%02d" % (localctx._number.i)  
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rel_time_startContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Rel_time_startContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._timecomponents = None # TimecomponentsContext

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def timecomponents(self):
            return self.getTypedRuleContext(DateAndTimeParser.TimecomponentsContext,0)


        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_rel_time_start

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterRel_time_start(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitRel_time_start(self)




    def rel_time_start(self):

        localctx = DateAndTimeParser.Rel_time_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rel_time_start)
        try:
            self.state = 2167
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(DateAndTimeParser.DOPO)
                self.state = 2138
                localctx._timecomponents = self.timecomponents()
                localctx.s =  "+:" + localctx._timecomponents.s 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                self.match(DateAndTimeParser.FRA)
                self.state = 2142
                localctx._timecomponents = self.timecomponents()
                localctx.s =  "+:" + localctx._timecomponents.s 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2145
                localctx._timecomponents = self.timecomponents()
                self.state = 2146
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "+:" + localctx._timecomponents.s 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2149
                localctx._timecomponents = self.timecomponents()
                self.state = 2150
                self.match(DateAndTimeParser.DA)
                self.state = 2151
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "+:" + localctx._timecomponents.s 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2154
                localctx._timecomponents = self.timecomponents()
                self.state = 2155
                self.match(DateAndTimeParser.DA)
                self.state = 2156
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "+:" + localctx._timecomponents.s 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2159
                localctx._timecomponents = self.timecomponents()
                self.state = 2160
                self.match(DateAndTimeParser.FA)
                localctx.s =  "-:" + localctx._timecomponents.s 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2163
                localctx._timecomponents = self.timecomponents()
                self.state = 2164
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "-:" + localctx._timecomponents.s 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeasonContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.SeasonContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def AUTUNNO(self):
            return self.getToken(DateAndTimeParser.AUTUNNO, 0)

        def ESTATE(self):
            return self.getToken(DateAndTimeParser.ESTATE, 0)

        def INVERNO(self):
            return self.getToken(DateAndTimeParser.INVERNO, 0)

        def PRIMAVERA(self):
            return self.getToken(DateAndTimeParser.PRIMAVERA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_season

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterSeason(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitSeason(self)




    def season(self):

        localctx = DateAndTimeParser.SeasonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_season)
        try:
            self.state = 2177
            token = self._input.LA(1)
            if token in [DateAndTimeParser.AUTUNNO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2169
                self.match(DateAndTimeParser.AUTUNNO)
                localctx.s =  "$autumn$" 

            elif token in [DateAndTimeParser.ESTATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2171
                self.match(DateAndTimeParser.ESTATE)
                localctx.s =  "$summer$" 

            elif token in [DateAndTimeParser.INVERNO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2173
                self.match(DateAndTimeParser.INVERNO)
                localctx.s =  "$winter$" 

            elif token in [DateAndTimeParser.PRIMAVERA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2175
                self.match(DateAndTimeParser.PRIMAVERA)
                localctx.s =  "$spring$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HolidayContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.HolidayContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def FERRAGOSTO(self):
            return self.getToken(DateAndTimeParser.FERRAGOSTO, 0)

        def NATALE(self):
            return self.getToken(DateAndTimeParser.NATALE, 0)

        def PASQUA(self):
            return self.getToken(DateAndTimeParser.PASQUA, 0)

        def SANVALENTINO(self):
            return self.getToken(DateAndTimeParser.SANVALENTINO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_holiday

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterHoliday(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitHoliday(self)




    def holiday(self):

        localctx = DateAndTimeParser.HolidayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_holiday)
        try:
            self.state = 2187
            token = self._input.LA(1)
            if token in [DateAndTimeParser.FERRAGOSTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.match(DateAndTimeParser.FERRAGOSTO)
                localctx.s =  "$feast_of_the_assumption$" 

            elif token in [DateAndTimeParser.NATALE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2181
                self.match(DateAndTimeParser.NATALE)
                localctx.s =  "$christmas$" 

            elif token in [DateAndTimeParser.PASQUA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2183
                self.match(DateAndTimeParser.PASQUA)
                localctx.s =  "$easter$" 

            elif token in [DateAndTimeParser.SANVALENTINO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2185
                self.match(DateAndTimeParser.SANVALENTINO)
                localctx.s =  "$valentine$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Season_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Season_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def QUESTA(self):
            return self.getToken(DateAndTimeParser.QUESTA, 0)

        def STAGIONE(self):
            return self.getToken(DateAndTimeParser.STAGIONE, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def VENTURA(self):
            return self.getToken(DateAndTimeParser.VENTURA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_season_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterSeason_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitSeason_relative(self)




    def season_relative(self):

        localctx = DateAndTimeParser.Season_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_season_relative)
        try:
            self.state = 2227
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2189
                self.match(DateAndTimeParser.QUESTA)
                self.state = 2190
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2192
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2193
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2195
                self.match(DateAndTimeParser.SCORSA)
                self.state = 2196
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2198
                self.match(DateAndTimeParser.UNA)
                self.state = 2199
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2200
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2202
                self.match(DateAndTimeParser.UNA)
                self.state = 2203
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2204
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2206
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2207
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2209
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 2210
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2212
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2213
                self.match(DateAndTimeParser.VENTURA)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2215
                self.match(DateAndTimeParser.FRA)
                self.state = 2216
                self.match(DateAndTimeParser.UNA)
                self.state = 2217
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2219
                self.match(DateAndTimeParser.DOPO)
                self.state = 2220
                self.match(DateAndTimeParser.UNA)
                self.state = 2221
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2223
                self.match(DateAndTimeParser.UNA)
                self.state = 2224
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 2225
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$season:1$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.NumberContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._NUMBER = None # Token

        def NUMBER(self):
            return self.getToken(DateAndTimeParser.NUMBER, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def DUE(self):
            return self.getToken(DateAndTimeParser.DUE, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def QUATTRO(self):
            return self.getToken(DateAndTimeParser.QUATTRO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_number

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterNumber(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitNumber(self)




    def number(self):

        localctx = DateAndTimeParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_number)
        try:
            self.state = 2241
            token = self._input.LA(1)
            if token in [DateAndTimeParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                localctx._NUMBER = self.match(DateAndTimeParser.NUMBER)
                localctx.i =  Integer.parseInt((None if localctx._NUMBER is None else localctx._NUMBER.text))

            elif token in [DateAndTimeParser.UN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2231
                self.match(DateAndTimeParser.UN)
                localctx.i =  1 

            elif token in [DateAndTimeParser.UNA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2233
                self.match(DateAndTimeParser.UNA)
                localctx.i =  1 

            elif token in [DateAndTimeParser.DUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2235
                self.match(DateAndTimeParser.DUE)
                localctx.i =  2 

            elif token in [DateAndTimeParser.TRE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2237
                self.match(DateAndTimeParser.TRE)
                localctx.i =  3 

            elif token in [DateAndTimeParser.QUATTRO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2239
                self.match(DateAndTimeParser.QUATTRO)
                localctx.i =  4 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThreedignumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.ThreedignumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._THREEDIGNUM = None # Token

        def THREEDIGNUM(self):
            return self.getToken(DateAndTimeParser.THREEDIGNUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_threedignum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterThreedignum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitThreedignum(self)




    def threedignum(self):

        localctx = DateAndTimeParser.ThreedignumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_threedignum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            localctx._THREEDIGNUM = self.match(DateAndTimeParser.THREEDIGNUM)
            localctx.i =  Integer.parseInt((None if localctx._THREEDIGNUM is None else localctx._THREEDIGNUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YearnumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.YearnumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._YEARNUM = None # Token

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_yearnum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYearnum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYearnum(self)




    def yearnum(self):

        localctx = DateAndTimeParser.YearnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_yearnum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
            localctx.i =  Integer.parseInt((None if localctx._YEARNUM is None else localctx._YEARNUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimenumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.TimenumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._TIMENUM = None # Token

        def TIMENUM(self):
            return self.getToken(DateAndTimeParser.TIMENUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_timenum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTimenum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTimenum(self)




    def timenum(self):

        localctx = DateAndTimeParser.TimenumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_timenum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
            localctx.i =  Integer.parseInt((None if localctx._TIMENUM is None else localctx._TIMENUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




