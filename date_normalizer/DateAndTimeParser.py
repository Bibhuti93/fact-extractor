# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .DateAndTimeListener import DateAndTimeListener
else:
    from DateAndTimeListener import DateAndTimeListener

from DateEnum import DateEnum

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u00a8\u072f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\3\2\7\2>\n\2\f\2\16\2A\13\2\3\2\3")
        buf.write(u"\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0194")
        buf.write(u"\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write(u"\u0223\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u02ee\n\5\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\5\6\u03a7\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\3\7\5\7\u0460\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u04af\n\b\3\t\3\t\3")
        buf.write(u"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write(u"\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04c7\n\t\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0508\n\n\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0546\n\13\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write(u"\f\3\f\3\f\3\f\3\f\5\f\u055b\n\f\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\5\r\u05b0\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\5\16\u0639\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\5\17\u068b\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u06a8")
        buf.write(u"\n\20\3\21\3\21\5\21\u06ac\n\21\3\22\3\22\5\22\u06b0")
        buf.write(u"\n\22\3\23\3\23\5\23\u06b4\n\23\3\24\3\24\5\24\u06b8")
        buf.write(u"\n\24\3\25\3\25\5\25\u06bc\n\25\3\26\3\26\5\26\u06c0")
        buf.write(u"\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write(u"\3\27\3\27\3\27\3\27\5\27\u06da\n\27\3\30\3\30\3\30\3")
        buf.write(u"\30\3\30\3\30\3\30\3\30\5\30\u06e4\n\30\3\31\3\31\3\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\5\31\u06ee\n\31\3\32\3\32\3")
        buf.write(u"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write(u"\3\32\3\32\3\32\3\32\5\32\u0716\n\32\3\33\3\33\3\33\3")
        buf.write(u"\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0724")
        buf.write(u"\n\33\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3")
        buf.write(u"\36\2\2\37\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write(u"$&(*,.\60\62\64\668:\2\2\u0873\2?\3\2\2\2\4\u0193\3\2")
        buf.write(u"\2\2\6\u0222\3\2\2\2\b\u02ed\3\2\2\2\n\u03a6\3\2\2\2")
        buf.write(u"\f\u045f\3\2\2\2\16\u04ae\3\2\2\2\20\u04c6\3\2\2\2\22")
        buf.write(u"\u0507\3\2\2\2\24\u0545\3\2\2\2\26\u055a\3\2\2\2\30\u05af")
        buf.write(u"\3\2\2\2\32\u0638\3\2\2\2\34\u068a\3\2\2\2\36\u06a7\3")
        buf.write(u"\2\2\2 \u06ab\3\2\2\2\"\u06af\3\2\2\2$\u06b3\3\2\2\2")
        buf.write(u"&\u06b7\3\2\2\2(\u06bb\3\2\2\2*\u06bf\3\2\2\2,\u06d9")
        buf.write(u"\3\2\2\2.\u06e3\3\2\2\2\60\u06ed\3\2\2\2\62\u0715\3\2")
        buf.write(u"\2\2\64\u0723\3\2\2\2\66\u0725\3\2\2\28\u0728\3\2\2\2")
        buf.write(u":\u072b\3\2\2\2<>\5\4\3\2=<\3\2\2\2>A\3\2\2\2?=\3\2\2")
        buf.write(u"\2?@\3\2\2\2@B\3\2\2\2A?\3\2\2\2BC\7\2\2\3C\3\3\2\2\2")
        buf.write(u"DE\5\6\4\2EF\b\3\1\2F\u0194\3\2\2\2GH\5\b\5\2HI\b\3\1")
        buf.write(u"\2I\u0194\3\2\2\2JK\5\n\6\2KL\b\3\1\2L\u0194\3\2\2\2")
        buf.write(u"MN\5\f\7\2NO\b\3\1\2O\u0194\3\2\2\2PQ\7j\2\2QR\5\20\t")
        buf.write(u"\2RS\7\33\2\2ST\5,\27\2TU\b\3\1\2U\u0194\3\2\2\2VW\7")
        buf.write(u"\u0084\2\2WX\5\20\t\2XY\7\33\2\2YZ\5,\27\2Z[\b\3\1\2")
        buf.write(u"[\u0194\3\2\2\2\\]\7\u0091\2\2]^\5\20\t\2^_\7\33\2\2")
        buf.write(u"_`\5,\27\2`a\b\3\1\2a\u0194\3\2\2\2bc\7r\2\2cd\5\20\t")
        buf.write(u"\2de\7\33\2\2ef\5,\27\2fg\b\3\1\2g\u0194\3\2\2\2hi\7")
        buf.write(u"y\2\2ij\5\20\t\2jk\7\33\2\2kl\5,\27\2lm\b\3\1\2m\u0194")
        buf.write(u"\3\2\2\2no\7\u0099\2\2op\5\20\t\2pq\7\33\2\2qr\5,\27")
        buf.write(u"\2rs\b\3\1\2s\u0194\3\2\2\2tu\7h\2\2uv\7\36\2\2vw\7\33")
        buf.write(u"\2\2wx\5,\27\2xy\b\3\1\2y\u0194\3\2\2\2z{\7\u0082\2\2")
        buf.write(u"{|\7\36\2\2|}\7\33\2\2}~\5,\27\2~\177\b\3\1\2\177\u0194")
        buf.write(u"\3\2\2\2\u0080\u0081\7\u0090\2\2\u0081\u0082\7\36\2\2")
        buf.write(u"\u0082\u0083\7\33\2\2\u0083\u0084\5,\27\2\u0084\u0085")
        buf.write(u"\b\3\1\2\u0085\u0194\3\2\2\2\u0086\u0087\7p\2\2\u0087")
        buf.write(u"\u0088\7\36\2\2\u0088\u0089\7\33\2\2\u0089\u008a\5,\27")
        buf.write(u"\2\u008a\u008b\b\3\1\2\u008b\u0194\3\2\2\2\u008c\u008d")
        buf.write(u"\7x\2\2\u008d\u008e\7\36\2\2\u008e\u008f\7\33\2\2\u008f")
        buf.write(u"\u0090\5,\27\2\u0090\u0091\b\3\1\2\u0091\u0194\3\2\2")
        buf.write(u"\2\u0092\u0093\7\u0097\2\2\u0093\u0094\7\36\2\2\u0094")
        buf.write(u"\u0095\7\33\2\2\u0095\u0096\5,\27\2\u0096\u0097\b\3\1")
        buf.write(u"\2\u0097\u0194\3\2\2\2\u0098\u0099\7h\2\2\u0099\u009a")
        buf.write(u"\5 \21\2\u009a\u009b\7\33\2\2\u009b\u009c\5,\27\2\u009c")
        buf.write(u"\u009d\b\3\1\2\u009d\u0194\3\2\2\2\u009e\u009f\7\u0082")
        buf.write(u"\2\2\u009f\u00a0\5 \21\2\u00a0\u00a1\7\33\2\2\u00a1\u00a2")
        buf.write(u"\5,\27\2\u00a2\u00a3\b\3\1\2\u00a3\u0194\3\2\2\2\u00a4")
        buf.write(u"\u00a5\7\u0090\2\2\u00a5\u00a6\5 \21\2\u00a6\u00a7\7")
        buf.write(u"\33\2\2\u00a7\u00a8\5,\27\2\u00a8\u00a9\b\3\1\2\u00a9")
        buf.write(u"\u0194\3\2\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac\5 \21\2")
        buf.write(u"\u00ac\u00ad\7\33\2\2\u00ad\u00ae\5,\27\2\u00ae\u00af")
        buf.write(u"\b\3\1\2\u00af\u0194\3\2\2\2\u00b0\u00b1\7x\2\2\u00b1")
        buf.write(u"\u00b2\5 \21\2\u00b2\u00b3\7\33\2\2\u00b3\u00b4\5,\27")
        buf.write(u"\2\u00b4\u00b5\b\3\1\2\u00b5\u0194\3\2\2\2\u00b6\u00b7")
        buf.write(u"\7\u0097\2\2\u00b7\u00b8\5 \21\2\u00b8\u00b9\7\33\2\2")
        buf.write(u"\u00b9\u00ba\5,\27\2\u00ba\u00bb\b\3\1\2\u00bb\u0194")
        buf.write(u"\3\2\2\2\u00bc\u00bd\5\26\f\2\u00bd\u00be\b\3\1\2\u00be")
        buf.write(u"\u0194\3\2\2\2\u00bf\u00c0\7\u0081\2\2\u00c0\u00c1\5")
        buf.write(u"\20\t\2\u00c1\u00c2\b\3\1\2\u00c2\u0194\3\2\2\2\u00c3")
        buf.write(u"\u00c4\7o\2\2\u00c4\u00c5\5\20\t\2\u00c5\u00c6\b\3\1")
        buf.write(u"\2\u00c6\u0194\3\2\2\2\u00c7\u00c8\7l\2\2\u00c8\u00c9")
        buf.write(u"\7\36\2\2\u00c9\u0194\b\3\1\2\u00ca\u00cb\7v\2\2\u00cb")
        buf.write(u"\u00cc\5\20\t\2\u00cc\u00cd\b\3\1\2\u00cd\u0194\3\2\2")
        buf.write(u"\2\u00ce\u00cf\5\20\t\2\u00cf\u00d0\7o\2\2\u00d0\u00d1")
        buf.write(u"\b\3\1\2\u00d1\u0194\3\2\2\2\u00d2\u00d3\5\20\t\2\u00d3")
        buf.write(u"\u00d4\7\u0081\2\2\u00d4\u00d5\b\3\1\2\u00d5\u0194\3")
        buf.write(u"\2\2\2\u00d6\u00d7\5\20\t\2\u00d7\u00d8\7c\2\2\u00d8")
        buf.write(u"\u00d9\b\3\1\2\u00d9\u0194\3\2\2\2\u00da\u00db\5\20\t")
        buf.write(u"\2\u00db\u00dc\7F\2\2\u00dc\u00dd\b\3\1\2\u00dd\u0194")
        buf.write(u"\3\2\2\2\u00de\u00df\5\16\b\2\u00df\u00e0\7F\2\2\u00e0")
        buf.write(u"\u00e1\b\3\1\2\u00e1\u0194\3\2\2\2\u00e2\u00e3\7o\2\2")
        buf.write(u"\u00e3\u00e4\5,\27\2\u00e4\u00e5\b\3\1\2\u00e5\u0194")
        buf.write(u"\3\2\2\2\u00e6\u00e7\7v\2\2\u00e7\u00e8\5,\27\2\u00e8")
        buf.write(u"\u00e9\b\3\1\2\u00e9\u0194\3\2\2\2\u00ea\u00eb\7\u0081")
        buf.write(u"\2\2\u00eb\u00ec\5,\27\2\u00ec\u00ed\b\3\1\2\u00ed\u0194")
        buf.write(u"\3\2\2\2\u00ee\u00ef\5,\27\2\u00ef\u00f0\7o\2\2\u00f0")
        buf.write(u"\u00f1\b\3\1\2\u00f1\u0194\3\2\2\2\u00f2\u00f3\5,\27")
        buf.write(u"\2\u00f3\u00f4\7\u0081\2\2\u00f4\u00f5\b\3\1\2\u00f5")
        buf.write(u"\u0194\3\2\2\2\u00f6\u00f7\5\36\20\2\u00f7\u00f8\7\u00a3")
        buf.write(u"\2\2\u00f8\u00f9\7\u00a6\2\2\u00f9\u00fa\b\3\1\2\u00fa")
        buf.write(u"\u0194\3\2\2\2\u00fb\u00fc\5\36\20\2\u00fc\u00fd\7\u00a6")
        buf.write(u"\2\2\u00fd\u00fe\b\3\1\2\u00fe\u0194\3\2\2\2\u00ff\u0100")
        buf.write(u"\7\u0096\2\2\u0100\u0101\7\65\2\2\u0101\u0102\5\20\t")
        buf.write(u"\2\u0102\u0103\b\3\1\2\u0103\u0194\3\2\2\2\u0104\u0105")
        buf.write(u"\7[\2\2\u0105\u0106\5\20\t\2\u0106\u0107\b\3\1\2\u0107")
        buf.write(u"\u0194\3\2\2\2\u0108\u0109\7,\2\2\u0109\u010a\7\u009a")
        buf.write(u"\2\2\u010a\u010b\7B\2\2\u010b\u0194\b\3\1\2\u010c\u010d")
        buf.write(u"\7,\2\2\u010d\u010e\7\u009a\2\2\u010e\u010f\7D\2\2\u010f")
        buf.write(u"\u0194\b\3\1\2\u0110\u0111\7,\2\2\u0111\u0112\7\u009a")
        buf.write(u"\2\2\u0112\u0113\7K\2\2\u0113\u0194\b\3\1\2\u0114\u0115")
        buf.write(u"\7,\2\2\u0115\u0116\7\u009a\2\2\u0116\u0117\7\61\2\2")
        buf.write(u"\u0117\u0194\b\3\1\2\u0118\u0119\7,\2\2\u0119\u011a\7")
        buf.write(u"\u009a\2\2\u011a\u011b\7\u009c\2\2\u011b\u0194\b\3\1")
        buf.write(u"\2\u011c\u011d\7,\2\2\u011d\u011e\7\u009a\2\2\u011e\u011f")
        buf.write(u"\7{\2\2\u011f\u0194\b\3\1\2\u0120\u0121\7,\2\2\u0121")
        buf.write(u"\u0122\7\u009b\2\2\u0122\u0123\7\36\2\2\u0123\u0194\b")
        buf.write(u"\3\1\2\u0124\u0125\7,\2\2\u0125\u0126\5\64\33\2\u0126")
        buf.write(u"\u0127\7B\2\2\u0127\u0128\b\3\1\2\u0128\u0194\3\2\2\2")
        buf.write(u"\u0129\u012a\7,\2\2\u012a\u012b\5\64\33\2\u012b\u012c")
        buf.write(u"\7D\2\2\u012c\u012d\b\3\1\2\u012d\u0194\3\2\2\2\u012e")
        buf.write(u"\u012f\7,\2\2\u012f\u0130\5\64\33\2\u0130\u0131\7K\2")
        buf.write(u"\2\u0131\u0132\b\3\1\2\u0132\u0194\3\2\2\2\u0133\u0134")
        buf.write(u"\7,\2\2\u0134\u0135\5\64\33\2\u0135\u0136\7\61\2\2\u0136")
        buf.write(u"\u0137\b\3\1\2\u0137\u0194\3\2\2\2\u0138\u0139\7,\2\2")
        buf.write(u"\u0139\u013a\5\64\33\2\u013a\u013b\7\u009c\2\2\u013b")
        buf.write(u"\u013c\b\3\1\2\u013c\u0194\3\2\2\2\u013d\u013e\7,\2\2")
        buf.write(u"\u013e\u013f\5\64\33\2\u013f\u0140\7|\2\2\u0140\u0141")
        buf.write(u"\b\3\1\2\u0141\u0194\3\2\2\2\u0142\u0143\7,\2\2\u0143")
        buf.write(u"\u0144\5\64\33\2\u0144\u0145\7{\2\2\u0145\u0146\b\3\1")
        buf.write(u"\2\u0146\u0194\3\2\2\2\u0147\u0148\7,\2\2\u0148\u0149")
        buf.write(u"\5\64\33\2\u0149\u014a\7\37\2\2\u014a\u014b\b\3\1\2\u014b")
        buf.write(u"\u0194\3\2\2\2\u014c\u014d\7,\2\2\u014d\u014e\5\64\33")
        buf.write(u"\2\u014e\u014f\7\36\2\2\u014f\u0150\b\3\1\2\u0150\u0194")
        buf.write(u"\3\2\2\2\u0151\u0152\7\36\2\2\u0152\u0153\7l\2\2\u0153")
        buf.write(u"\u0194\b\3\1\2\u0154\u0155\5\62\32\2\u0155\u0156\b\3")
        buf.write(u"\1\2\u0156\u0194\3\2\2\2\u0157\u0158\7\23\2\2\u0158\u0159")
        buf.write(u"\5\16\b\2\u0159\u015a\7\3\2\2\u015a\u015b\5\16\b\2\u015b")
        buf.write(u"\u015c\b\3\1\2\u015c\u0194\3\2\2\2\u015d\u015e\7\23\2")
        buf.write(u"\2\u015e\u015f\5\30\r\2\u015f\u0160\7\3\2\2\u0160\u0161")
        buf.write(u"\5\30\r\2\u0161\u0162\b\3\1\2\u0162\u0194\3\2\2\2\u0163")
        buf.write(u"\u0164\7\23\2\2\u0164\u0165\5\22\n\2\u0165\u0166\7\3")
        buf.write(u"\2\2\u0166\u0167\5\22\n\2\u0167\u0168\b\3\1\2\u0168\u0194")
        buf.write(u"\3\2\2\2\u0169\u016a\7\23\2\2\u016a\u016b\5\24\13\2\u016b")
        buf.write(u"\u016c\7\3\2\2\u016c\u016d\5\24\13\2\u016d\u016e\b\3")
        buf.write(u"\1\2\u016e\u0194\3\2\2\2\u016f\u0170\5\16\b\2\u0170\u0171")
        buf.write(u"\b\3\1\2\u0171\u0194\3\2\2\2\u0172\u0173\5\30\r\2\u0173")
        buf.write(u"\u0174\b\3\1\2\u0174\u0194\3\2\2\2\u0175\u0176\5\22\n")
        buf.write(u"\2\u0176\u0177\b\3\1\2\u0177\u0194\3\2\2\2\u0178\u0179")
        buf.write(u"\5\24\13\2\u0179\u017a\b\3\1\2\u017a\u0194\3\2\2\2\u017b")
        buf.write(u"\u017c\5\34\17\2\u017c\u017d\b\3\1\2\u017d\u0194\3\2")
        buf.write(u"\2\2\u017e\u017f\7\24\2\2\u017f\u0180\5\36\20\2\u0180")
        buf.write(u"\u0181\7\6\2\2\u0181\u0182\5\36\20\2\u0182\u0183\b\3")
        buf.write(u"\1\2\u0183\u0194\3\2\2\2\u0184\u0185\5\36\20\2\u0185")
        buf.write(u"\u0186\b\3\1\2\u0186\u0194\3\2\2\2\u0187\u0188\5\32\16")
        buf.write(u"\2\u0188\u0189\b\3\1\2\u0189\u0194\3\2\2\2\u018a\u018b")
        buf.write(u"\5\20\t\2\u018b\u018c\b\3\1\2\u018c\u0194\3\2\2\2\u018d")
        buf.write(u"\u018e\5\60\31\2\u018e\u018f\b\3\1\2\u018f\u0194\3\2")
        buf.write(u"\2\2\u0190\u0191\5.\30\2\u0191\u0192\b\3\1\2\u0192\u0194")
        buf.write(u"\3\2\2\2\u0193D\3\2\2\2\u0193G\3\2\2\2\u0193J\3\2\2\2")
        buf.write(u"\u0193M\3\2\2\2\u0193P\3\2\2\2\u0193V\3\2\2\2\u0193\\")
        buf.write(u"\3\2\2\2\u0193b\3\2\2\2\u0193h\3\2\2\2\u0193n\3\2\2\2")
        buf.write(u"\u0193t\3\2\2\2\u0193z\3\2\2\2\u0193\u0080\3\2\2\2\u0193")
        buf.write(u"\u0086\3\2\2\2\u0193\u008c\3\2\2\2\u0193\u0092\3\2\2")
        buf.write(u"\2\u0193\u0098\3\2\2\2\u0193\u009e\3\2\2\2\u0193\u00a4")
        buf.write(u"\3\2\2\2\u0193\u00aa\3\2\2\2\u0193\u00b0\3\2\2\2\u0193")
        buf.write(u"\u00b6\3\2\2\2\u0193\u00bc\3\2\2\2\u0193\u00bf\3\2\2")
        buf.write(u"\2\u0193\u00c3\3\2\2\2\u0193\u00c7\3\2\2\2\u0193\u00ca")
        buf.write(u"\3\2\2\2\u0193\u00ce\3\2\2\2\u0193\u00d2\3\2\2\2\u0193")
        buf.write(u"\u00d6\3\2\2\2\u0193\u00da\3\2\2\2\u0193\u00de\3\2\2")
        buf.write(u"\2\u0193\u00e2\3\2\2\2\u0193\u00e6\3\2\2\2\u0193\u00ea")
        buf.write(u"\3\2\2\2\u0193\u00ee\3\2\2\2\u0193\u00f2\3\2\2\2\u0193")
        buf.write(u"\u00f6\3\2\2\2\u0193\u00fb\3\2\2\2\u0193\u00ff\3\2\2")
        buf.write(u"\2\u0193\u0104\3\2\2\2\u0193\u0108\3\2\2\2\u0193\u010c")
        buf.write(u"\3\2\2\2\u0193\u0110\3\2\2\2\u0193\u0114\3\2\2\2\u0193")
        buf.write(u"\u0118\3\2\2\2\u0193\u011c\3\2\2\2\u0193\u0120\3\2\2")
        buf.write(u"\2\u0193\u0124\3\2\2\2\u0193\u0129\3\2\2\2\u0193\u012e")
        buf.write(u"\3\2\2\2\u0193\u0133\3\2\2\2\u0193\u0138\3\2\2\2\u0193")
        buf.write(u"\u013d\3\2\2\2\u0193\u0142\3\2\2\2\u0193\u0147\3\2\2")
        buf.write(u"\2\u0193\u014c\3\2\2\2\u0193\u0151\3\2\2\2\u0193\u0154")
        buf.write(u"\3\2\2\2\u0193\u0157\3\2\2\2\u0193\u015d\3\2\2\2\u0193")
        buf.write(u"\u0163\3\2\2\2\u0193\u0169\3\2\2\2\u0193\u016f\3\2\2")
        buf.write(u"\2\u0193\u0172\3\2\2\2\u0193\u0175\3\2\2\2\u0193\u0178")
        buf.write(u"\3\2\2\2\u0193\u017b\3\2\2\2\u0193\u017e\3\2\2\2\u0193")
        buf.write(u"\u0184\3\2\2\2\u0193\u0187\3\2\2\2\u0193\u018a\3\2\2")
        buf.write(u"\2\u0193\u018d\3\2\2\2\u0193\u0190\3\2\2\2\u0194\5\3")
        buf.write(u"\2\2\2\u0195\u0196\7#\2\2\u0196\u0197\7\65\2\2\u0197")
        buf.write(u"\u0198\7n\2\2\u0198\u0199\5\64\33\2\u0199\u019a\7/\2")
        buf.write(u"\2\u019a\u019b\b\4\1\2\u019b\u0223\3\2\2\2\u019c\u019d")
        buf.write(u"\7#\2\2\u019d\u019e\7\65\2\2\u019e\u019f\5\64\33\2\u019f")
        buf.write(u"\u01a0\7/\2\2\u01a0\u01a1\7n\2\2\u01a1\u01a2\b\4\1\2")
        buf.write(u"\u01a2\u0223\3\2\2\2\u01a3\u01a4\7#\2\2\u01a4\u01a5\7")
        buf.write(u"\65\2\2\u01a5\u01a6\5\64\33\2\u01a6\u01a7\7n\2\2\u01a7")
        buf.write(u"\u01a8\7/\2\2\u01a8\u01a9\b\4\1\2\u01a9\u0223\3\2\2\2")
        buf.write(u"\u01aa\u01ab\7U\2\2\u01ab\u01ac\7\21\2\2\u01ac\u01ad")
        buf.write(u"\7\26\2\2\u01ad\u01ae\7n\2\2\u01ae\u01af\5\64\33\2\u01af")
        buf.write(u"\u01b0\7/\2\2\u01b0\u01b1\b\4\1\2\u01b1\u0223\3\2\2\2")
        buf.write(u"\u01b2\u01b3\7U\2\2\u01b3\u01b4\7\21\2\2\u01b4\u01b5")
        buf.write(u"\7\26\2\2\u01b5\u01b6\5\64\33\2\u01b6\u01b7\7/\2\2\u01b7")
        buf.write(u"\u01b8\7n\2\2\u01b8\u01b9\b\4\1\2\u01b9\u0223\3\2\2\2")
        buf.write(u"\u01ba\u01bb\7U\2\2\u01bb\u01bc\7\21\2\2\u01bc\u01bd")
        buf.write(u"\7\26\2\2\u01bd\u01be\5\64\33\2\u01be\u01bf\7n\2\2\u01bf")
        buf.write(u"\u01c0\7/\2\2\u01c0\u01c1\b\4\1\2\u01c1\u0223\3\2\2\2")
        buf.write(u"\u01c2\u01c3\7e\2\2\u01c3\u01c4\7\65\2\2\u01c4\u01c5")
        buf.write(u"\7n\2\2\u01c5\u01c6\5\64\33\2\u01c6\u01c7\7/\2\2\u01c7")
        buf.write(u"\u01c8\b\4\1\2\u01c8\u0223\3\2\2\2\u01c9\u01ca\7e\2\2")
        buf.write(u"\u01ca\u01cb\7\65\2\2\u01cb\u01cc\5\64\33\2\u01cc\u01cd")
        buf.write(u"\7/\2\2\u01cd\u01ce\7n\2\2\u01ce\u01cf\b\4\1\2\u01cf")
        buf.write(u"\u0223\3\2\2\2\u01d0\u01d1\7e\2\2\u01d1\u01d2\7\65\2")
        buf.write(u"\2\u01d2\u01d3\5\64\33\2\u01d3\u01d4\7n\2\2\u01d4\u01d5")
        buf.write(u"\7/\2\2\u01d5\u01d6\b\4\1\2\u01d6\u0223\3\2\2\2\u01d7")
        buf.write(u"\u01d8\7#\2\2\u01d8\u01d9\7\63\2\2\u01d9\u01da\7\u0080")
        buf.write(u"\2\2\u01da\u01db\5\64\33\2\u01db\u01dc\7/\2\2\u01dc\u01dd")
        buf.write(u"\b\4\1\2\u01dd\u0223\3\2\2\2\u01de\u01df\7#\2\2\u01df")
        buf.write(u"\u01e0\7\65\2\2\u01e0\u01e1\5\64\33\2\u01e1\u01e2\7/")
        buf.write(u"\2\2\u01e2\u01e3\7\u0080\2\2\u01e3\u01e4\b\4\1\2\u01e4")
        buf.write(u"\u0223\3\2\2\2\u01e5\u01e6\7#\2\2\u01e6\u01e7\7\65\2")
        buf.write(u"\2\u01e7\u01e8\5\64\33\2\u01e8\u01e9\7\u0080\2\2\u01e9")
        buf.write(u"\u01ea\7/\2\2\u01ea\u01eb\b\4\1\2\u01eb\u0223\3\2\2\2")
        buf.write(u"\u01ec\u01ed\7#\2\2\u01ed\u01ee\7\65\2\2\u01ee\u01ef")
        buf.write(u"\7a\2\2\u01ef\u01f0\5\64\33\2\u01f0\u01f1\7/\2\2\u01f1")
        buf.write(u"\u01f2\b\4\1\2\u01f2\u0223\3\2\2\2\u01f3\u01f4\7#\2\2")
        buf.write(u"\u01f4\u01f5\7\65\2\2\u01f5\u01f6\5\64\33\2\u01f6\u01f7")
        buf.write(u"\7/\2\2\u01f7\u01f8\7a\2\2\u01f8\u01f9\b\4\1\2\u01f9")
        buf.write(u"\u0223\3\2\2\2\u01fa\u01fb\7U\2\2\u01fb\u01fc\7\21\2")
        buf.write(u"\2\u01fc\u01fd\7\25\2\2\u01fd\u01fe\7\u0080\2\2\u01fe")
        buf.write(u"\u01ff\5\64\33\2\u01ff\u0200\7/\2\2\u0200\u0201\b\4\1")
        buf.write(u"\2\u0201\u0223\3\2\2\2\u0202\u0203\7U\2\2\u0203\u0204")
        buf.write(u"\7\21\2\2\u0204\u0205\7\26\2\2\u0205\u0206\5\64\33\2")
        buf.write(u"\u0206\u0207\7/\2\2\u0207\u0208\7\u0080\2\2\u0208\u0209")
        buf.write(u"\b\4\1\2\u0209\u0223\3\2\2\2\u020a\u020b\7U\2\2\u020b")
        buf.write(u"\u020c\7\21\2\2\u020c\u020d\7\26\2\2\u020d\u020e\5\64")
        buf.write(u"\33\2\u020e\u020f\7\u0080\2\2\u020f\u0210\7/\2\2\u0210")
        buf.write(u"\u0211\b\4\1\2\u0211\u0223\3\2\2\2\u0212\u0213\7U\2\2")
        buf.write(u"\u0213\u0214\7\21\2\2\u0214\u0215\7\26\2\2\u0215\u0216")
        buf.write(u"\5\64\33\2\u0216\u0217\7/\2\2\u0217\u0218\7a\2\2\u0218")
        buf.write(u"\u0219\b\4\1\2\u0219\u0223\3\2\2\2\u021a\u021b\7U\2\2")
        buf.write(u"\u021b\u021c\7\21\2\2\u021c\u021d\7\26\2\2\u021d\u021e")
        buf.write(u"\7a\2\2\u021e\u021f\5\64\33\2\u021f\u0220\7/\2\2\u0220")
        buf.write(u"\u0221\b\4\1\2\u0221\u0223\3\2\2\2\u0222\u0195\3\2\2")
        buf.write(u"\2\u0222\u019c\3\2\2\2\u0222\u01a3\3\2\2\2\u0222\u01aa")
        buf.write(u"\3\2\2\2\u0222\u01b2\3\2\2\2\u0222\u01ba\3\2\2\2\u0222")
        buf.write(u"\u01c2\3\2\2\2\u0222\u01c9\3\2\2\2\u0222\u01d0\3\2\2")
        buf.write(u"\2\u0222\u01d7\3\2\2\2\u0222\u01de\3\2\2\2\u0222\u01e5")
        buf.write(u"\3\2\2\2\u0222\u01ec\3\2\2\2\u0222\u01f3\3\2\2\2\u0222")
        buf.write(u"\u01fa\3\2\2\2\u0222\u0202\3\2\2\2\u0222\u020a\3\2\2")
        buf.write(u"\2\u0222\u0212\3\2\2\2\u0222\u021a\3\2\2\2\u0223\7\3")
        buf.write(u"\2\2\2\u0224\u0225\7#\2\2\u0225\u0226\7>\2\2\u0226\u0227")
        buf.write(u"\7l\2\2\u0227\u0228\7\u0088\2\2\u0228\u02ee\b\5\1\2\u0229")
        buf.write(u"\u022a\7#\2\2\u022a\u022b\7>\2\2\u022b\u022c\7\u0088")
        buf.write(u"\2\2\u022c\u022d\7l\2\2\u022d\u02ee\b\5\1\2\u022e\u022f")
        buf.write(u"\7#\2\2\u022f\u0230\7\u0088\2\2\u0230\u0231\7l\2\2\u0231")
        buf.write(u"\u02ee\b\5\1\2\u0232\u0233\7#\2\2\u0233\u0234\7?\2\2")
        buf.write(u"\u0234\u0235\7m\2\2\u0235\u0236\5\64\33\2\u0236\u0237")
        buf.write(u"\7\u008a\2\2\u0237\u0238\b\5\1\2\u0238\u02ee\3\2\2\2")
        buf.write(u"\u0239\u023a\7#\2\2\u023a\u023b\7?\2\2\u023b\u023c\5")
        buf.write(u"\64\33\2\u023c\u023d\7\u008a\2\2\u023d\u023e\7m\2\2\u023e")
        buf.write(u"\u023f\b\5\1\2\u023f\u02ee\3\2\2\2\u0240\u0241\7#\2\2")
        buf.write(u"\u0241\u0242\7?\2\2\u0242\u0243\5\64\33\2\u0243\u0244")
        buf.write(u"\7m\2\2\u0244\u0245\7\u008a\2\2\u0245\u0246\b\5\1\2\u0246")
        buf.write(u"\u02ee\3\2\2\2\u0247\u0248\7U\2\2\u0248\u0249\7\21\2")
        buf.write(u"\2\u0249\u024a\7\31\2\2\u024a\u024b\7\u0088\2\2\u024b")
        buf.write(u"\u024c\7l\2\2\u024c\u02ee\b\5\1\2\u024d\u024e\7U\2\2")
        buf.write(u"\u024e\u024f\7\21\2\2\u024f\u0250\7\31\2\2\u0250\u0251")
        buf.write(u"\7l\2\2\u0251\u0252\7\u0088\2\2\u0252\u02ee\b\5\1\2\u0253")
        buf.write(u"\u0254\7U\2\2\u0254\u0255\7\21\2\2\u0255\u0256\7\33\2")
        buf.write(u"\2\u0256\u0257\7\u0088\2\2\u0257\u0258\7l\2\2\u0258\u02ee")
        buf.write(u"\b\5\1\2\u0259\u025a\7U\2\2\u025a\u025b\7\21\2\2\u025b")
        buf.write(u"\u025c\7\32\2\2\u025c\u025d\7m\2\2\u025d\u025e\5\64\33")
        buf.write(u"\2\u025e\u025f\7\u008a\2\2\u025f\u0260\b\5\1\2\u0260")
        buf.write(u"\u02ee\3\2\2\2\u0261\u0262\7U\2\2\u0262\u0263\7\21\2")
        buf.write(u"\2\u0263\u0264\7\32\2\2\u0264\u0265\5\64\33\2\u0265\u0266")
        buf.write(u"\7\u008a\2\2\u0266\u0267\7m\2\2\u0267\u0268\b\5\1\2\u0268")
        buf.write(u"\u02ee\3\2\2\2\u0269\u026a\7U\2\2\u026a\u026b\7\21\2")
        buf.write(u"\2\u026b\u026c\7\32\2\2\u026c\u026d\5\64\33\2\u026d\u026e")
        buf.write(u"\7m\2\2\u026e\u026f\7\u008a\2\2\u026f\u0270\b\5\1\2\u0270")
        buf.write(u"\u02ee\3\2\2\2\u0271\u0272\7e\2\2\u0272\u0273\7>\2\2")
        buf.write(u"\u0273\u0274\7l\2\2\u0274\u0275\7\u0088\2\2\u0275\u02ee")
        buf.write(u"\b\5\1\2\u0276\u0277\7e\2\2\u0277\u0278\7>\2\2\u0278")
        buf.write(u"\u0279\7\u0088\2\2\u0279\u027a\7l\2\2\u027a\u02ee\b\5")
        buf.write(u"\1\2\u027b\u027c\7e\2\2\u027c\u027d\7\u0088\2\2\u027d")
        buf.write(u"\u027e\7l\2\2\u027e\u02ee\b\5\1\2\u027f\u0280\7e\2\2")
        buf.write(u"\u0280\u0281\7?\2\2\u0281\u0282\7m\2\2\u0282\u0283\5")
        buf.write(u"\64\33\2\u0283\u0284\7\u008a\2\2\u0284\u0285\b\5\1\2")
        buf.write(u"\u0285\u02ee\3\2\2\2\u0286\u0287\7e\2\2\u0287\u0288\7")
        buf.write(u"?\2\2\u0288\u0289\5\64\33\2\u0289\u028a\7m\2\2\u028a")
        buf.write(u"\u028b\7\u008a\2\2\u028b\u028c\b\5\1\2\u028c\u02ee\3")
        buf.write(u"\2\2\2\u028d\u028e\7e\2\2\u028e\u028f\7?\2\2\u028f\u0290")
        buf.write(u"\5\64\33\2\u0290\u0291\7\u008a\2\2\u0291\u0292\7m\2\2")
        buf.write(u"\u0292\u0293\b\5\1\2\u0293\u02ee\3\2\2\2\u0294\u0295")
        buf.write(u"\7#\2\2\u0295\u0296\7>\2\2\u0296\u0297\7~\2\2\u0297\u0298")
        buf.write(u"\7\u0088\2\2\u0298\u02ee\b\5\1\2\u0299\u029a\7#\2\2\u029a")
        buf.write(u"\u029b\7>\2\2\u029b\u029c\7\u0088\2\2\u029c\u029d\7~")
        buf.write(u"\2\2\u029d\u02ee\b\5\1\2\u029e\u029f\7#\2\2\u029f\u02a0")
        buf.write(u"\7\u0088\2\2\u02a0\u02a1\7~\2\2\u02a1\u02ee\b\5\1\2\u02a2")
        buf.write(u"\u02a3\7#\2\2\u02a3\u02a4\7?\2\2\u02a4\u02a5\7\177\2")
        buf.write(u"\2\u02a5\u02a6\5\64\33\2\u02a6\u02a7\7\u008a\2\2\u02a7")
        buf.write(u"\u02a8\b\5\1\2\u02a8\u02ee\3\2\2\2\u02a9\u02aa\7#\2\2")
        buf.write(u"\u02aa\u02ab\7?\2\2\u02ab\u02ac\5\64\33\2\u02ac\u02ad")
        buf.write(u"\7\u008a\2\2\u02ad\u02ae\7\177\2\2\u02ae\u02af\b\5\1")
        buf.write(u"\2\u02af\u02ee\3\2\2\2\u02b0\u02b1\7#\2\2\u02b1\u02b2")
        buf.write(u"\7?\2\2\u02b2\u02b3\5\64\33\2\u02b3\u02b4\7\177\2\2\u02b4")
        buf.write(u"\u02b5\7\u008a\2\2\u02b5\u02b6\b\5\1\2\u02b6\u02ee\3")
        buf.write(u"\2\2\2\u02b7\u02b8\7#\2\2\u02b8\u02b9\7?\2\2\u02b9\u02ba")
        buf.write(u"\5\64\33\2\u02ba\u02bb\7`\2\2\u02bb\u02bc\7\u008a\2\2")
        buf.write(u"\u02bc\u02bd\b\5\1\2\u02bd\u02ee\3\2\2\2\u02be\u02bf")
        buf.write(u"\7#\2\2\u02bf\u02c0\7?\2\2\u02c0\u02c1\5\64\33\2\u02c1")
        buf.write(u"\u02c2\7\u008a\2\2\u02c2\u02c3\7`\2\2\u02c3\u02c4\b\5")
        buf.write(u"\1\2\u02c4\u02ee\3\2\2\2\u02c5\u02c6\7U\2\2\u02c6\u02c7")
        buf.write(u"\7\21\2\2\u02c7\u02c8\7\32\2\2\u02c8\u02c9\7\177\2\2")
        buf.write(u"\u02c9\u02ca\5\64\33\2\u02ca\u02cb\7\u008a\2\2\u02cb")
        buf.write(u"\u02cc\b\5\1\2\u02cc\u02ee\3\2\2\2\u02cd\u02ce\7U\2\2")
        buf.write(u"\u02ce\u02cf\7\21\2\2\u02cf\u02d0\7\32\2\2\u02d0\u02d1")
        buf.write(u"\5\64\33\2\u02d1\u02d2\7\u008a\2\2\u02d2\u02d3\7\177")
        buf.write(u"\2\2\u02d3\u02d4\b\5\1\2\u02d4\u02ee\3\2\2\2\u02d5\u02d6")
        buf.write(u"\7U\2\2\u02d6\u02d7\7\21\2\2\u02d7\u02d8\7\32\2\2\u02d8")
        buf.write(u"\u02d9\5\64\33\2\u02d9\u02da\7\177\2\2\u02da\u02db\7")
        buf.write(u"\u008a\2\2\u02db\u02dc\b\5\1\2\u02dc\u02ee\3\2\2\2\u02dd")
        buf.write(u"\u02de\7U\2\2\u02de\u02df\7\21\2\2\u02df\u02e0\7\32\2")
        buf.write(u"\2\u02e0\u02e1\5\64\33\2\u02e1\u02e2\7`\2\2\u02e2\u02e3")
        buf.write(u"\7\u008a\2\2\u02e3\u02e4\b\5\1\2\u02e4\u02ee\3\2\2\2")
        buf.write(u"\u02e5\u02e6\7U\2\2\u02e6\u02e7\7\21\2\2\u02e7\u02e8")
        buf.write(u"\7\32\2\2\u02e8\u02e9\5\64\33\2\u02e9\u02ea\7\u008a\2")
        buf.write(u"\2\u02ea\u02eb\7`\2\2\u02eb\u02ec\b\5\1\2\u02ec\u02ee")
        buf.write(u"\3\2\2\2\u02ed\u0224\3\2\2\2\u02ed\u0229\3\2\2\2\u02ed")
        buf.write(u"\u022e\3\2\2\2\u02ed\u0232\3\2\2\2\u02ed\u0239\3\2\2")
        buf.write(u"\2\u02ed\u0240\3\2\2\2\u02ed\u0247\3\2\2\2\u02ed\u024d")
        buf.write(u"\3\2\2\2\u02ed\u0253\3\2\2\2\u02ed\u0259\3\2\2\2\u02ed")
        buf.write(u"\u0261\3\2\2\2\u02ed\u0269\3\2\2\2\u02ed\u0271\3\2\2")
        buf.write(u"\2\u02ed\u0276\3\2\2\2\u02ed\u027b\3\2\2\2\u02ed\u027f")
        buf.write(u"\3\2\2\2\u02ed\u0286\3\2\2\2\u02ed\u028d\3\2\2\2\u02ed")
        buf.write(u"\u0294\3\2\2\2\u02ed\u0299\3\2\2\2\u02ed\u029e\3\2\2")
        buf.write(u"\2\u02ed\u02a2\3\2\2\2\u02ed\u02a9\3\2\2\2\u02ed\u02b0")
        buf.write(u"\3\2\2\2\u02ed\u02b7\3\2\2\2\u02ed\u02be\3\2\2\2\u02ed")
        buf.write(u"\u02c5\3\2\2\2\u02ed\u02cd\3\2\2\2\u02ed\u02d5\3\2\2")
        buf.write(u"\2\u02ed\u02dd\3\2\2\2\u02ed\u02e5\3\2\2\2\u02ee\t\3")
        buf.write(u"\2\2\2\u02ef\u02f0\7#\2\2\u02f0\u02f1\7\67\2\2\u02f1")
        buf.write(u"\u02f2\7o\2\2\u02f2\u02f3\7L\2\2\u02f3\u03a7\b\6\1\2")
        buf.write(u"\u02f4\u02f5\7#\2\2\u02f5\u02f6\7\67\2\2\u02f6\u02f7")
        buf.write(u"\7L\2\2\u02f7\u02f8\7o\2\2\u02f8\u03a7\b\6\1\2\u02f9")
        buf.write(u"\u02fa\7#\2\2\u02fa\u02fb\7\65\2\2\u02fb\u02fc\7n\2\2")
        buf.write(u"\u02fc\u02fd\5\64\33\2\u02fd\u02fe\7M\2\2\u02fe\u02ff")
        buf.write(u"\b\6\1\2\u02ff\u03a7\3\2\2\2\u0300\u0301\7#\2\2\u0301")
        buf.write(u"\u0302\7\65\2\2\u0302\u0303\5\64\33\2\u0303\u0304\7M")
        buf.write(u"\2\2\u0304\u0305\7n\2\2\u0305\u0306\b\6\1\2\u0306\u03a7")
        buf.write(u"\3\2\2\2\u0307\u0308\7#\2\2\u0308\u0309\7\65\2\2\u0309")
        buf.write(u"\u030a\5\64\33\2\u030a\u030b\7n\2\2\u030b\u030c\7M\2")
        buf.write(u"\2\u030c\u030d\b\6\1\2\u030d\u03a7\3\2\2\2\u030e\u030f")
        buf.write(u"\7U\2\2\u030f\u0310\7\21\2\2\u0310\u0311\7\27\2\2\u0311")
        buf.write(u"\u0312\7L\2\2\u0312\u0313\7o\2\2\u0313\u03a7\b\6\1\2")
        buf.write(u"\u0314\u0315\7U\2\2\u0315\u0316\7\21\2\2\u0316\u0317")
        buf.write(u"\7\27\2\2\u0317\u0318\7o\2\2\u0318\u0319\7L\2\2\u0319")
        buf.write(u"\u03a7\b\6\1\2\u031a\u031b\7U\2\2\u031b\u031c\7\21\2")
        buf.write(u"\2\u031c\u031d\7\26\2\2\u031d\u031e\7n\2\2\u031e\u031f")
        buf.write(u"\5\64\33\2\u031f\u0320\7M\2\2\u0320\u0321\b\6\1\2\u0321")
        buf.write(u"\u03a7\3\2\2\2\u0322\u0323\7U\2\2\u0323\u0324\7\21\2")
        buf.write(u"\2\u0324\u0325\7\26\2\2\u0325\u0326\5\64\33\2\u0326\u0327")
        buf.write(u"\7M\2\2\u0327\u0328\7n\2\2\u0328\u0329\b\6\1\2\u0329")
        buf.write(u"\u03a7\3\2\2\2\u032a\u032b\7U\2\2\u032b\u032c\7\21\2")
        buf.write(u"\2\u032c\u032d\7\26\2\2\u032d\u032e\5\64\33\2\u032e\u032f")
        buf.write(u"\7n\2\2\u032f\u0330\7M\2\2\u0330\u0331\b\6\1\2\u0331")
        buf.write(u"\u03a7\3\2\2\2\u0332\u0333\7e\2\2\u0333\u0334\7\67\2")
        buf.write(u"\2\u0334\u0335\7o\2\2\u0335\u0336\7L\2\2\u0336\u03a7")
        buf.write(u"\b\6\1\2\u0337\u0338\7e\2\2\u0338\u0339\7\67\2\2\u0339")
        buf.write(u"\u033a\7L\2\2\u033a\u033b\7o\2\2\u033b\u03a7\b\6\1\2")
        buf.write(u"\u033c\u033d\7e\2\2\u033d\u033e\7\65\2\2\u033e\u033f")
        buf.write(u"\7n\2\2\u033f\u0340\5\64\33\2\u0340\u0341\7M\2\2\u0341")
        buf.write(u"\u0342\b\6\1\2\u0342\u03a7\3\2\2\2\u0343\u0344\7e\2\2")
        buf.write(u"\u0344\u0345\7\65\2\2\u0345\u0346\5\64\33\2\u0346\u0347")
        buf.write(u"\7n\2\2\u0347\u0348\7M\2\2\u0348\u0349\b\6\1\2\u0349")
        buf.write(u"\u03a7\3\2\2\2\u034a\u034b\7e\2\2\u034b\u034c\7\65\2")
        buf.write(u"\2\u034c\u034d\5\64\33\2\u034d\u034e\7M\2\2\u034e\u034f")
        buf.write(u"\7n\2\2\u034f\u0350\b\6\1\2\u0350\u03a7\3\2\2\2\u0351")
        buf.write(u"\u0352\7#\2\2\u0352\u0353\7@\2\2\u0353\u0354\7\u0081")
        buf.write(u"\2\2\u0354\u0355\7L\2\2\u0355\u03a7\b\6\1\2\u0356\u0357")
        buf.write(u"\7#\2\2\u0357\u0358\7\67\2\2\u0358\u0359\7L\2\2\u0359")
        buf.write(u"\u035a\7\u0081\2\2\u035a\u03a7\b\6\1\2\u035b\u035c\7")
        buf.write(u"#\2\2\u035c\u035d\7\63\2\2\u035d\u035e\7\u0080\2\2\u035e")
        buf.write(u"\u035f\5\64\33\2\u035f\u0360\7M\2\2\u0360\u0361\b\6\1")
        buf.write(u"\2\u0361\u03a7\3\2\2\2\u0362\u0363\7#\2\2\u0363\u0364")
        buf.write(u"\7\65\2\2\u0364\u0365\5\64\33\2\u0365\u0366\7M\2\2\u0366")
        buf.write(u"\u0367\7\u0080\2\2\u0367\u0368\b\6\1\2\u0368\u03a7\3")
        buf.write(u"\2\2\2\u0369\u036a\7#\2\2\u036a\u036b\7\65\2\2\u036b")
        buf.write(u"\u036c\5\64\33\2\u036c\u036d\7\u0080\2\2\u036d\u036e")
        buf.write(u"\7M\2\2\u036e\u036f\b\6\1\2\u036f\u03a7\3\2\2\2\u0370")
        buf.write(u"\u0371\7#\2\2\u0371\u0372\7\65\2\2\u0372\u0373\5\64\33")
        buf.write(u"\2\u0373\u0374\7a\2\2\u0374\u0375\7M\2\2\u0375\u0376")
        buf.write(u"\b\6\1\2\u0376\u03a7\3\2\2\2\u0377\u0378\7#\2\2\u0378")
        buf.write(u"\u0379\7\65\2\2\u0379\u037a\5\64\33\2\u037a\u037b\7M")
        buf.write(u"\2\2\u037b\u037c\7a\2\2\u037c\u037d\b\6\1\2\u037d\u03a7")
        buf.write(u"\3\2\2\2\u037e\u037f\7U\2\2\u037f\u0380\7\21\2\2\u0380")
        buf.write(u"\u0381\7\25\2\2\u0381\u0382\7\u0080\2\2\u0382\u0383\5")
        buf.write(u"\64\33\2\u0383\u0384\7M\2\2\u0384\u0385\b\6\1\2\u0385")
        buf.write(u"\u03a7\3\2\2\2\u0386\u0387\7U\2\2\u0387\u0388\7\21\2")
        buf.write(u"\2\u0388\u0389\7\26\2\2\u0389\u038a\5\64\33\2\u038a\u038b")
        buf.write(u"\7M\2\2\u038b\u038c\7\u0080\2\2\u038c\u038d\b\6\1\2\u038d")
        buf.write(u"\u03a7\3\2\2\2\u038e\u038f\7U\2\2\u038f\u0390\7\21\2")
        buf.write(u"\2\u0390\u0391\7\26\2\2\u0391\u0392\5\64\33\2\u0392\u0393")
        buf.write(u"\7\u0080\2\2\u0393\u0394\7M\2\2\u0394\u0395\b\6\1\2\u0395")
        buf.write(u"\u03a7\3\2\2\2\u0396\u0397\7U\2\2\u0397\u0398\7\21\2")
        buf.write(u"\2\u0398\u0399\7\26\2\2\u0399\u039a\5\64\33\2\u039a\u039b")
        buf.write(u"\7a\2\2\u039b\u039c\7M\2\2\u039c\u039d\b\6\1\2\u039d")
        buf.write(u"\u03a7\3\2\2\2\u039e\u039f\7U\2\2\u039f\u03a0\7\21\2")
        buf.write(u"\2\u03a0\u03a1\7\26\2\2\u03a1\u03a2\5\64\33\2\u03a2\u03a3")
        buf.write(u"\7M\2\2\u03a3\u03a4\7a\2\2\u03a4\u03a5\b\6\1\2\u03a5")
        buf.write(u"\u03a7\3\2\2\2\u03a6\u02ef\3\2\2\2\u03a6\u02f4\3\2\2")
        buf.write(u"\2\u03a6\u02f9\3\2\2\2\u03a6\u0300\3\2\2\2\u03a6\u0307")
        buf.write(u"\3\2\2\2\u03a6\u030e\3\2\2\2\u03a6\u0314\3\2\2\2\u03a6")
        buf.write(u"\u031a\3\2\2\2\u03a6\u0322\3\2\2\2\u03a6\u032a\3\2\2")
        buf.write(u"\2\u03a6\u0332\3\2\2\2\u03a6\u0337\3\2\2\2\u03a6\u033c")
        buf.write(u"\3\2\2\2\u03a6\u0343\3\2\2\2\u03a6\u034a\3\2\2\2\u03a6")
        buf.write(u"\u0351\3\2\2\2\u03a6\u0356\3\2\2\2\u03a6\u035b\3\2\2")
        buf.write(u"\2\u03a6\u0362\3\2\2\2\u03a6\u0369\3\2\2\2\u03a6\u0370")
        buf.write(u"\3\2\2\2\u03a6\u0377\3\2\2\2\u03a6\u037e\3\2\2\2\u03a6")
        buf.write(u"\u0386\3\2\2\2\u03a6\u038e\3\2\2\2\u03a6\u0396\3\2\2")
        buf.write(u"\2\u03a6\u039e\3\2\2\2\u03a7\13\3\2\2\2\u03a8\u03a9\7")
        buf.write(u"#\2\2\u03a9\u03aa\7\67\2\2\u03aa\u03ab\7o\2\2\u03ab\u03ac")
        buf.write(u"\7\13\2\2\u03ac\u0460\b\7\1\2\u03ad\u03ae\7#\2\2\u03ae")
        buf.write(u"\u03af\7;\2\2\u03af\u03b0\7\13\2\2\u03b0\u03b1\7o\2\2")
        buf.write(u"\u03b1\u0460\b\7\1\2\u03b2\u03b3\7#\2\2\u03b3\u03b4\7")
        buf.write(u"\65\2\2\u03b4\u03b5\7n\2\2\u03b5\u03b6\5\64\33\2\u03b6")
        buf.write(u"\u03b7\7\n\2\2\u03b7\u03b8\b\7\1\2\u03b8\u0460\3\2\2")
        buf.write(u"\2\u03b9\u03ba\7#\2\2\u03ba\u03bb\7\65\2\2\u03bb\u03bc")
        buf.write(u"\5\64\33\2\u03bc\u03bd\7\n\2\2\u03bd\u03be\7n\2\2\u03be")
        buf.write(u"\u03bf\b\7\1\2\u03bf\u0460\3\2\2\2\u03c0\u03c1\7#\2\2")
        buf.write(u"\u03c1\u03c2\7\65\2\2\u03c2\u03c3\5\64\33\2\u03c3\u03c4")
        buf.write(u"\7n\2\2\u03c4\u03c5\7\n\2\2\u03c5\u03c6\b\7\1\2\u03c6")
        buf.write(u"\u0460\3\2\2\2\u03c7\u03c8\7U\2\2\u03c8\u03c9\7\21\2")
        buf.write(u"\2\u03c9\u03ca\7\30\2\2\u03ca\u03cb\7\13\2\2\u03cb\u03cc")
        buf.write(u"\7o\2\2\u03cc\u0460\b\7\1\2\u03cd\u03ce\7U\2\2\u03ce")
        buf.write(u"\u03cf\7\21\2\2\u03cf\u03d0\7\27\2\2\u03d0\u03d1\7o\2")
        buf.write(u"\2\u03d1\u03d2\7\13\2\2\u03d2\u0460\b\7\1\2\u03d3\u03d4")
        buf.write(u"\7U\2\2\u03d4\u03d5\7\21\2\2\u03d5\u03d6\7\26\2\2\u03d6")
        buf.write(u"\u03d7\7n\2\2\u03d7\u03d8\5\64\33\2\u03d8\u03d9\7\n\2")
        buf.write(u"\2\u03d9\u03da\b\7\1\2\u03da\u0460\3\2\2\2\u03db\u03dc")
        buf.write(u"\7U\2\2\u03dc\u03dd\7\21\2\2\u03dd\u03de\7\26\2\2\u03de")
        buf.write(u"\u03df\5\64\33\2\u03df\u03e0\7\n\2\2\u03e0\u03e1\7n\2")
        buf.write(u"\2\u03e1\u03e2\b\7\1\2\u03e2\u0460\3\2\2\2\u03e3\u03e4")
        buf.write(u"\7U\2\2\u03e4\u03e5\7\21\2\2\u03e5\u03e6\7\26\2\2\u03e6")
        buf.write(u"\u03e7\5\64\33\2\u03e7\u03e8\7n\2\2\u03e8\u03e9\7\n\2")
        buf.write(u"\2\u03e9\u03ea\b\7\1\2\u03ea\u0460\3\2\2\2\u03eb\u03ec")
        buf.write(u"\7e\2\2\u03ec\u03ed\7\67\2\2\u03ed\u03ee\7o\2\2\u03ee")
        buf.write(u"\u03ef\7\13\2\2\u03ef\u0460\b\7\1\2\u03f0\u03f1\7e\2")
        buf.write(u"\2\u03f1\u03f2\7;\2\2\u03f2\u03f3\7\13\2\2\u03f3\u03f4")
        buf.write(u"\7o\2\2\u03f4\u0460\b\7\1\2\u03f5\u03f6\7e\2\2\u03f6")
        buf.write(u"\u03f7\7\65\2\2\u03f7\u03f8\7n\2\2\u03f8\u03f9\5\64\33")
        buf.write(u"\2\u03f9\u03fa\7\n\2\2\u03fa\u03fb\b\7\1\2\u03fb\u0460")
        buf.write(u"\3\2\2\2\u03fc\u03fd\7e\2\2\u03fd\u03fe\7\65\2\2\u03fe")
        buf.write(u"\u03ff\5\64\33\2\u03ff\u0400\7n\2\2\u0400\u0401\7\n\2")
        buf.write(u"\2\u0401\u0402\b\7\1\2\u0402\u0460\3\2\2\2\u0403\u0404")
        buf.write(u"\7e\2\2\u0404\u0405\7\65\2\2\u0405\u0406\5\64\33\2\u0406")
        buf.write(u"\u0407\7\n\2\2\u0407\u0408\7n\2\2\u0408\u0409\b\7\1\2")
        buf.write(u"\u0409\u0460\3\2\2\2\u040a\u040b\7#\2\2\u040b\u040c\7")
        buf.write(u"@\2\2\u040c\u040d\7\u0081\2\2\u040d\u040e\7\13\2\2\u040e")
        buf.write(u"\u0460\b\7\1\2\u040f\u0410\7#\2\2\u0410\u0411\7;\2\2")
        buf.write(u"\u0411\u0412\7\13\2\2\u0412\u0413\7\u0081\2\2\u0413\u0460")
        buf.write(u"\b\7\1\2\u0414\u0415\7#\2\2\u0415\u0416\7\63\2\2\u0416")
        buf.write(u"\u0417\7\u0080\2\2\u0417\u0418\5\64\33\2\u0418\u0419")
        buf.write(u"\7\n\2\2\u0419\u041a\b\7\1\2\u041a\u0460\3\2\2\2\u041b")
        buf.write(u"\u041c\7#\2\2\u041c\u041d\7\65\2\2\u041d\u041e\5\64\33")
        buf.write(u"\2\u041e\u041f\7\n\2\2\u041f\u0420\7\u0080\2\2\u0420")
        buf.write(u"\u0421\b\7\1\2\u0421\u0460\3\2\2\2\u0422\u0423\7#\2\2")
        buf.write(u"\u0423\u0424\7\65\2\2\u0424\u0425\5\64\33\2\u0425\u0426")
        buf.write(u"\7\u0080\2\2\u0426\u0427\7\n\2\2\u0427\u0428\b\7\1\2")
        buf.write(u"\u0428\u0460\3\2\2\2\u0429\u042a\7#\2\2\u042a\u042b\7")
        buf.write(u"\65\2\2\u042b\u042c\5\64\33\2\u042c\u042d\7a\2\2\u042d")
        buf.write(u"\u042e\7\n\2\2\u042e\u042f\b\7\1\2\u042f\u0460\3\2\2")
        buf.write(u"\2\u0430\u0431\7#\2\2\u0431\u0432\7\65\2\2\u0432\u0433")
        buf.write(u"\5\64\33\2\u0433\u0434\7\n\2\2\u0434\u0435\7a\2\2\u0435")
        buf.write(u"\u0436\b\7\1\2\u0436\u0460\3\2\2\2\u0437\u0438\7U\2\2")
        buf.write(u"\u0438\u0439\7\21\2\2\u0439\u043a\7\25\2\2\u043a\u043b")
        buf.write(u"\7\u0080\2\2\u043b\u043c\5\64\33\2\u043c\u043d\7\n\2")
        buf.write(u"\2\u043d\u043e\b\7\1\2\u043e\u0460\3\2\2\2\u043f\u0440")
        buf.write(u"\7U\2\2\u0440\u0441\7\21\2\2\u0441\u0442\7\26\2\2\u0442")
        buf.write(u"\u0443\5\64\33\2\u0443\u0444\7\n\2\2\u0444\u0445\7\u0080")
        buf.write(u"\2\2\u0445\u0446\b\7\1\2\u0446\u0460\3\2\2\2\u0447\u0448")
        buf.write(u"\7U\2\2\u0448\u0449\7\21\2\2\u0449\u044a\7\26\2\2\u044a")
        buf.write(u"\u044b\5\64\33\2\u044b\u044c\7\u0080\2\2\u044c\u044d")
        buf.write(u"\7\n\2\2\u044d\u044e\b\7\1\2\u044e\u0460\3\2\2\2\u044f")
        buf.write(u"\u0450\7U\2\2\u0450\u0451\7\21\2\2\u0451\u0452\7\26\2")
        buf.write(u"\2\u0452\u0453\5\64\33\2\u0453\u0454\7a\2\2\u0454\u0455")
        buf.write(u"\7\n\2\2\u0455\u0456\b\7\1\2\u0456\u0460\3\2\2\2\u0457")
        buf.write(u"\u0458\7U\2\2\u0458\u0459\7\21\2\2\u0459\u045a\7\26\2")
        buf.write(u"\2\u045a\u045b\5\64\33\2\u045b\u045c\7\n\2\2\u045c\u045d")
        buf.write(u"\7a\2\2\u045d\u045e\b\7\1\2\u045e\u0460\3\2\2\2\u045f")
        buf.write(u"\u03a8\3\2\2\2\u045f\u03ad\3\2\2\2\u045f\u03b2\3\2\2")
        buf.write(u"\2\u045f\u03b9\3\2\2\2\u045f\u03c0\3\2\2\2\u045f\u03c7")
        buf.write(u"\3\2\2\2\u045f\u03cd\3\2\2\2\u045f\u03d3\3\2\2\2\u045f")
        buf.write(u"\u03db\3\2\2\2\u045f\u03e3\3\2\2\2\u045f\u03eb\3\2\2")
        buf.write(u"\2\u045f\u03f0\3\2\2\2\u045f\u03f5\3\2\2\2\u045f\u03fc")
        buf.write(u"\3\2\2\2\u045f\u0403\3\2\2\2\u045f\u040a\3\2\2\2\u045f")
        buf.write(u"\u040f\3\2\2\2\u045f\u0414\3\2\2\2\u045f\u041b\3\2\2")
        buf.write(u"\2\u045f\u0422\3\2\2\2\u045f\u0429\3\2\2\2\u045f\u0430")
        buf.write(u"\3\2\2\2\u045f\u0437\3\2\2\2\u045f\u043f\3\2\2\2\u045f")
        buf.write(u"\u0447\3\2\2\2\u045f\u044f\3\2\2\2\u045f\u0457\3\2\2")
        buf.write(u"\2\u0460\r\3\2\2\2\u0461\u0462\7Z\2\2\u0462\u04af\b\b")
        buf.write(u"\1\2\u0463\u0464\7\35\2\2\u0464\u04af\b\b\1\2\u0465\u0466")
        buf.write(u"\7=\2\2\u0466\u04af\b\b\1\2\u0467\u0468\7\u009a\2\2\u0468")
        buf.write(u"\u0469\7\60\2\2\u0469\u046a\7\23\2\2\u046a\u046b\7\\")
        buf.write(u"\2\2\u046b\u04af\b\b\1\2\u046c\u046d\7\u009a\2\2\u046d")
        buf.write(u"\u046e\7\60\2\2\u046e\u046f\7\23\2\2\u046f\u0470\7\4")
        buf.write(u"\2\2\u0470\u04af\b\b\1\2\u0471\u0472\7\64\2\2\u0472\u04af")
        buf.write(u"\b\b\1\2\u0473\u0474\7\u009a\2\2\u0474\u0475\7\60\2\2")
        buf.write(u"\u0475\u0476\7(\2\2\u0476\u04af\b\b\1\2\u0477\u0478\7")
        buf.write(u" \2\2\u0478\u0479\7\35\2\2\u0479\u04af\b\b\1\2\u047a")
        buf.write(u"\u047b\7!\2\2\u047b\u04af\b\b\1\2\u047c\u047d\7<\2\2")
        buf.write(u"\u047d\u04af\b\b\1\2\u047e\u047f\7\66\2\2\u047f\u04af")
        buf.write(u"\b\b\1\2\u0480\u0481\5\64\33\2\u0481\u0482\7/\2\2\u0482")
        buf.write(u"\u0483\7\23\2\2\u0483\u0484\7\4\2\2\u0484\u0485\b\b\1")
        buf.write(u"\2\u0485\u04af\3\2\2\2\u0486\u0487\5\64\33\2\u0487\u0488")
        buf.write(u"\7/\2\2\u0488\u0489\7\23\2\2\u0489\u048a\7\\\2\2\u048a")
        buf.write(u"\u048b\b\b\1\2\u048b\u04af\3\2\2\2\u048c\u048d\5\64\33")
        buf.write(u"\2\u048d\u048e\7/\2\2\u048e\u048f\7 \2\2\u048f\u0490")
        buf.write(u"\b\b\1\2\u0490\u04af\3\2\2\2\u0491\u0492\7&\2\2\u0492")
        buf.write(u"\u0493\5\64\33\2\u0493\u0494\7/\2\2\u0494\u0495\b\b\1")
        buf.write(u"\2\u0495\u04af\3\2\2\2\u0496\u0497\7 \2\2\u0497\u0498")
        buf.write(u"\5\64\33\2\u0498\u0499\7/\2\2\u0499\u049a\b\b\1\2\u049a")
        buf.write(u"\u04af\3\2\2\2\u049b\u049c\7,\2\2\u049c\u049d\5\64\33")
        buf.write(u"\2\u049d\u049e\7/\2\2\u049e\u049f\b\b\1\2\u049f\u04af")
        buf.write(u"\3\2\2\2\u04a0\u04a1\5\64\33\2\u04a1\u04a2\7/\2\2\u04a2")
        buf.write(u"\u04a3\7(\2\2\u04a3\u04a4\b\b\1\2\u04a4\u04af\3\2\2\2")
        buf.write(u"\u04a5\u04a6\5\64\33\2\u04a6\u04a7\7/\2\2\u04a7\u04a8")
        buf.write(u"\7h\2\2\u04a8\u04a9\b\b\1\2\u04a9\u04af\3\2\2\2\u04aa")
        buf.write(u"\u04ab\7\u009a\2\2\u04ab\u04ac\7\60\2\2\u04ac\u04ad\7")
        buf.write(u"h\2\2\u04ad\u04af\b\b\1\2\u04ae\u0461\3\2\2\2\u04ae\u0463")
        buf.write(u"\3\2\2\2\u04ae\u0465\3\2\2\2\u04ae\u0467\3\2\2\2\u04ae")
        buf.write(u"\u046c\3\2\2\2\u04ae\u0471\3\2\2\2\u04ae\u0473\3\2\2")
        buf.write(u"\2\u04ae\u0477\3\2\2\2\u04ae\u047a\3\2\2\2\u04ae\u047c")
        buf.write(u"\3\2\2\2\u04ae\u047e\3\2\2\2\u04ae\u0480\3\2\2\2\u04ae")
        buf.write(u"\u0486\3\2\2\2\u04ae\u048c\3\2\2\2\u04ae\u0491\3\2\2")
        buf.write(u"\2\u04ae\u0496\3\2\2\2\u04ae\u049b\3\2\2\2\u04ae\u04a0")
        buf.write(u"\3\2\2\2\u04ae\u04a5\3\2\2\2\u04ae\u04aa\3\2\2\2\u04af")
        buf.write(u"\17\3\2\2\2\u04b0\u04b1\7B\2\2\u04b1\u04c7\b\t\1\2\u04b2")
        buf.write(u"\u04b3\7D\2\2\u04b3\u04c7\b\t\1\2\u04b4\u04b5\7K\2\2")
        buf.write(u"\u04b5\u04c7\b\t\1\2\u04b6\u04b7\7\61\2\2\u04b7\u04c7")
        buf.write(u"\b\t\1\2\u04b8\u04b9\7\u009c\2\2\u04b9\u04c7\b\t\1\2")
        buf.write(u"\u04ba\u04bb\7{\2\2\u04bb\u04c7\b\t\1\2\u04bc\u04bd\7")
        buf.write(u"\36\2\2\u04bd\u04c7\b\t\1\2\u04be\u04bf\7\u00a1\2\2\u04bf")
        buf.write(u"\u04c7\b\t\1\2\u04c0\u04c1\7\u00a0\2\2\u04c1\u04c2\7")
        buf.write(u"%\2\2\u04c2\u04c7\b\t\1\2\u04c3\u04c4\7+\2\2\u04c4\u04c5")
        buf.write(u"\7\u0088\2\2\u04c5\u04c7\b\t\1\2\u04c6\u04b0\3\2\2\2")
        buf.write(u"\u04c6\u04b2\3\2\2\2\u04c6\u04b4\3\2\2\2\u04c6\u04b6")
        buf.write(u"\3\2\2\2\u04c6\u04b8\3\2\2\2\u04c6\u04ba\3\2\2\2\u04c6")
        buf.write(u"\u04bc\3\2\2\2\u04c6\u04be\3\2\2\2\u04c6\u04c0\3\2\2")
        buf.write(u"\2\u04c6\u04c3\3\2\2\2\u04c7\21\3\2\2\2\u04c8\u04c9\7")
        buf.write(u"v\2\2\u04c9\u04ca\7L\2\2\u04ca\u0508\b\n\1\2\u04cb\u04cc")
        buf.write(u"\7L\2\2\u04cc\u04cd\7\u0081\2\2\u04cd\u0508\b\n\1\2\u04ce")
        buf.write(u"\u04cf\7\u0081\2\2\u04cf\u04d0\7L\2\2\u04d0\u0508\b\n")
        buf.write(u"\1\2\u04d1\u04d2\7\u009a\2\2\u04d2\u04d3\7L\2\2\u04d3")
        buf.write(u"\u04d4\7(\2\2\u04d4\u0508\b\n\1\2\u04d5\u04d6\7\u009a")
        buf.write(u"\2\2\u04d6\u04d7\7L\2\2\u04d7\u04d8\7h\2\2\u04d8\u0508")
        buf.write(u"\b\n\1\2\u04d9\u04da\7L\2\2\u04da\u04db\7o\2\2\u04db")
        buf.write(u"\u0508\b\n\1\2\u04dc\u04dd\7o\2\2\u04dd\u04de\7L\2\2")
        buf.write(u"\u04de\u0508\b\n\1\2\u04df\u04e0\7L\2\2\u04e0\u04e1\7")
        buf.write(u"\u009e\2\2\u04e1\u0508\b\n\1\2\u04e2\u04e3\7,\2\2\u04e3")
        buf.write(u"\u04e4\7\u009a\2\2\u04e4\u04e5\7L\2\2\u04e5\u0508\b\n")
        buf.write(u"\1\2\u04e6\u04e7\7 \2\2\u04e7\u04e8\7\u009a\2\2\u04e8")
        buf.write(u"\u04e9\7L\2\2\u04e9\u0508\b\n\1\2\u04ea\u04eb\7\u009a")
        buf.write(u"\2\2\u04eb\u04ec\7L\2\2\u04ec\u04ed\7 \2\2\u04ed\u0508")
        buf.write(u"\b\n\1\2\u04ee\u04ef\7,\2\2\u04ef\u04f0\5\64\33\2\u04f0")
        buf.write(u"\u04f1\7M\2\2\u04f1\u04f2\b\n\1\2\u04f2\u0508\3\2\2\2")
        buf.write(u"\u04f3\u04f4\7 \2\2\u04f4\u04f5\5\64\33\2\u04f5\u04f6")
        buf.write(u"\7M\2\2\u04f6\u04f7\b\n\1\2\u04f7\u0508\3\2\2\2\u04f8")
        buf.write(u"\u04f9\5\64\33\2\u04f9\u04fa\7M\2\2\u04fa\u04fb\7 \2")
        buf.write(u"\2\u04fb\u04fc\b\n\1\2\u04fc\u0508\3\2\2\2\u04fd\u04fe")
        buf.write(u"\5\64\33\2\u04fe\u04ff\7M\2\2\u04ff\u0500\7(\2\2\u0500")
        buf.write(u"\u0501\b\n\1\2\u0501\u0508\3\2\2\2\u0502\u0503\5\64\33")
        buf.write(u"\2\u0503\u0504\7M\2\2\u0504\u0505\7h\2\2\u0505\u0506")
        buf.write(u"\b\n\1\2\u0506\u0508\3\2\2\2\u0507\u04c8\3\2\2\2\u0507")
        buf.write(u"\u04cb\3\2\2\2\u0507\u04ce\3\2\2\2\u0507\u04d1\3\2\2")
        buf.write(u"\2\u0507\u04d5\3\2\2\2\u0507\u04d9\3\2\2\2\u0507\u04dc")
        buf.write(u"\3\2\2\2\u0507\u04df\3\2\2\2\u0507\u04e2\3\2\2\2\u0507")
        buf.write(u"\u04e6\3\2\2\2\u0507\u04ea\3\2\2\2\u0507\u04ee\3\2\2")
        buf.write(u"\2\u0507\u04f3\3\2\2\2\u0507\u04f8\3\2\2\2\u0507\u04fd")
        buf.write(u"\3\2\2\2\u0507\u0502\3\2\2\2\u0508\23\3\2\2\2\u0509\u050a")
        buf.write(u"\7t\2\2\u050a\u050b\7\13\2\2\u050b\u0546\b\13\1\2\u050c")
        buf.write(u"\u050d\7\13\2\2\u050d\u050e\7\u0081\2\2\u050e\u0546\b")
        buf.write(u"\13\1\2\u050f\u0510\7\u0081\2\2\u0510\u0511\7\13\2\2")
        buf.write(u"\u0511\u0546\b\13\1\2\u0512\u0513\7\u009a\2\2\u0513\u0514")
        buf.write(u"\7\13\2\2\u0514\u0515\7(\2\2\u0515\u0546\b\13\1\2\u0516")
        buf.write(u"\u0517\7\u009a\2\2\u0517\u0518\7\13\2\2\u0518\u0519\7")
        buf.write(u"h\2\2\u0519\u0546\b\13\1\2\u051a\u051b\7\13\2\2\u051b")
        buf.write(u"\u051c\7o\2\2\u051c\u0546\b\13\1\2\u051d\u051e\7\13\2")
        buf.write(u"\2\u051e\u051f\7\u009e\2\2\u051f\u0546\b\13\1\2\u0520")
        buf.write(u"\u0521\7,\2\2\u0521\u0522\7\u009a\2\2\u0522\u0523\7\13")
        buf.write(u"\2\2\u0523\u0546\b\13\1\2\u0524\u0525\7 \2\2\u0525\u0526")
        buf.write(u"\7\u009a\2\2\u0526\u0527\7\13\2\2\u0527\u0546\b\13\1")
        buf.write(u"\2\u0528\u0529\7\u009a\2\2\u0529\u052a\7\13\2\2\u052a")
        buf.write(u"\u052b\7 \2\2\u052b\u0546\b\13\1\2\u052c\u052d\7,\2\2")
        buf.write(u"\u052d\u052e\5\64\33\2\u052e\u052f\7\n\2\2\u052f\u0530")
        buf.write(u"\b\13\1\2\u0530\u0546\3\2\2\2\u0531\u0532\7 \2\2\u0532")
        buf.write(u"\u0533\5\64\33\2\u0533\u0534\7\n\2\2\u0534\u0535\b\13")
        buf.write(u"\1\2\u0535\u0546\3\2\2\2\u0536\u0537\5\64\33\2\u0537")
        buf.write(u"\u0538\7\n\2\2\u0538\u0539\7 \2\2\u0539\u053a\b\13\1")
        buf.write(u"\2\u053a\u0546\3\2\2\2\u053b\u053c\5\64\33\2\u053c\u053d")
        buf.write(u"\7\n\2\2\u053d\u053e\7(\2\2\u053e\u053f\b\13\1\2\u053f")
        buf.write(u"\u0546\3\2\2\2\u0540\u0541\5\64\33\2\u0541\u0542\7\n")
        buf.write(u"\2\2\u0542\u0543\7h\2\2\u0543\u0544\b\13\1\2\u0544\u0546")
        buf.write(u"\3\2\2\2\u0545\u0509\3\2\2\2\u0545\u050c\3\2\2\2\u0545")
        buf.write(u"\u050f\3\2\2\2\u0545\u0512\3\2\2\2\u0545\u0516\3\2\2")
        buf.write(u"\2\u0545\u051a\3\2\2\2\u0545\u051d\3\2\2\2\u0545\u0520")
        buf.write(u"\3\2\2\2\u0545\u0524\3\2\2\2\u0545\u0528\3\2\2\2\u0545")
        buf.write(u"\u052c\3\2\2\2\u0545\u0531\3\2\2\2\u0545\u0536\3\2\2")
        buf.write(u"\2\u0545\u053b\3\2\2\2\u0545\u0540\3\2\2\2\u0546\25\3")
        buf.write(u"\2\2\2\u0547\u0548\7h\2\2\u0548\u0549\7\u0088\2\2\u0549")
        buf.write(u"\u055b\b\f\1\2\u054a\u054b\7\u0082\2\2\u054b\u054c\7")
        buf.write(u"\u0088\2\2\u054c\u055b\b\f\1\2\u054d\u054e\7\u0090\2")
        buf.write(u"\2\u054e\u054f\7\u0088\2\2\u054f\u055b\b\f\1\2\u0550")
        buf.write(u"\u0551\7p\2\2\u0551\u0552\7\u0088\2\2\u0552\u055b\b\f")
        buf.write(u"\1\2\u0553\u0554\7x\2\2\u0554\u0555\7\u0088\2\2\u0555")
        buf.write(u"\u055b\b\f\1\2\u0556\u0557\7\u0088\2\2\u0557\u0558\5")
        buf.write(u"\64\33\2\u0558\u0559\b\f\1\2\u0559\u055b\3\2\2\2\u055a")
        buf.write(u"\u0547\3\2\2\2\u055a\u054a\3\2\2\2\u055a\u054d\3\2\2")
        buf.write(u"\2\u055a\u0550\3\2\2\2\u055a\u0553\3\2\2\2\u055a\u0556")
        buf.write(u"\3\2\2\2\u055b\27\3\2\2\2\u055c\u055d\7u\2\2\u055d\u055e")
        buf.write(u"\7\u0088\2\2\u055e\u05b0\b\r\1\2\u055f\u0560\78\2\2\u0560")
        buf.write(u"\u0561\7\u0088\2\2\u0561\u05b0\b\r\1\2\u0562\u0563\7")
        buf.write(u"\u0088\2\2\u0563\u0564\7~\2\2\u0564\u05b0\b\r\1\2\u0565")
        buf.write(u"\u0566\7~\2\2\u0566\u0567\7\u0088\2\2\u0567\u05b0\b\r")
        buf.write(u"\1\2\u0568\u0569\7\u009b\2\2\u0569\u056a\7\u0088\2\2")
        buf.write(u"\u056a\u056b\7(\2\2\u056b\u05b0\b\r\1\2\u056c\u056d\7")
        buf.write(u"\u009b\2\2\u056d\u056e\7\u0088\2\2\u056e\u056f\7h\2\2")
        buf.write(u"\u056f\u05b0\b\r\1\2\u0570\u0571\7\u0088\2\2\u0571\u0572")
        buf.write(u"\7l\2\2\u0572\u05b0\b\r\1\2\u0573\u0574\7\u0088\2\2\u0574")
        buf.write(u"\u0575\7\u009d\2\2\u0575\u05b0\b\r\1\2\u0576\u0577\7")
        buf.write(u"l\2\2\u0577\u0578\7\u0088\2\2\u0578\u05b0\b\r\1\2\u0579")
        buf.write(u"\u057a\7,\2\2\u057a\u057b\7\u009b\2\2\u057b\u057c\7\u0088")
        buf.write(u"\2\2\u057c\u05b0\b\r\1\2\u057d\u057e\7 \2\2\u057e\u057f")
        buf.write(u"\7\u009b\2\2\u057f\u0580\7\u0088\2\2\u0580\u05b0\b\r")
        buf.write(u"\1\2\u0581\u0582\7\u009b\2\2\u0582\u0583\7\u0088\2\2")
        buf.write(u"\u0583\u0584\7 \2\2\u0584\u05b0\b\r\1\2\u0585\u0586\7")
        buf.write(u",\2\2\u0586\u0587\5\64\33\2\u0587\u0588\7\u008a\2\2\u0588")
        buf.write(u"\u0589\b\r\1\2\u0589\u05b0\3\2\2\2\u058a\u058b\7 \2\2")
        buf.write(u"\u058b\u058c\5\64\33\2\u058c\u058d\7\u008a\2\2\u058d")
        buf.write(u"\u058e\b\r\1\2\u058e\u05b0\3\2\2\2\u058f\u0590\7&\2\2")
        buf.write(u"\u0590\u0591\5\64\33\2\u0591\u0592\7\u008a\2\2\u0592")
        buf.write(u"\u0593\b\r\1\2\u0593\u05b0\3\2\2\2\u0594\u0595\5\64\33")
        buf.write(u"\2\u0595\u0596\7\u008a\2\2\u0596\u0597\7 \2\2\u0597\u0598")
        buf.write(u"\b\r\1\2\u0598\u05b0\3\2\2\2\u0599\u059a\5\64\33\2\u059a")
        buf.write(u"\u059b\7\u008a\2\2\u059b\u059c\7\23\2\2\u059c\u059d\7")
        buf.write(u"\4\2\2\u059d\u059e\b\r\1\2\u059e\u05b0\3\2\2\2\u059f")
        buf.write(u"\u05a0\5\64\33\2\u05a0\u05a1\7\u008a\2\2\u05a1\u05a2")
        buf.write(u"\7\23\2\2\u05a2\u05a3\7\\\2\2\u05a3\u05a4\b\r\1\2\u05a4")
        buf.write(u"\u05b0\3\2\2\2\u05a5\u05a6\5\64\33\2\u05a6\u05a7\7\u008a")
        buf.write(u"\2\2\u05a7\u05a8\7(\2\2\u05a8\u05a9\b\r\1\2\u05a9\u05b0")
        buf.write(u"\3\2\2\2\u05aa\u05ab\5\64\33\2\u05ab\u05ac\7\u008a\2")
        buf.write(u"\2\u05ac\u05ad\7h\2\2\u05ad\u05ae\b\r\1\2\u05ae\u05b0")
        buf.write(u"\3\2\2\2\u05af\u055c\3\2\2\2\u05af\u055f\3\2\2\2\u05af")
        buf.write(u"\u0562\3\2\2\2\u05af\u0565\3\2\2\2\u05af\u0568\3\2\2")
        buf.write(u"\2\u05af\u056c\3\2\2\2\u05af\u0570\3\2\2\2\u05af\u0573")
        buf.write(u"\3\2\2\2\u05af\u0576\3\2\2\2\u05af\u0579\3\2\2\2\u05af")
        buf.write(u"\u057d\3\2\2\2\u05af\u0581\3\2\2\2\u05af\u0585\3\2\2")
        buf.write(u"\2\u05af\u058a\3\2\2\2\u05af\u058f\3\2\2\2\u05af\u0594")
        buf.write(u"\3\2\2\2\u05af\u0599\3\2\2\2\u05af\u059f\3\2\2\2\u05af")
        buf.write(u"\u05a5\3\2\2\2\u05af\u05aa\3\2\2\2\u05b0\31\3\2\2\2\u05b1")
        buf.write(u"\u05b2\7\u00a6\2\2\u05b2\u0639\b\16\1\2\u05b3\u05b4\7")
        buf.write(u"U\2\2\u05b4\u05b5\7\u00a6\2\2\u05b5\u0639\b\16\1\2\u05b6")
        buf.write(u"\u05b7\7t\2\2\u05b7\u05b8\7\13\2\2\u05b8\u0639\b\16\1")
        buf.write(u"\2\u05b9\u05ba\7\13\2\2\u05ba\u05bb\7\u00a6\2\2\u05bb")
        buf.write(u"\u0639\b\16\1\2\u05bc\u05bd\7\13\2\2\u05bd\u05be\7\u00a5")
        buf.write(u"\2\2\u05be\u0639\b\16\1\2\u05bf\u05c0\7\13\2\2\u05c0")
        buf.write(u"\u05c1\5\66\34\2\u05c1\u05c2\b\16\1\2\u05c2\u0639\3\2")
        buf.write(u"\2\2\u05c3\u05c4\7 \2\2\u05c4\u05c5\7\67\2\2\u05c5\u05c6")
        buf.write(u"\7\u00a6\2\2\u05c6\u0639\b\16\1\2\u05c7\u05c8\7h\2\2")
        buf.write(u"\u05c8\u05c9\7\27\2\2\u05c9\u05ca\7\u00a6\2\2\u05ca\u0639")
        buf.write(u"\b\16\1\2\u05cb\u05cc\7 \2\2\u05cc\u05cd\7;\2\2\u05cd")
        buf.write(u"\u05ce\7\13\2\2\u05ce\u05cf\7\u00a6\2\2\u05cf\u0639\b")
        buf.write(u"\16\1\2\u05d0\u05d1\7h\2\2\u05d1\u05d2\7\30\2\2\u05d2")
        buf.write(u"\u05d3\7\13\2\2\u05d3\u05d4\7\u00a6\2\2\u05d4\u0639\b")
        buf.write(u"\16\1\2\u05d5\u05d6\7\13\2\2\u05d6\u05d7\7\u0081\2\2")
        buf.write(u"\u05d7\u0639\b\16\1\2\u05d8\u05d9\7\u0081\2\2\u05d9\u05da")
        buf.write(u"\7\13\2\2\u05da\u0639\b\16\1\2\u05db\u05dc\7\13\2\2\u05dc")
        buf.write(u"\u05dd\7c\2\2\u05dd\u0639\b\16\1\2\u05de\u05df\7\u009a")
        buf.write(u"\2\2\u05df\u05e0\7\13\2\2\u05e0\u05e1\7h\2\2\u05e1\u0639")
        buf.write(u"\b\16\1\2\u05e2\u05e3\7\u009a\2\2\u05e3\u05e4\7\13\2")
        buf.write(u"\2\u05e4\u05e5\7(\2\2\u05e5\u0639\b\16\1\2\u05e6\u05e7")
        buf.write(u"\7\13\2\2\u05e7\u05e8\7o\2\2\u05e8\u0639\b\16\1\2\u05e9")
        buf.write(u"\u05ea\7o\2\2\u05ea\u05eb\7\13\2\2\u05eb\u0639\b\16\1")
        buf.write(u"\2\u05ec\u05ed\7\13\2\2\u05ed\u05ee\7\u009e\2\2\u05ee")
        buf.write(u"\u0639\b\16\1\2\u05ef\u05f0\7\u009a\2\2\u05f0\u05f1\7")
        buf.write(u"\13\2\2\u05f1\u05f2\7\23\2\2\u05f2\u05f3\7\4\2\2\u05f3")
        buf.write(u"\u0639\b\16\1\2\u05f4\u05f5\7\u009a\2\2\u05f5\u05f6\7")
        buf.write(u"\13\2\2\u05f6\u05f7\7\23\2\2\u05f7\u05f8\7\\\2\2\u05f8")
        buf.write(u"\u0639\b\16\1\2\u05f9\u05fa\7 \2\2\u05fa\u05fb\7\u009a")
        buf.write(u"\2\2\u05fb\u05fc\7\13\2\2\u05fc\u0639\b\16\1\2\u05fd")
        buf.write(u"\u05fe\7,\2\2\u05fe\u05ff\7\u009a\2\2\u05ff\u0600\7\13")
        buf.write(u"\2\2\u0600\u0639\b\16\1\2\u0601\u0602\7 \2\2\u0602\u0603")
        buf.write(u"\7\67\2\2\u0603\u0604\7\u00a6\2\2\u0604\u0639\b\16\1")
        buf.write(u"\2\u0605\u0606\7h\2\2\u0606\u0607\7\27\2\2\u0607\u0608")
        buf.write(u"\7\u00a6\2\2\u0608\u0639\b\16\1\2\u0609\u060a\7\n\2\2")
        buf.write(u"\u060a\u060b\5\64\33\2\u060b\u060c\b\16\1\2\u060c\u0639")
        buf.write(u"\3\2\2\2\u060d\u060e\5\64\33\2\u060e\u060f\7\n\2\2\u060f")
        buf.write(u"\u0610\7\23\2\2\u0610\u0611\7\4\2\2\u0611\u0612\b\16")
        buf.write(u"\1\2\u0612\u0639\3\2\2\2\u0613\u0614\5\64\33\2\u0614")
        buf.write(u"\u0615\7\n\2\2\u0615\u0616\7\23\2\2\u0616\u0617\7\\\2")
        buf.write(u"\2\u0617\u0618\b\16\1\2\u0618\u0639\3\2\2\2\u0619\u061a")
        buf.write(u"\5\64\33\2\u061a\u061b\7\n\2\2\u061b\u061c\7 \2\2\u061c")
        buf.write(u"\u061d\b\16\1\2\u061d\u0639\3\2\2\2\u061e\u061f\7 \2")
        buf.write(u"\2\u061f\u0620\5\64\33\2\u0620\u0621\7\n\2\2\u0621\u0622")
        buf.write(u"\b\16\1\2\u0622\u0639\3\2\2\2\u0623\u0624\7,\2\2\u0624")
        buf.write(u"\u0625\5\64\33\2\u0625\u0626\7\n\2\2\u0626\u0627\b\16")
        buf.write(u"\1\2\u0627\u0639\3\2\2\2\u0628\u0629\5\64\33\2\u0629")
        buf.write(u"\u062a\7\n\2\2\u062a\u062b\7(\2\2\u062b\u062c\b\16\1")
        buf.write(u"\2\u062c\u0639\3\2\2\2\u062d\u062e\5\64\33\2\u062e\u062f")
        buf.write(u"\7\n\2\2\u062f\u0630\7h\2\2\u0630\u0631\b\16\1\2\u0631")
        buf.write(u"\u0639\3\2\2\2\u0632\u0633\7\n\2\2\u0633\u0634\7\u00a6")
        buf.write(u"\2\2\u0634\u0639\b\16\1\2\u0635\u0636\7\n\2\2\u0636\u0637")
        buf.write(u"\7\u00a5\2\2\u0637\u0639\b\16\1\2\u0638\u05b1\3\2\2\2")
        buf.write(u"\u0638\u05b3\3\2\2\2\u0638\u05b6\3\2\2\2\u0638\u05b9")
        buf.write(u"\3\2\2\2\u0638\u05bc\3\2\2\2\u0638\u05bf\3\2\2\2\u0638")
        buf.write(u"\u05c3\3\2\2\2\u0638\u05c7\3\2\2\2\u0638\u05cb\3\2\2")
        buf.write(u"\2\u0638\u05d0\3\2\2\2\u0638\u05d5\3\2\2\2\u0638\u05d8")
        buf.write(u"\3\2\2\2\u0638\u05db\3\2\2\2\u0638\u05de\3\2\2\2\u0638")
        buf.write(u"\u05e2\3\2\2\2\u0638\u05e6\3\2\2\2\u0638\u05e9\3\2\2")
        buf.write(u"\2\u0638\u05ec\3\2\2\2\u0638\u05ef\3\2\2\2\u0638\u05f4")
        buf.write(u"\3\2\2\2\u0638\u05f9\3\2\2\2\u0638\u05fd\3\2\2\2\u0638")
        buf.write(u"\u0601\3\2\2\2\u0638\u0605\3\2\2\2\u0638\u0609\3\2\2")
        buf.write(u"\2\u0638\u060d\3\2\2\2\u0638\u0613\3\2\2\2\u0638\u0619")
        buf.write(u"\3\2\2\2\u0638\u061e\3\2\2\2\u0638\u0623\3\2\2\2\u0638")
        buf.write(u"\u0628\3\2\2\2\u0638\u062d\3\2\2\2\u0638\u0632\3\2\2")
        buf.write(u"\2\u0638\u0635\3\2\2\2\u0639\33\3\2\2\2\u063a\u063b\7")
        buf.write(u"[\2\2\u063b\u063c\7\60\2\2\u063c\u068b\b\17\1\2\u063d")
        buf.write(u"\u063e\7z\2\2\u063e\u068b\b\17\1\2\u063f\u0640\7\u0096")
        buf.write(u"\2\2\u0640\u0641\7\65\2\2\u0641\u0642\7/\2\2\u0642\u068b")
        buf.write(u"\b\17\1\2\u0643\u0644\7.\2\2\u0644\u068b\b\17\1\2\u0645")
        buf.write(u"\u0646\7\60\2\2\u0646\u0647\7 \2\2\u0647\u0648\7\60\2")
        buf.write(u"\2\u0648\u068b\b\17\1\2\u0649\u064a\7[\2\2\u064a\u064b")
        buf.write(u"\7\u0088\2\2\u064b\u068b\b\17\1\2\u064c\u064d\7\u0089")
        buf.write(u"\2\2\u064d\u068b\b\17\1\2\u064e\u064f\7\u0095\2\2\u064f")
        buf.write(u"\u0650\7?\2\2\u0650\u0651\7\u008a\2\2\u0651\u068b\b\17")
        buf.write(u"\1\2\u0652\u0653\7\u0088\2\2\u0653\u0654\7 \2\2\u0654")
        buf.write(u"\u0655\7\u0088\2\2\u0655\u068b\b\17\1\2\u0656\u0657\7")
        buf.write(u"\17\2\2\u0657\u068b\b\17\1\2\u0658\u0659\7[\2\2\u0659")
        buf.write(u"\u065a\7\"\2\2\u065a\u065b\7\u008a\2\2\u065b\u068b\b")
        buf.write(u"\17\1\2\u065c\u065d\7\"\2\2\u065d\u065e\7\u009f\2\2\u065e")
        buf.write(u"\u065f\7\6\2\2\u065f\u0660\7L\2\2\u0660\u068b\b\17\1")
        buf.write(u"\2\u0661\u0662\7[\2\2\u0662\u0663\7L\2\2\u0663\u068b")
        buf.write(u"\b\17\1\2\u0664\u0665\7J\2\2\u0665\u068b\b\17\1\2\u0666")
        buf.write(u"\u0667\7\u0096\2\2\u0667\u0668\7\65\2\2\u0668\u0669\7")
        buf.write(u"M\2\2\u0669\u068b\b\17\1\2\u066a\u066b\7L\2\2\u066b\u066c")
        buf.write(u"\7 \2\2\u066c\u066d\7L\2\2\u066d\u068b\b\17\1\2\u066e")
        buf.write(u"\u066f\7[\2\2\u066f\u0670\7\u0092\2\2\u0670\u0671\7M")
        buf.write(u"\2\2\u0671\u068b\b\17\1\2\u0672\u0673\7\u0094\2\2\u0673")
        buf.write(u"\u068b\b\17\1\2\u0674\u0675\7s\2\2\u0675\u0676\7\u009f")
        buf.write(u"\2\2\u0676\u0677\7\7\2\2\u0677\u0678\7\13\2\2\u0678\u068b")
        buf.write(u"\b\17\1\2\u0679\u067a\7s\2\2\u067a\u067b\7\u009f\2\2")
        buf.write(u"\u067b\u067c\7;\2\2\u067c\u067d\7\13\2\2\u067d\u068b")
        buf.write(u"\b\17\1\2\u067e\u067f\7[\2\2\u067f\u0680\7\u0093\2\2")
        buf.write(u"\u0680\u068b\b\17\1\2\u0681\u0682\7[\2\2\u0682\u0683")
        buf.write(u"\7\13\2\2\u0683\u068b\b\17\1\2\u0684\u0685\7\u0096\2")
        buf.write(u"\2\u0685\u0686\7\63\2\2\u0686\u0687\7\n\2\2\u0687\u068b")
        buf.write(u"\b\17\1\2\u0688\u0689\7\f\2\2\u0689\u068b\b\17\1\2\u068a")
        buf.write(u"\u063a\3\2\2\2\u068a\u063d\3\2\2\2\u068a\u063f\3\2\2")
        buf.write(u"\2\u068a\u0643\3\2\2\2\u068a\u0645\3\2\2\2\u068a\u0649")
        buf.write(u"\3\2\2\2\u068a\u064c\3\2\2\2\u068a\u064e\3\2\2\2\u068a")
        buf.write(u"\u0652\3\2\2\2\u068a\u0656\3\2\2\2\u068a\u0658\3\2\2")
        buf.write(u"\2\u068a\u065c\3\2\2\2\u068a\u0661\3\2\2\2\u068a\u0664")
        buf.write(u"\3\2\2\2\u068a\u0666\3\2\2\2\u068a\u066a\3\2\2\2\u068a")
        buf.write(u"\u066e\3\2\2\2\u068a\u0672\3\2\2\2\u068a\u0674\3\2\2")
        buf.write(u"\2\u068a\u0679\3\2\2\2\u068a\u067e\3\2\2\2\u068a\u0681")
        buf.write(u"\3\2\2\2\u068a\u0684\3\2\2\2\u068a\u0688\3\2\2\2\u068b")
        buf.write(u"\35\3\2\2\2\u068c\u068d\5\64\33\2\u068d\u068e\5,\27\2")
        buf.write(u"\u068e\u068f\b\20\1\2\u068f\u06a8\3\2\2\2\u0690\u0691")
        buf.write(u"\7j\2\2\u0691\u0692\5,\27\2\u0692\u0693\b\20\1\2\u0693")
        buf.write(u"\u06a8\3\2\2\2\u0694\u0695\5\64\33\2\u0695\u0696\7\u00a3")
        buf.write(u"\2\2\u0696\u0697\5\64\33\2\u0697\u0698\b\20\1\2\u0698")
        buf.write(u"\u06a8\3\2\2\2\u0699\u069a\5\64\33\2\u069a\u069b\5\"")
        buf.write(u"\22\2\u069b\u069c\5,\27\2\u069c\u069d\b\20\1\2\u069d")
        buf.write(u"\u06a8\3\2\2\2\u069e\u069f\5\64\33\2\u069f\u06a0\5\"")
        buf.write(u"\22\2\u06a0\u06a1\7v\2\2\u06a1\u06a2\7L\2\2\u06a2\u06a3")
        buf.write(u"\b\20\1\2\u06a3\u06a8\3\2\2\2\u06a4\u06a5\5,\27\2\u06a5")
        buf.write(u"\u06a6\b\20\1\2\u06a6\u06a8\3\2\2\2\u06a7\u068c\3\2\2")
        buf.write(u"\2\u06a7\u0690\3\2\2\2\u06a7\u0694\3\2\2\2\u06a7\u0699")
        buf.write(u"\3\2\2\2\u06a7\u069e\3\2\2\2\u06a7\u06a4\3\2\2\2\u06a8")
        buf.write(u"\37\3\2\2\2\u06a9\u06ac\3\2\2\2\u06aa\u06ac\7\u0088\2")
        buf.write(u"\2\u06ab\u06a9\3\2\2\2\u06ab\u06aa\3\2\2\2\u06ac!\3\2")
        buf.write(u"\2\2\u06ad\u06b0\3\2\2\2\u06ae\u06b0\7\33\2\2\u06af\u06ad")
        buf.write(u"\3\2\2\2\u06af\u06ae\3\2\2\2\u06b0#\3\2\2\2\u06b1\u06b4")
        buf.write(u"\3\2\2\2\u06b2\u06b4\7\67\2\2\u06b3\u06b1\3\2\2\2\u06b3")
        buf.write(u"\u06b2\3\2\2\2\u06b4%\3\2\2\2\u06b5\u06b8\3\2\2\2\u06b6")
        buf.write(u"\u06b8\7$\2\2\u06b7\u06b5\3\2\2\2\u06b7\u06b6\3\2\2\2")
        buf.write(u"\u06b8\'\3\2\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06bc\7\b")
        buf.write(u"\2\2\u06bb\u06b9\3\2\2\2\u06bb\u06ba\3\2\2\2\u06bc)\3")
        buf.write(u"\2\2\2\u06bd\u06c0\3\2\2\2\u06be\u06c0\7]\2\2\u06bf\u06bd")
        buf.write(u"\3\2\2\2\u06bf\u06be\3\2\2\2\u06c0+\3\2\2\2\u06c1\u06c2")
        buf.write(u"\7-\2\2\u06c2\u06da\b\27\1\2\u06c3\u06c4\7)\2\2\u06c4")
        buf.write(u"\u06da\b\27\1\2\u06c5\u06c6\7E\2\2\u06c6\u06da\b\27\1")
        buf.write(u"\2\u06c7\u06c8\7\r\2\2\u06c8\u06da\b\27\1\2\u06c9\u06ca")
        buf.write(u"\7C\2\2\u06ca\u06da\b\27\1\2\u06cb\u06cc\7\62\2\2\u06cc")
        buf.write(u"\u06da\b\27\1\2\u06cd\u06ce\7A\2\2\u06ce\u06da\b\27\1")
        buf.write(u"\2\u06cf\u06d0\7\5\2\2\u06d0\u06da\b\27\1\2\u06d1\u06d2")
        buf.write(u"\7\u0087\2\2\u06d2\u06da\b\27\1\2\u06d3\u06d4\7^\2\2")
        buf.write(u"\u06d4\u06da\b\27\1\2\u06d5\u06d6\7X\2\2\u06d6\u06da")
        buf.write(u"\b\27\1\2\u06d7\u06d8\7\34\2\2\u06d8\u06da\b\27\1\2\u06d9")
        buf.write(u"\u06c1\3\2\2\2\u06d9\u06c3\3\2\2\2\u06d9\u06c5\3\2\2")
        buf.write(u"\2\u06d9\u06c7\3\2\2\2\u06d9\u06c9\3\2\2\2\u06d9\u06cb")
        buf.write(u"\3\2\2\2\u06d9\u06cd\3\2\2\2\u06d9\u06cf\3\2\2\2\u06d9")
        buf.write(u"\u06d1\3\2\2\2\u06d9\u06d3\3\2\2\2\u06d9\u06d5\3\2\2")
        buf.write(u"\2\u06d9\u06d7\3\2\2\2\u06da-\3\2\2\2\u06db\u06dc\7\16")
        buf.write(u"\2\2\u06dc\u06e4\b\30\1\2\u06dd\u06de\7\'\2\2\u06de\u06e4")
        buf.write(u"\b\30\1\2\u06df\u06e0\7:\2\2\u06e0\u06e4\b\30\1\2\u06e1")
        buf.write(u"\u06e2\7i\2\2\u06e2\u06e4\b\30\1\2\u06e3\u06db\3\2\2")
        buf.write(u"\2\u06e3\u06dd\3\2\2\2\u06e3\u06df\3\2\2\2\u06e3\u06e1")
        buf.write(u"\3\2\2\2\u06e4/\3\2\2\2\u06e5\u06e6\7*\2\2\u06e6\u06ee")
        buf.write(u"\b\31\1\2\u06e7\u06e8\7T\2\2\u06e8\u06ee\b\31\1\2\u06e9")
        buf.write(u"\u06ea\7_\2\2\u06ea\u06ee\b\31\1\2\u06eb\u06ec\7}\2\2")
        buf.write(u"\u06ec\u06ee\b\31\1\2\u06ed\u06e5\3\2\2\2\u06ed\u06e7")
        buf.write(u"\3\2\2\2\u06ed\u06e9\3\2\2\2\u06ed\u06eb\3\2\2\2\u06ee")
        buf.write(u"\61\3\2\2\2\u06ef\u06f0\7u\2\2\u06f0\u06f1\7\u008b\2")
        buf.write(u"\2\u06f1\u0716\b\32\1\2\u06f2\u06f3\7\u008b\2\2\u06f3")
        buf.write(u"\u06f4\7~\2\2\u06f4\u0716\b\32\1\2\u06f5\u06f6\7~\2\2")
        buf.write(u"\u06f6\u06f7\7\u008b\2\2\u06f7\u0716\b\32\1\2\u06f8\u06f9")
        buf.write(u"\7\u009b\2\2\u06f9\u06fa\7\u008b\2\2\u06fa\u06fb\7(\2")
        buf.write(u"\2\u06fb\u0716\b\32\1\2\u06fc\u06fd\7\u009b\2\2\u06fd")
        buf.write(u"\u06fe\7\u008b\2\2\u06fe\u06ff\7h\2\2\u06ff\u0716\b\32")
        buf.write(u"\1\2\u0700\u0701\7\u008b\2\2\u0701\u0702\7l\2\2\u0702")
        buf.write(u"\u0716\b\32\1\2\u0703\u0704\7l\2\2\u0704\u0705\7\u008b")
        buf.write(u"\2\2\u0705\u0716\b\32\1\2\u0706\u0707\7\u008b\2\2\u0707")
        buf.write(u"\u0708\7\u009d\2\2\u0708\u0716\b\32\1\2\u0709\u070a\7")
        buf.write(u",\2\2\u070a\u070b\7\u009b\2\2\u070b\u070c\7\u008b\2\2")
        buf.write(u"\u070c\u0716\b\32\1\2\u070d\u070e\7 \2\2\u070e\u070f")
        buf.write(u"\7\u009b\2\2\u070f\u0710\7\u008b\2\2\u0710\u0716\b\32")
        buf.write(u"\1\2\u0711\u0712\7\u009b\2\2\u0712\u0713\7\u008b\2\2")
        buf.write(u"\u0713\u0714\7 \2\2\u0714\u0716\b\32\1\2\u0715\u06ef")
        buf.write(u"\3\2\2\2\u0715\u06f2\3\2\2\2\u0715\u06f5\3\2\2\2\u0715")
        buf.write(u"\u06f8\3\2\2\2\u0715\u06fc\3\2\2\2\u0715\u0700\3\2\2")
        buf.write(u"\2\u0715\u0703\3\2\2\2\u0715\u0706\3\2\2\2\u0715\u0709")
        buf.write(u"\3\2\2\2\u0715\u070d\3\2\2\2\u0715\u0711\3\2\2\2\u0716")
        buf.write(u"\63\3\2\2\2\u0717\u0718\7Y\2\2\u0718\u0724\b\33\1\2\u0719")
        buf.write(u"\u071a\7\u009a\2\2\u071a\u0724\b\33\1\2\u071b\u071c\7")
        buf.write(u"\u009b\2\2\u071c\u0724\b\33\1\2\u071d\u071e\7\"\2\2\u071e")
        buf.write(u"\u0724\b\33\1\2\u071f\u0720\7\u0092\2\2\u0720\u0724\b")
        buf.write(u"\33\1\2\u0721\u0722\7s\2\2\u0722\u0724\b\33\1\2\u0723")
        buf.write(u"\u0717\3\2\2\2\u0723\u0719\3\2\2\2\u0723\u071b\3\2\2")
        buf.write(u"\2\u0723\u071d\3\2\2\2\u0723\u071f\3\2\2\2\u0723\u0721")
        buf.write(u"\3\2\2\2\u0724\65\3\2\2\2\u0725\u0726\7\u00a4\2\2\u0726")
        buf.write(u"\u0727\b\34\1\2\u0727\67\3\2\2\2\u0728\u0729\7\u00a6")
        buf.write(u"\2\2\u0729\u072a\b\35\1\2\u072a9\3\2\2\2\u072b\u072c")
        buf.write(u"\7\u00a5\2\2\u072c\u072d\b\36\1\2\u072d;\3\2\2\2\34?")
        buf.write(u"\u0193\u0222\u02ed\u03a6\u045f\u04ae\u04c6\u0507\u0545")
        buf.write(u"\u055a\u05af\u0638\u068a\u06a7\u06ab\u06af\u06b3\u06b7")
        buf.write(u"\u06bb\u06bf\u06d9\u06e3\u06ed\u0715\u0723")
        return buf.getvalue()


class DateAndTimeParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'a'", u"'adesso'", u"<INVALID>", u"'al'", 
                     u"'all'", u"'alle'", u"'alba'", u"'anni'", u"'anno'", 
                     u"'annualmente'", u"<INVALID>", u"'autunno'", u"'bisettimanalmente'", 
                     u"'cena'", u"'corso'", u"'dalle'", u"'da'", u"'dal'", 
                     u"'degli'", u"'dei'", u"'del'", u"'dell'", u"'della'", 
                     u"'delle'", u"'di'", u"<INVALID>", u"'domani'", u"<INVALID>", 
                     u"<INVALID>", u"'dopo'", u"'dopodomani'", u"<INVALID>", 
                     u"'durante'", u"'e'", u"'end'", u"'entro'", u"'estate'", 
                     u"'fa'", u"<INVALID>", u"'ferragosto'", u"'fine'", 
                     u"<INVALID>", u"<INVALID>", u"'giornalmente'", u"'giorni'", 
                     u"'giorno'", u"<INVALID>", u"<INVALID>", u"'gli'", 
                     u"'ieri'", u"'i'", u"<INVALID>", u"'il'", u"'in'", 
                     u"'in punto'", u"'inverno'", u"'l'", u"'altro ieri'", 
                     u"'indomani'", u"'la'", u"'le'", u"'lo'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'marzo'", 
                     u"'mattina'", u"'mattinata'", u"'mattino'", u"'meno'", 
                     u"'mensilmente'", u"<INVALID>", u"'mese'", u"'mesi'", 
                     u"'mezzanotte'", u"<INVALID>", u"'mezzogiorno'", u"'minuti'", 
                     u"'minuto'", u"'momento'", u"'natale'", u"'nel'", u"'nottata'", 
                     u"'notte'", u"<INVALID>", u"<INVALID>", u"'oggi'", 
                     u"'ogni'", u"'ora'", u"'ore'", u"<INVALID>", u"'pasqua'", 
                     u"'passate'", u"'passati'", u"'pranzo'", u"'precedente'", 
                     u"'precedenti'", u"'per'", u"'piu'", u"'pomeriggio'", 
                     u"'prima'", u"'primavera'", u"'primo'", u"'proprio'", 
                     u"'prossima'", u"'prossime'", u"'prossimi'", u"'prossimo'", 
                     u"'quarta'", u"'quarti'", u"'quarto'", u"<INVALID>", 
                     u"'quest'", u"'questa'", u"'questo'", u"'questi'", 
                     u"'quinta'", u"'quinto'", u"'quotidianamente'", u"<INVALID>", 
                     u"<INVALID>", u"'san valentino'", u"'scorsa'", u"'scorse'", 
                     u"'scorsi'", u"'scorso'", u"'seconda'", u"'secondi'", 
                     u"'secondo'", u"'sera'", u"'serata'", u"<INVALID>", 
                     u"'settimana'", u"'settimanalmente'", u"'settimane'", 
                     u"'stagione'", u"'stagionei'", u"'stanotte'", u"'stasera'", 
                     u"'tardi'", u"'terza'", u"'terzo'", u"<INVALID>", u"'trimestre'", 
                     u"'trimestralmente'", u"'tutte'", u"'tutti'", u"'ultima'", 
                     u"<INVALID>", u"'ultimo'", u"'un'", u"'una'", u"<INVALID>", 
                     u"'ventura'", u"'venturo'", u"'volte'", u"'week'", 
                     u"'weekend'", u"<INVALID>", u"'/'" ]

    symbolicNames = [ u"<INVALID>", u"A", u"ADESSO", u"AGOSTO", u"AL", u"ALL", 
                      u"ALLE", u"ALBA", u"ANNI", u"ANNO", u"ANNUALMENTE", 
                      u"APRILE", u"AUTUNNO", u"BISETTIMANALMENTE", u"CENA", 
                      u"CORSO", u"DALLE", u"DA", u"DAL", u"DEGLI", u"DEI", 
                      u"DEL", u"DELL", u"DELLA", u"DELLE", u"DI", u"DICEMBRE", 
                      u"DOMANI", u"DOMENICA", u"DOMENICHE", u"DOPO", u"DOPODOMANI", 
                      u"DUE", u"DURANTE", u"E", u"END", u"ENTRO", u"ESTATE", 
                      u"FA", u"FEBBRAIO", u"FERRAGOSTO", u"FINE", u"FRA", 
                      u"GENNAIO", u"GIORNALMENTE", u"GIORNI", u"GIORNO", 
                      u"GIOVEDI", u"GIUGNO", u"GLI", u"IERI", u"I", u"IERLALTRO", 
                      u"IL", u"IN", u"INPUNTO", u"INVERNO", u"L", u"ALTROIERI", 
                      u"INDOMANI", u"LA", u"LE", u"LO", u"LUGLIO", u"LUNEDI", 
                      u"MAGGIO", u"MARTEDI", u"MARZO", u"MATTINA", u"MATTINATA", 
                      u"MATTINO", u"MENO", u"MENSILMENTE", u"MERCOLEDI", 
                      u"MESE", u"MESI", u"MEZZANOTTE", u"MEZZO", u"MEZZOGIORNO", 
                      u"MINUTI", u"MINUTO", u"MOMENTO", u"NATALE", u"NEL", 
                      u"NOTTATA", u"NOTTE", u"NOVEMBRE", u"NUMBER", u"OGGI", 
                      u"OGNI", u"ORA", u"ORE", u"OTTOBRE", u"PASQUA", u"PASSATE", 
                      u"PASSATI", u"PRANZO", u"PRECEDENTE", u"PRECEDENTI", 
                      u"PER", u"PIU", u"POMERIGGIO", u"PRIMA", u"PRIMAVERA", 
                      u"PRIMO", u"PROPRIO", u"PROSSIMA", u"PROSSIME", u"PROSSIMI", 
                      u"PROSSIMO", u"QUARTA", u"QUARTI", u"QUARTO", u"QUATTRO", 
                      u"QUEST", u"QUESTA", u"QUESTO", u"QUESTI", u"QUINTA", 
                      u"QUINTO", u"QUOTIDIANAMENTE", u"SABATO", u"SABATI", 
                      u"SANVALENTINO", u"SCORSA", u"SCORSE", u"SCORSI", 
                      u"SCORSO", u"SECONDA", u"SECONDI", u"SECONDO", u"SERA", 
                      u"SERATA", u"SETTEMBRE", u"SETTIMANA", u"SETTIMANALMENTE", 
                      u"SETTIMANE", u"STAGIONE", u"STAGIONI", u"STANOTTE", 
                      u"STASERA", u"TARDI", u"TERZA", u"TERZO", u"TRE", 
                      u"TRIMESTRE", u"TRIMESTRALMENTE", u"TUTTE", u"TUTTI", 
                      u"ULTIMA", u"ULTIMI", u"ULTIMO", u"UN", u"UNA", u"VENERDI", 
                      u"VENTURA", u"VENTURO", u"VOLTE", u"WEEK", u"WEEKEND", 
                      u"WS", u"SLASH", u"THREEDIGNUM", u"TIMENUM", u"YEARNUM", 
                      u"YEAR19", u"YEAR20" ]

    RULE_value = 0
    RULE_date_or_time = 1
    RULE_day_duration = 2
    RULE_week_duration = 3
    RULE_month_duration = 4
    RULE_year_duration = 5
    RULE_day_relative = 6
    RULE_day_absolute = 7
    RULE_month_relative = 8
    RULE_year_relative = 9
    RULE_week_number = 10
    RULE_week_relative = 11
    RULE_year = 12
    RULE_date_repeat = 13
    RULE_date = 14
    RULE_maybesettimana = 15
    RULE_maybedi = 16
    RULE_maybethe = 17
    RULE_eand = 18
    RULE_maybealle = 19
    RULE_maybeore = 20
    RULE_month = 21
    RULE_season = 22
    RULE_holiday = 23
    RULE_season_relative = 24
    RULE_number = 25
    RULE_threedignum = 26
    RULE_yearnum = 27
    RULE_timenum = 28

    ruleNames =  [ u"value", u"date_or_time", u"day_duration", u"week_duration", 
                   u"month_duration", u"year_duration", u"day_relative", 
                   u"day_absolute", u"month_relative", u"year_relative", 
                   u"week_number", u"week_relative", u"year", u"date_repeat", 
                   u"date", u"maybesettimana", u"maybedi", u"maybethe", 
                   u"eand", u"maybealle", u"maybeore", u"month", u"season", 
                   u"holiday", u"season_relative", u"number", u"threedignum", 
                   u"yearnum", u"timenum" ]

    EOF = Token.EOF
    A=1
    ADESSO=2
    AGOSTO=3
    AL=4
    ALL=5
    ALLE=6
    ALBA=7
    ANNI=8
    ANNO=9
    ANNUALMENTE=10
    APRILE=11
    AUTUNNO=12
    BISETTIMANALMENTE=13
    CENA=14
    CORSO=15
    DALLE=16
    DA=17
    DAL=18
    DEGLI=19
    DEI=20
    DEL=21
    DELL=22
    DELLA=23
    DELLE=24
    DI=25
    DICEMBRE=26
    DOMANI=27
    DOMENICA=28
    DOMENICHE=29
    DOPO=30
    DOPODOMANI=31
    DUE=32
    DURANTE=33
    E=34
    END=35
    ENTRO=36
    ESTATE=37
    FA=38
    FEBBRAIO=39
    FERRAGOSTO=40
    FINE=41
    FRA=42
    GENNAIO=43
    GIORNALMENTE=44
    GIORNI=45
    GIORNO=46
    GIOVEDI=47
    GIUGNO=48
    GLI=49
    IERI=50
    I=51
    IERLALTRO=52
    IL=53
    IN=54
    INPUNTO=55
    INVERNO=56
    L=57
    ALTROIERI=58
    INDOMANI=59
    LA=60
    LE=61
    LO=62
    LUGLIO=63
    LUNEDI=64
    MAGGIO=65
    MARTEDI=66
    MARZO=67
    MATTINA=68
    MATTINATA=69
    MATTINO=70
    MENO=71
    MENSILMENTE=72
    MERCOLEDI=73
    MESE=74
    MESI=75
    MEZZANOTTE=76
    MEZZO=77
    MEZZOGIORNO=78
    MINUTI=79
    MINUTO=80
    MOMENTO=81
    NATALE=82
    NEL=83
    NOTTATA=84
    NOTTE=85
    NOVEMBRE=86
    NUMBER=87
    OGGI=88
    OGNI=89
    ORA=90
    ORE=91
    OTTOBRE=92
    PASQUA=93
    PASSATE=94
    PASSATI=95
    PRANZO=96
    PRECEDENTE=97
    PRECEDENTI=98
    PER=99
    PIU=100
    POMERIGGIO=101
    PRIMA=102
    PRIMAVERA=103
    PRIMO=104
    PROPRIO=105
    PROSSIMA=106
    PROSSIME=107
    PROSSIMI=108
    PROSSIMO=109
    QUARTA=110
    QUARTI=111
    QUARTO=112
    QUATTRO=113
    QUEST=114
    QUESTA=115
    QUESTO=116
    QUESTI=117
    QUINTA=118
    QUINTO=119
    QUOTIDIANAMENTE=120
    SABATO=121
    SABATI=122
    SANVALENTINO=123
    SCORSA=124
    SCORSE=125
    SCORSI=126
    SCORSO=127
    SECONDA=128
    SECONDI=129
    SECONDO=130
    SERA=131
    SERATA=132
    SETTEMBRE=133
    SETTIMANA=134
    SETTIMANALMENTE=135
    SETTIMANE=136
    STAGIONE=137
    STAGIONI=138
    STANOTTE=139
    STASERA=140
    TARDI=141
    TERZA=142
    TERZO=143
    TRE=144
    TRIMESTRE=145
    TRIMESTRALMENTE=146
    TUTTE=147
    TUTTI=148
    ULTIMA=149
    ULTIMI=150
    ULTIMO=151
    UN=152
    UNA=153
    VENERDI=154
    VENTURA=155
    VENTURO=156
    VOLTE=157
    WEEK=158
    WEEKEND=159
    WS=160
    SLASH=161
    THREEDIGNUM=162
    TIMENUM=163
    YEARNUM=164
    YEAR19=165
    YEAR20=166

    def __init__(self, input):
        super(DateAndTimeParser, self).__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



        self.results = list()


    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.ValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DateAndTimeParser.EOF, 0)

        def date_or_time(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Date_or_timeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Date_or_timeContext,i)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_value

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterValue(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitValue(self)




    def value(self):

        localctx = DateAndTimeParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_value)

            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 61
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DateAndTimeParser.AGOSTO) | (1 << DateAndTimeParser.ANNI) | (1 << DateAndTimeParser.ANNO) | (1 << DateAndTimeParser.ANNUALMENTE) | (1 << DateAndTimeParser.APRILE) | (1 << DateAndTimeParser.AUTUNNO) | (1 << DateAndTimeParser.BISETTIMANALMENTE) | (1 << DateAndTimeParser.DA) | (1 << DateAndTimeParser.DAL) | (1 << DateAndTimeParser.DICEMBRE) | (1 << DateAndTimeParser.DOMANI) | (1 << DateAndTimeParser.DOMENICA) | (1 << DateAndTimeParser.DOPO) | (1 << DateAndTimeParser.DOPODOMANI) | (1 << DateAndTimeParser.DUE) | (1 << DateAndTimeParser.DURANTE) | (1 << DateAndTimeParser.ENTRO) | (1 << DateAndTimeParser.ESTATE) | (1 << DateAndTimeParser.FEBBRAIO) | (1 << DateAndTimeParser.FERRAGOSTO) | (1 << DateAndTimeParser.FINE) | (1 << DateAndTimeParser.FRA) | (1 << DateAndTimeParser.GENNAIO) | (1 << DateAndTimeParser.GIORNALMENTE) | (1 << DateAndTimeParser.GIORNO) | (1 << DateAndTimeParser.GIOVEDI) | (1 << DateAndTimeParser.GIUGNO) | (1 << DateAndTimeParser.IERI) | (1 << DateAndTimeParser.IERLALTRO) | (1 << DateAndTimeParser.IN) | (1 << DateAndTimeParser.INVERNO) | (1 << DateAndTimeParser.ALTROIERI) | (1 << DateAndTimeParser.INDOMANI) | (1 << DateAndTimeParser.LUGLIO))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (DateAndTimeParser.LUNEDI - 64)) | (1 << (DateAndTimeParser.MAGGIO - 64)) | (1 << (DateAndTimeParser.MARTEDI - 64)) | (1 << (DateAndTimeParser.MARZO - 64)) | (1 << (DateAndTimeParser.MENSILMENTE - 64)) | (1 << (DateAndTimeParser.MERCOLEDI - 64)) | (1 << (DateAndTimeParser.MESE - 64)) | (1 << (DateAndTimeParser.NATALE - 64)) | (1 << (DateAndTimeParser.NEL - 64)) | (1 << (DateAndTimeParser.NOVEMBRE - 64)) | (1 << (DateAndTimeParser.NUMBER - 64)) | (1 << (DateAndTimeParser.OGGI - 64)) | (1 << (DateAndTimeParser.OGNI - 64)) | (1 << (DateAndTimeParser.OTTOBRE - 64)) | (1 << (DateAndTimeParser.PASQUA - 64)) | (1 << (DateAndTimeParser.PER - 64)) | (1 << (DateAndTimeParser.PRIMA - 64)) | (1 << (DateAndTimeParser.PRIMAVERA - 64)) | (1 << (DateAndTimeParser.PRIMO - 64)) | (1 << (DateAndTimeParser.PROSSIMA - 64)) | (1 << (DateAndTimeParser.PROSSIMO - 64)) | (1 << (DateAndTimeParser.QUARTA - 64)) | (1 << (DateAndTimeParser.QUARTO - 64)) | (1 << (DateAndTimeParser.QUATTRO - 64)) | (1 << (DateAndTimeParser.QUEST - 64)) | (1 << (DateAndTimeParser.QUESTA - 64)) | (1 << (DateAndTimeParser.QUESTO - 64)) | (1 << (DateAndTimeParser.QUINTA - 64)) | (1 << (DateAndTimeParser.QUINTO - 64)) | (1 << (DateAndTimeParser.QUOTIDIANAMENTE - 64)) | (1 << (DateAndTimeParser.SABATO - 64)) | (1 << (DateAndTimeParser.SANVALENTINO - 64)) | (1 << (DateAndTimeParser.SCORSA - 64)) | (1 << (DateAndTimeParser.SCORSO - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (DateAndTimeParser.SECONDA - 128)) | (1 << (DateAndTimeParser.SECONDO - 128)) | (1 << (DateAndTimeParser.SETTEMBRE - 128)) | (1 << (DateAndTimeParser.SETTIMANA - 128)) | (1 << (DateAndTimeParser.SETTIMANALMENTE - 128)) | (1 << (DateAndTimeParser.STAGIONE - 128)) | (1 << (DateAndTimeParser.TERZA - 128)) | (1 << (DateAndTimeParser.TERZO - 128)) | (1 << (DateAndTimeParser.TRE - 128)) | (1 << (DateAndTimeParser.TRIMESTRALMENTE - 128)) | (1 << (DateAndTimeParser.TUTTE - 128)) | (1 << (DateAndTimeParser.TUTTI - 128)) | (1 << (DateAndTimeParser.ULTIMA - 128)) | (1 << (DateAndTimeParser.ULTIMO - 128)) | (1 << (DateAndTimeParser.UN - 128)) | (1 << (DateAndTimeParser.UNA - 128)) | (1 << (DateAndTimeParser.VENERDI - 128)) | (1 << (DateAndTimeParser.WEEK - 128)) | (1 << (DateAndTimeParser.WEEKEND - 128)) | (1 << (DateAndTimeParser.YEARNUM - 128)))) != 0):
                self.state = 58
                self.date_or_time()
                self.state = 63
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 64
            self.match(DateAndTimeParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_or_timeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Date_or_timeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self._day_duration = None # Day_durationContext
            self._week_duration = None # Week_durationContext
            self._month_duration = None # Month_durationContext
            self._year_duration = None # Year_durationContext
            self._day_absolute = None # Day_absoluteContext
            self._month = None # MonthContext
            self._week_number = None # Week_numberContext
            self._day_relative = None # Day_relativeContext
            self._date = None # DateContext
            self._YEARNUM = None # Token
            self._number = None # NumberContext
            self._season_relative = None # Season_relativeContext
            self.x = None # Day_relativeContext
            self.y = None # Day_relativeContext
            self.m = None # Week_relativeContext
            self.n = None # Week_relativeContext
            self.o = None # Month_relativeContext
            self.p = None # Month_relativeContext
            self.q = None # Year_relativeContext
            self.r = None # Year_relativeContext
            self._week_relative = None # Week_relativeContext
            self._month_relative = None # Month_relativeContext
            self._year_relative = None # Year_relativeContext
            self._date_repeat = None # Date_repeatContext
            self.u = None # DateContext
            self.v = None # DateContext
            self._year = None # YearContext
            self._holiday = None # HolidayContext
            self._season = None # SeasonContext

        def day_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Day_durationContext,0)


        def week_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Week_durationContext,0)


        def month_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Month_durationContext,0)


        def year_duration(self):
            return self.getTypedRuleContext(DateAndTimeParser.Year_durationContext,0)


        def PRIMO(self):
            return self.getToken(DateAndTimeParser.PRIMO, 0)

        def day_absolute(self):
            return self.getTypedRuleContext(DateAndTimeParser.Day_absoluteContext,0)


        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def month(self):
            return self.getTypedRuleContext(DateAndTimeParser.MonthContext,0)


        def SECONDO(self):
            return self.getToken(DateAndTimeParser.SECONDO, 0)

        def TERZO(self):
            return self.getToken(DateAndTimeParser.TERZO, 0)

        def QUARTO(self):
            return self.getToken(DateAndTimeParser.QUARTO, 0)

        def QUINTO(self):
            return self.getToken(DateAndTimeParser.QUINTO, 0)

        def ULTIMO(self):
            return self.getToken(DateAndTimeParser.ULTIMO, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def DOMENICA(self):
            return self.getToken(DateAndTimeParser.DOMENICA, 0)

        def SECONDA(self):
            return self.getToken(DateAndTimeParser.SECONDA, 0)

        def TERZA(self):
            return self.getToken(DateAndTimeParser.TERZA, 0)

        def QUARTA(self):
            return self.getToken(DateAndTimeParser.QUARTA, 0)

        def QUINTA(self):
            return self.getToken(DateAndTimeParser.QUINTA, 0)

        def ULTIMA(self):
            return self.getToken(DateAndTimeParser.ULTIMA, 0)

        def maybesettimana(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybesettimanaContext,0)


        def week_number(self):
            return self.getTypedRuleContext(DateAndTimeParser.Week_numberContext,0)


        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def PRECEDENTE(self):
            return self.getToken(DateAndTimeParser.PRECEDENTE, 0)

        def MATTINA(self):
            return self.getToken(DateAndTimeParser.MATTINA, 0)

        def day_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Day_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Day_relativeContext,i)


        def date(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.DateContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.DateContext,i)


        def SLASH(self):
            return self.getToken(DateAndTimeParser.SLASH, 0)

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def TUTTI(self):
            return self.getToken(DateAndTimeParser.TUTTI, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def OGNI(self):
            return self.getToken(DateAndTimeParser.OGNI, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def LUNEDI(self):
            return self.getToken(DateAndTimeParser.LUNEDI, 0)

        def MARTEDI(self):
            return self.getToken(DateAndTimeParser.MARTEDI, 0)

        def MERCOLEDI(self):
            return self.getToken(DateAndTimeParser.MERCOLEDI, 0)

        def GIOVEDI(self):
            return self.getToken(DateAndTimeParser.GIOVEDI, 0)

        def VENERDI(self):
            return self.getToken(DateAndTimeParser.VENERDI, 0)

        def SABATO(self):
            return self.getToken(DateAndTimeParser.SABATO, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def SABATI(self):
            return self.getToken(DateAndTimeParser.SABATI, 0)

        def DOMENICHE(self):
            return self.getToken(DateAndTimeParser.DOMENICHE, 0)

        def season_relative(self):
            return self.getTypedRuleContext(DateAndTimeParser.Season_relativeContext,0)


        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def A(self):
            return self.getToken(DateAndTimeParser.A, 0)

        def week_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Week_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Week_relativeContext,i)


        def month_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Month_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Month_relativeContext,i)


        def year_relative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.Year_relativeContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.Year_relativeContext,i)


        def date_repeat(self):
            return self.getTypedRuleContext(DateAndTimeParser.Date_repeatContext,0)


        def DAL(self):
            return self.getToken(DateAndTimeParser.DAL, 0)

        def AL(self):
            return self.getToken(DateAndTimeParser.AL, 0)

        def year(self):
            return self.getTypedRuleContext(DateAndTimeParser.YearContext,0)


        def holiday(self):
            return self.getTypedRuleContext(DateAndTimeParser.HolidayContext,0)


        def season(self):
            return self.getTypedRuleContext(DateAndTimeParser.SeasonContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date_or_time

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate_or_time(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate_or_time(self)




    def date_or_time(self):

        localctx = DateAndTimeParser.Date_or_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_date_or_time)

        result = dict()
            
        try:
            self.state = 401
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 66
                localctx._day_duration = self.day_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._day_duration.s;
                self.results.append(result);
                        
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 69
                localctx._week_duration = self.week_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._week_duration.s;
                self.results.append(result);
                        
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 72
                localctx._month_duration = self.month_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._month_duration.s;
                self.results.append(result);
                        
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 75
                localctx._year_duration = self.year_duration()

                result['type'] = DateEnum.TIMEX_DATE_DURATION;
                result['value'] = localctx._year_duration.s;
                self.results.append(result);
                        
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 78
                self.match(DateAndTimeParser.PRIMO)
                self.state = 79
                localctx._day_absolute = self.day_absolute()
                self.state = 80
                self.match(DateAndTimeParser.DI)
                self.state = 81
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                       
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 84
                self.match(DateAndTimeParser.SECONDO)
                self.state = 85
                localctx._day_absolute = self.day_absolute()
                self.state = 86
                self.match(DateAndTimeParser.DI)
                self.state = 87
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:2$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                          
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 90
                self.match(DateAndTimeParser.TERZO)
                self.state = 91
                localctx._day_absolute = self.day_absolute()
                self.state = 92
                self.match(DateAndTimeParser.DI)
                self.state = 93
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:3$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                          
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 96
                self.match(DateAndTimeParser.QUARTO)
                self.state = 97
                localctx._day_absolute = self.day_absolute()
                self.state = 98
                self.match(DateAndTimeParser.DI)
                self.state = 99
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:4$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                          
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 102
                self.match(DateAndTimeParser.QUINTO)
                self.state = 103
                localctx._day_absolute = self.day_absolute()
                self.state = 104
                self.match(DateAndTimeParser.DI)
                self.state = 105
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:5$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                          
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 108
                self.match(DateAndTimeParser.ULTIMO)
                self.state = 109
                localctx._day_absolute = self.day_absolute()
                self.state = 110
                self.match(DateAndTimeParser.DI)
                self.state = 111
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                          
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 114
                self.match(DateAndTimeParser.PRIMA)
                self.state = 115
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 116
                self.match(DateAndTimeParser.DI)
                self.state = 117
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 120
                self.match(DateAndTimeParser.SECONDA)
                self.state = 121
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 122
                self.match(DateAndTimeParser.DI)
                self.state = 123
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:2$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 126
                self.match(DateAndTimeParser.TERZA)
                self.state = 127
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 128
                self.match(DateAndTimeParser.DI)
                self.state = 129
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:3$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 132
                self.match(DateAndTimeParser.QUARTA)
                self.state = 133
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 134
                self.match(DateAndTimeParser.DI)
                self.state = 135
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:4$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 138
                self.match(DateAndTimeParser.QUINTA)
                self.state = 139
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 140
                self.match(DateAndTimeParser.DI)
                self.state = 141
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:5$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 144
                self.match(DateAndTimeParser.ULTIMA)
                self.state = 145
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 146
                self.match(DateAndTimeParser.DI)
                self.state = 147
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$weekday_number:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                        
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 150
                self.match(DateAndTimeParser.PRIMA)
                self.state = 151
                self.maybesettimana()
                self.state = 152
                self.match(DateAndTimeParser.DI)
                self.state = 153
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                       
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 156
                self.match(DateAndTimeParser.SECONDA)
                self.state = 157
                self.maybesettimana()
                self.state = 158
                self.match(DateAndTimeParser.DI)
                self.state = 159
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:2$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                        
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 162
                self.match(DateAndTimeParser.TERZA)
                self.state = 163
                self.maybesettimana()
                self.state = 164
                self.match(DateAndTimeParser.DI)
                self.state = 165
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:3$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                          
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 168
                self.match(DateAndTimeParser.QUARTA)
                self.state = 169
                self.maybesettimana()
                self.state = 170
                self.match(DateAndTimeParser.DI)
                self.state = 171
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:4$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                          
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 174
                self.match(DateAndTimeParser.QUINTA)
                self.state = 175
                self.maybesettimana()
                self.state = 176
                self.match(DateAndTimeParser.DI)
                self.state = 177
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:5$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                          
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 180
                self.match(DateAndTimeParser.ULTIMA)
                self.state = 181
                self.maybesettimana()
                self.state = 182
                self.match(DateAndTimeParser.DI)
                self.state = 183
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week_number:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_";
                self.results.append(result);
                          
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 186
                localctx._week_number = self.week_number()

                result['type'] = DateEnum.TIMEX_WEEK;
                result['value'] = "%d" % (localctx._week_number.i);
                self.results.append(result);
                        
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 189
                self.match(DateAndTimeParser.SCORSO)
                self.state = 190
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                        
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 193
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 194
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                       
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 197
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 198
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                       
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 200
                self.match(DateAndTimeParser.QUESTO)
                self.state = 201
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:0$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                       
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 204
                localctx._day_absolute = self.day_absolute()
                self.state = 205
                self.match(DateAndTimeParser.PROSSIMO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                        
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 208
                localctx._day_absolute = self.day_absolute()
                self.state = 209
                self.match(DateAndTimeParser.SCORSO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                       
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 212
                localctx._day_absolute = self.day_absolute()
                self.state = 213
                self.match(DateAndTimeParser.PRECEDENTE)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                       
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 216
                localctx._day_absolute = self.day_absolute()
                self.state = 217
                self.match(DateAndTimeParser.MATTINA)

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$";
                self.results.append(result);
                     
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 220
                localctx._day_relative = self.day_relative()
                self.state = 221
                self.match(DateAndTimeParser.MATTINA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._day_relative.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_START_TIME;
                result['value'] = "$morning$";
                self.results.append(result);
                     
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 224
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 225
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                self.results.append(result);
                        
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 228
                self.match(DateAndTimeParser.QUESTO)
                self.state = 229
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:0$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                self.results.append(result);
                       
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 232
                self.match(DateAndTimeParser.SCORSO)
                self.state = 233
                localctx._month = self.month()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                self.results.append(result);
                       
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 236
                localctx._month = self.month()
                self.state = 237
                self.match(DateAndTimeParser.PROSSIMO)

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                self.results.append(result);
                        
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 240
                localctx._month = self.month()
                self.state = 241
                self.match(DateAndTimeParser.SCORSO)

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = "$year:-1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "%02d" % (localctx._month.i) + ":_" ;
                self.results.append(result);
                        
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 244
                localctx._date = self.date()
                self.state = 245
                self.match(DateAndTimeParser.SLASH)
                self.state = 246
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = (None if localctx._YEARNUM is None else localctx._YEARNUM.text);
                self.results.append(result);
                    
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 249
                localctx._date = self.date()
                self.state = 250
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = (None if localctx._YEARNUM is None else localctx._YEARNUM.text);
                self.results.append(result);
                    
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 253
                self.match(DateAndTimeParser.TUTTI)
                self.state = 254
                self.match(DateAndTimeParser.I)
                self.state = 255
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s ;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$weekly$" ;
                self.results.append(result);
                       
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 258
                self.match(DateAndTimeParser.OGNI)
                self.state = 259
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s ;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = "$weekly$" ;
                self.results.append(result);
                       
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 262
                self.match(DateAndTimeParser.FRA)
                self.state = 263
                self.match(DateAndTimeParser.UN)
                self.state = 264
                self.match(DateAndTimeParser.LUNEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$monday$";
                self.results.append(result);
                      
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 266
                self.match(DateAndTimeParser.FRA)
                self.state = 267
                self.match(DateAndTimeParser.UN)
                self.state = 268
                self.match(DateAndTimeParser.MARTEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$tuesday$";
                self.results.append(result);
                      
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 270
                self.match(DateAndTimeParser.FRA)
                self.state = 271
                self.match(DateAndTimeParser.UN)
                self.state = 272
                self.match(DateAndTimeParser.MERCOLEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$wednesday$";
                self.results.append(result);
                      
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 274
                self.match(DateAndTimeParser.FRA)
                self.state = 275
                self.match(DateAndTimeParser.UN)
                self.state = 276
                self.match(DateAndTimeParser.GIOVEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$thursday$";
                self.results.append(result);
                      
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 278
                self.match(DateAndTimeParser.FRA)
                self.state = 279
                self.match(DateAndTimeParser.UN)
                self.state = 280
                self.match(DateAndTimeParser.VENERDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$friday$";
                self.results.append(result);
                      
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 282
                self.match(DateAndTimeParser.FRA)
                self.state = 283
                self.match(DateAndTimeParser.UN)
                self.state = 284
                self.match(DateAndTimeParser.SABATO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                self.results.append(result);
                      
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 286
                self.match(DateAndTimeParser.FRA)
                self.state = 287
                self.match(DateAndTimeParser.UNA)
                self.state = 288
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                      
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 290
                self.match(DateAndTimeParser.FRA)
                self.state = 291
                localctx._number = self.number()
                self.state = 292
                self.match(DateAndTimeParser.LUNEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$monday$";
                self.results.append(result);
                      
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 295
                self.match(DateAndTimeParser.FRA)
                self.state = 296
                localctx._number = self.number()
                self.state = 297
                self.match(DateAndTimeParser.MARTEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$tuesday$";
                self.results.append(result);
                      
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 300
                self.match(DateAndTimeParser.FRA)
                self.state = 301
                localctx._number = self.number()
                self.state = 302
                self.match(DateAndTimeParser.MERCOLEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$wednesday$";
                self.results.append(result);
                      
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 305
                self.match(DateAndTimeParser.FRA)
                self.state = 306
                localctx._number = self.number()
                self.state = 307
                self.match(DateAndTimeParser.GIOVEDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$thursday$";
                self.results.append(result);
                      
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 310
                self.match(DateAndTimeParser.FRA)
                self.state = 311
                localctx._number = self.number()
                self.state = 312
                self.match(DateAndTimeParser.VENERDI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$friday$";
                self.results.append(result);
                      
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 315
                self.match(DateAndTimeParser.FRA)
                self.state = 316
                localctx._number = self.number()
                self.state = 317
                self.match(DateAndTimeParser.SABATI)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                self.results.append(result);
                      
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 320
                self.match(DateAndTimeParser.FRA)
                self.state = 321
                localctx._number = self.number()
                self.state = 322
                self.match(DateAndTimeParser.SABATO)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$saturday$";
                self.results.append(result);
                      
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 325
                self.match(DateAndTimeParser.FRA)
                self.state = 326
                localctx._number = self.number()
                self.state = 327
                self.match(DateAndTimeParser.DOMENICHE)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                      
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 330
                self.match(DateAndTimeParser.FRA)
                self.state = 331
                localctx._number = self.number()
                self.state = 332
                self.match(DateAndTimeParser.DOMENICA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:" + str(localctx._number.i) + "$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                      
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 335
                self.match(DateAndTimeParser.DOMENICA)
                self.state = 336
                self.match(DateAndTimeParser.PROSSIMA)

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = "$week:1$";
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = "$sunday$";
                self.results.append(result);
                          
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 338
                localctx._season_relative = self.season_relative()

                result['type'] = DateEnum.TIMEX_SEASON;
                result['value'] = localctx._season_relative.s;
                self.results.append(result);
                          
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 341
                self.match(DateAndTimeParser.DA)
                self.state = 342
                localctx.x = self.day_relative()
                self.state = 343
                self.match(DateAndTimeParser.A)
                self.state = 344
                localctx.y = self.day_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.x.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.y.s;
                self.results.append(result);
                            
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 347
                self.match(DateAndTimeParser.DA)
                self.state = 348
                localctx.m = self.week_relative()
                self.state = 349
                self.match(DateAndTimeParser.A)
                self.state = 350
                localctx.n = self.week_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.m.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.n.s;
                self.results.append(result);
                            
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 353
                self.match(DateAndTimeParser.DA)
                self.state = 354
                localctx.o = self.month_relative()
                self.state = 355
                self.match(DateAndTimeParser.A)
                self.state = 356
                localctx.p = self.month_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.o.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.p.s;
                self.results.append(result);
                            
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 359
                self.match(DateAndTimeParser.DA)
                self.state = 360
                localctx.q = self.year_relative()
                self.state = 361
                self.match(DateAndTimeParser.A)
                self.state = 362
                localctx.r = self.year_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.q.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.r.s;
                self.results.append(result);
                            
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 365
                localctx._day_relative = self.day_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._day_relative.s;
                self.results.append(result);
                          
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 368
                localctx._week_relative = self.week_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._week_relative.s;
                self.results.append(result);
                          
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 371
                localctx._month_relative = self.month_relative()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._month_relative.s;
                self.results.append(result);
                            
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 374
                localctx._year_relative = self.year_relative()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = localctx._year_relative.s;
                self.results.append(result);
                      
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 377
                localctx._date_repeat = self.date_repeat()

                result['type'] = DateEnum.TIMEX_REPEAT_TIME;
                result['value'] = localctx._date_repeat.s;
                self.results.append(result);
                      
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 380
                self.match(DateAndTimeParser.DAL)
                self.state = 381
                localctx.u = self.date()
                self.state = 382
                self.match(DateAndTimeParser.AL)
                self.state = 383
                localctx.v = self.date()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx.u.s;
                self.results.append(result);
                result = dict()
                result['type'] = DateEnum.TIMEX_END_DATE;
                result['value'] = localctx.v.s;
                self.results.append(result);
                            
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 386
                localctx._date = self.date()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._date.s;
                self.results.append(result);
                      
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 389
                localctx._year = self.year()

                result['type'] = DateEnum.TIMEX_YEAR;
                result['value'] = localctx._year.s;
                self.results.append(result);
                      
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 392
                localctx._day_absolute = self.day_absolute()

                result['type'] = DateEnum.TIMEX_WEEKDAY;
                result['value'] = localctx._day_absolute.s;
                self.results.append(result);
                      
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 395
                localctx._holiday = self.holiday()

                result['type'] = DateEnum.TIMEX_DATE;
                result['value'] = localctx._holiday.s;
                self.results.append(result);
                      
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 398
                localctx._season = self.season()

                result['type'] = DateEnum.TIMEX_SEASON;
                result['value'] = localctx._season.s;
                self.results.append(result);
                      
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_duration(self)




    def day_duration(self):

        localctx = DateAndTimeParser.Day_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_day_duration)
        try:
            self.state = 544
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.match(DateAndTimeParser.DURANTE)
                self.state = 404
                self.match(DateAndTimeParser.I)
                self.state = 405
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 406
                localctx._number = self.number()
                self.state = 407
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.match(DateAndTimeParser.DURANTE)
                self.state = 411
                self.match(DateAndTimeParser.I)
                self.state = 412
                localctx._number = self.number()
                self.state = 413
                self.match(DateAndTimeParser.GIORNI)
                self.state = 414
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.match(DateAndTimeParser.DURANTE)
                self.state = 418
                self.match(DateAndTimeParser.I)
                self.state = 419
                localctx._number = self.number()
                self.state = 420
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 421
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 424
                self.match(DateAndTimeParser.NEL)
                self.state = 425
                self.match(DateAndTimeParser.CORSO)
                self.state = 426
                self.match(DateAndTimeParser.DEI)
                self.state = 427
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 428
                localctx._number = self.number()
                self.state = 429
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 432
                self.match(DateAndTimeParser.NEL)
                self.state = 433
                self.match(DateAndTimeParser.CORSO)
                self.state = 434
                self.match(DateAndTimeParser.DEI)
                self.state = 435
                localctx._number = self.number()
                self.state = 436
                self.match(DateAndTimeParser.GIORNI)
                self.state = 437
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 440
                self.match(DateAndTimeParser.NEL)
                self.state = 441
                self.match(DateAndTimeParser.CORSO)
                self.state = 442
                self.match(DateAndTimeParser.DEI)
                self.state = 443
                localctx._number = self.number()
                self.state = 444
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 445
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 448
                self.match(DateAndTimeParser.PER)
                self.state = 449
                self.match(DateAndTimeParser.I)
                self.state = 450
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 451
                localctx._number = self.number()
                self.state = 452
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.match(DateAndTimeParser.PER)
                self.state = 456
                self.match(DateAndTimeParser.I)
                self.state = 457
                localctx._number = self.number()
                self.state = 458
                self.match(DateAndTimeParser.GIORNI)
                self.state = 459
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 462
                self.match(DateAndTimeParser.PER)
                self.state = 463
                self.match(DateAndTimeParser.I)
                self.state = 464
                localctx._number = self.number()
                self.state = 465
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 466
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 469
                self.match(DateAndTimeParser.DURANTE)
                self.state = 470
                self.match(DateAndTimeParser.GLI)
                self.state = 471
                self.match(DateAndTimeParser.SCORSI)
                self.state = 472
                localctx._number = self.number()
                self.state = 473
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 476
                self.match(DateAndTimeParser.DURANTE)
                self.state = 477
                self.match(DateAndTimeParser.I)
                self.state = 478
                localctx._number = self.number()
                self.state = 479
                self.match(DateAndTimeParser.GIORNI)
                self.state = 480
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 483
                self.match(DateAndTimeParser.DURANTE)
                self.state = 484
                self.match(DateAndTimeParser.I)
                self.state = 485
                localctx._number = self.number()
                self.state = 486
                self.match(DateAndTimeParser.SCORSI)
                self.state = 487
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 490
                self.match(DateAndTimeParser.DURANTE)
                self.state = 491
                self.match(DateAndTimeParser.I)
                self.state = 492
                self.match(DateAndTimeParser.PASSATI)
                self.state = 493
                localctx._number = self.number()
                self.state = 494
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 497
                self.match(DateAndTimeParser.DURANTE)
                self.state = 498
                self.match(DateAndTimeParser.I)
                self.state = 499
                localctx._number = self.number()
                self.state = 500
                self.match(DateAndTimeParser.GIORNI)
                self.state = 501
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 504
                self.match(DateAndTimeParser.NEL)
                self.state = 505
                self.match(DateAndTimeParser.CORSO)
                self.state = 506
                self.match(DateAndTimeParser.DEGLI)
                self.state = 507
                self.match(DateAndTimeParser.SCORSI)
                self.state = 508
                localctx._number = self.number()
                self.state = 509
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 512
                self.match(DateAndTimeParser.NEL)
                self.state = 513
                self.match(DateAndTimeParser.CORSO)
                self.state = 514
                self.match(DateAndTimeParser.DEI)
                self.state = 515
                localctx._number = self.number()
                self.state = 516
                self.match(DateAndTimeParser.GIORNI)
                self.state = 517
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 520
                self.match(DateAndTimeParser.NEL)
                self.state = 521
                self.match(DateAndTimeParser.CORSO)
                self.state = 522
                self.match(DateAndTimeParser.DEI)
                self.state = 523
                localctx._number = self.number()
                self.state = 524
                self.match(DateAndTimeParser.SCORSI)
                self.state = 525
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 528
                self.match(DateAndTimeParser.NEL)
                self.state = 529
                self.match(DateAndTimeParser.CORSO)
                self.state = 530
                self.match(DateAndTimeParser.DEI)
                self.state = 531
                localctx._number = self.number()
                self.state = 532
                self.match(DateAndTimeParser.GIORNI)
                self.state = 533
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 536
                self.match(DateAndTimeParser.NEL)
                self.state = 537
                self.match(DateAndTimeParser.CORSO)
                self.state = 538
                self.match(DateAndTimeParser.DEI)
                self.state = 539
                self.match(DateAndTimeParser.PASSATI)
                self.state = 540
                localctx._number = self.number()
                self.state = 541
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def LA(self):
            return self.getToken(DateAndTimeParser.LA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def LE(self):
            return self.getToken(DateAndTimeParser.LE, 0)

        def PROSSIME(self):
            return self.getToken(DateAndTimeParser.PROSSIME, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DELLA(self):
            return self.getToken(DateAndTimeParser.DELLA, 0)

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def DELLE(self):
            return self.getToken(DateAndTimeParser.DELLE, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def SCORSE(self):
            return self.getToken(DateAndTimeParser.SCORSE, 0)

        def PASSATE(self):
            return self.getToken(DateAndTimeParser.PASSATE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_duration(self)




    def week_duration(self):

        localctx = DateAndTimeParser.Week_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_week_duration)
        try:
            self.state = 747
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.match(DateAndTimeParser.DURANTE)
                self.state = 547
                self.match(DateAndTimeParser.LA)
                self.state = 548
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 549
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.match(DateAndTimeParser.DURANTE)
                self.state = 552
                self.match(DateAndTimeParser.LA)
                self.state = 553
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 554
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.match(DateAndTimeParser.DURANTE)
                self.state = 557
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 558
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 560
                self.match(DateAndTimeParser.DURANTE)
                self.state = 561
                self.match(DateAndTimeParser.LE)
                self.state = 562
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 563
                localctx._number = self.number()
                self.state = 564
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 567
                self.match(DateAndTimeParser.DURANTE)
                self.state = 568
                self.match(DateAndTimeParser.LE)
                self.state = 569
                localctx._number = self.number()
                self.state = 570
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 571
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 574
                self.match(DateAndTimeParser.DURANTE)
                self.state = 575
                self.match(DateAndTimeParser.LE)
                self.state = 576
                localctx._number = self.number()
                self.state = 577
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 578
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 581
                self.match(DateAndTimeParser.NEL)
                self.state = 582
                self.match(DateAndTimeParser.CORSO)
                self.state = 583
                self.match(DateAndTimeParser.DELLA)
                self.state = 584
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 585
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 587
                self.match(DateAndTimeParser.NEL)
                self.state = 588
                self.match(DateAndTimeParser.CORSO)
                self.state = 589
                self.match(DateAndTimeParser.DELLA)
                self.state = 590
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 591
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 593
                self.match(DateAndTimeParser.NEL)
                self.state = 594
                self.match(DateAndTimeParser.CORSO)
                self.state = 595
                self.match(DateAndTimeParser.DI)
                self.state = 596
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 597
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 599
                self.match(DateAndTimeParser.NEL)
                self.state = 600
                self.match(DateAndTimeParser.CORSO)
                self.state = 601
                self.match(DateAndTimeParser.DELLE)
                self.state = 602
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 603
                localctx._number = self.number()
                self.state = 604
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 607
                self.match(DateAndTimeParser.NEL)
                self.state = 608
                self.match(DateAndTimeParser.CORSO)
                self.state = 609
                self.match(DateAndTimeParser.DELLE)
                self.state = 610
                localctx._number = self.number()
                self.state = 611
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 612
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 615
                self.match(DateAndTimeParser.NEL)
                self.state = 616
                self.match(DateAndTimeParser.CORSO)
                self.state = 617
                self.match(DateAndTimeParser.DELLE)
                self.state = 618
                localctx._number = self.number()
                self.state = 619
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 620
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 623
                self.match(DateAndTimeParser.PER)
                self.state = 624
                self.match(DateAndTimeParser.LA)
                self.state = 625
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 626
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 628
                self.match(DateAndTimeParser.PER)
                self.state = 629
                self.match(DateAndTimeParser.LA)
                self.state = 630
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 631
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 633
                self.match(DateAndTimeParser.PER)
                self.state = 634
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 635
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 637
                self.match(DateAndTimeParser.PER)
                self.state = 638
                self.match(DateAndTimeParser.LE)
                self.state = 639
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 640
                localctx._number = self.number()
                self.state = 641
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 644
                self.match(DateAndTimeParser.PER)
                self.state = 645
                self.match(DateAndTimeParser.LE)
                self.state = 646
                localctx._number = self.number()
                self.state = 647
                self.match(DateAndTimeParser.PROSSIME)
                self.state = 648
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 651
                self.match(DateAndTimeParser.PER)
                self.state = 652
                self.match(DateAndTimeParser.LE)
                self.state = 653
                localctx._number = self.number()
                self.state = 654
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 655
                self.match(DateAndTimeParser.PROSSIME)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 658
                self.match(DateAndTimeParser.DURANTE)
                self.state = 659
                self.match(DateAndTimeParser.LA)
                self.state = 660
                self.match(DateAndTimeParser.SCORSA)
                self.state = 661
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 663
                self.match(DateAndTimeParser.DURANTE)
                self.state = 664
                self.match(DateAndTimeParser.LA)
                self.state = 665
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 666
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 668
                self.match(DateAndTimeParser.DURANTE)
                self.state = 669
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 670
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 672
                self.match(DateAndTimeParser.DURANTE)
                self.state = 673
                self.match(DateAndTimeParser.LE)
                self.state = 674
                self.match(DateAndTimeParser.SCORSE)
                self.state = 675
                localctx._number = self.number()
                self.state = 676
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 679
                self.match(DateAndTimeParser.DURANTE)
                self.state = 680
                self.match(DateAndTimeParser.LE)
                self.state = 681
                localctx._number = self.number()
                self.state = 682
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 683
                self.match(DateAndTimeParser.SCORSE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 686
                self.match(DateAndTimeParser.DURANTE)
                self.state = 687
                self.match(DateAndTimeParser.LE)
                self.state = 688
                localctx._number = self.number()
                self.state = 689
                self.match(DateAndTimeParser.SCORSE)
                self.state = 690
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 693
                self.match(DateAndTimeParser.DURANTE)
                self.state = 694
                self.match(DateAndTimeParser.LE)
                self.state = 695
                localctx._number = self.number()
                self.state = 696
                self.match(DateAndTimeParser.PASSATE)
                self.state = 697
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 700
                self.match(DateAndTimeParser.DURANTE)
                self.state = 701
                self.match(DateAndTimeParser.LE)
                self.state = 702
                localctx._number = self.number()
                self.state = 703
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 704
                self.match(DateAndTimeParser.PASSATE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 707
                self.match(DateAndTimeParser.NEL)
                self.state = 708
                self.match(DateAndTimeParser.CORSO)
                self.state = 709
                self.match(DateAndTimeParser.DELLE)
                self.state = 710
                self.match(DateAndTimeParser.SCORSE)
                self.state = 711
                localctx._number = self.number()
                self.state = 712
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 715
                self.match(DateAndTimeParser.NEL)
                self.state = 716
                self.match(DateAndTimeParser.CORSO)
                self.state = 717
                self.match(DateAndTimeParser.DELLE)
                self.state = 718
                localctx._number = self.number()
                self.state = 719
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 720
                self.match(DateAndTimeParser.SCORSE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 723
                self.match(DateAndTimeParser.NEL)
                self.state = 724
                self.match(DateAndTimeParser.CORSO)
                self.state = 725
                self.match(DateAndTimeParser.DELLE)
                self.state = 726
                localctx._number = self.number()
                self.state = 727
                self.match(DateAndTimeParser.SCORSE)
                self.state = 728
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 731
                self.match(DateAndTimeParser.NEL)
                self.state = 732
                self.match(DateAndTimeParser.CORSO)
                self.state = 733
                self.match(DateAndTimeParser.DELLE)
                self.state = 734
                localctx._number = self.number()
                self.state = 735
                self.match(DateAndTimeParser.PASSATE)
                self.state = 736
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 739
                self.match(DateAndTimeParser.NEL)
                self.state = 740
                self.match(DateAndTimeParser.CORSO)
                self.state = 741
                self.match(DateAndTimeParser.DELLE)
                self.state = 742
                localctx._number = self.number()
                self.state = 743
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 744
                self.match(DateAndTimeParser.PASSATE)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Month_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Month_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def LO(self):
            return self.getToken(DateAndTimeParser.LO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth_duration(self)




    def month_duration(self):

        localctx = DateAndTimeParser.Month_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_month_duration)
        try:
            self.state = 932
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.match(DateAndTimeParser.DURANTE)
                self.state = 750
                self.match(DateAndTimeParser.IL)
                self.state = 751
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 752
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.match(DateAndTimeParser.DURANTE)
                self.state = 755
                self.match(DateAndTimeParser.IL)
                self.state = 756
                self.match(DateAndTimeParser.MESE)
                self.state = 757
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.match(DateAndTimeParser.DURANTE)
                self.state = 760
                self.match(DateAndTimeParser.I)
                self.state = 761
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 762
                localctx._number = self.number()
                self.state = 763
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 766
                self.match(DateAndTimeParser.DURANTE)
                self.state = 767
                self.match(DateAndTimeParser.I)
                self.state = 768
                localctx._number = self.number()
                self.state = 769
                self.match(DateAndTimeParser.MESI)
                self.state = 770
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 773
                self.match(DateAndTimeParser.DURANTE)
                self.state = 774
                self.match(DateAndTimeParser.I)
                self.state = 775
                localctx._number = self.number()
                self.state = 776
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 777
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 780
                self.match(DateAndTimeParser.NEL)
                self.state = 781
                self.match(DateAndTimeParser.CORSO)
                self.state = 782
                self.match(DateAndTimeParser.DEL)
                self.state = 783
                self.match(DateAndTimeParser.MESE)
                self.state = 784
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 786
                self.match(DateAndTimeParser.NEL)
                self.state = 787
                self.match(DateAndTimeParser.CORSO)
                self.state = 788
                self.match(DateAndTimeParser.DEL)
                self.state = 789
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 790
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 792
                self.match(DateAndTimeParser.NEL)
                self.state = 793
                self.match(DateAndTimeParser.CORSO)
                self.state = 794
                self.match(DateAndTimeParser.DEI)
                self.state = 795
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 796
                localctx._number = self.number()
                self.state = 797
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 800
                self.match(DateAndTimeParser.NEL)
                self.state = 801
                self.match(DateAndTimeParser.CORSO)
                self.state = 802
                self.match(DateAndTimeParser.DEI)
                self.state = 803
                localctx._number = self.number()
                self.state = 804
                self.match(DateAndTimeParser.MESI)
                self.state = 805
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 808
                self.match(DateAndTimeParser.NEL)
                self.state = 809
                self.match(DateAndTimeParser.CORSO)
                self.state = 810
                self.match(DateAndTimeParser.DEI)
                self.state = 811
                localctx._number = self.number()
                self.state = 812
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 813
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 816
                self.match(DateAndTimeParser.PER)
                self.state = 817
                self.match(DateAndTimeParser.IL)
                self.state = 818
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 819
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 821
                self.match(DateAndTimeParser.PER)
                self.state = 822
                self.match(DateAndTimeParser.IL)
                self.state = 823
                self.match(DateAndTimeParser.MESE)
                self.state = 824
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 826
                self.match(DateAndTimeParser.PER)
                self.state = 827
                self.match(DateAndTimeParser.I)
                self.state = 828
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 829
                localctx._number = self.number()
                self.state = 830
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 833
                self.match(DateAndTimeParser.PER)
                self.state = 834
                self.match(DateAndTimeParser.I)
                self.state = 835
                localctx._number = self.number()
                self.state = 836
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 837
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 840
                self.match(DateAndTimeParser.PER)
                self.state = 841
                self.match(DateAndTimeParser.I)
                self.state = 842
                localctx._number = self.number()
                self.state = 843
                self.match(DateAndTimeParser.MESI)
                self.state = 844
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 847
                self.match(DateAndTimeParser.DURANTE)
                self.state = 848
                self.match(DateAndTimeParser.LO)
                self.state = 849
                self.match(DateAndTimeParser.SCORSO)
                self.state = 850
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 852
                self.match(DateAndTimeParser.DURANTE)
                self.state = 853
                self.match(DateAndTimeParser.IL)
                self.state = 854
                self.match(DateAndTimeParser.MESE)
                self.state = 855
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 857
                self.match(DateAndTimeParser.DURANTE)
                self.state = 858
                self.match(DateAndTimeParser.GLI)
                self.state = 859
                self.match(DateAndTimeParser.SCORSI)
                self.state = 860
                localctx._number = self.number()
                self.state = 861
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 864
                self.match(DateAndTimeParser.DURANTE)
                self.state = 865
                self.match(DateAndTimeParser.I)
                self.state = 866
                localctx._number = self.number()
                self.state = 867
                self.match(DateAndTimeParser.MESI)
                self.state = 868
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 871
                self.match(DateAndTimeParser.DURANTE)
                self.state = 872
                self.match(DateAndTimeParser.I)
                self.state = 873
                localctx._number = self.number()
                self.state = 874
                self.match(DateAndTimeParser.SCORSI)
                self.state = 875
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 878
                self.match(DateAndTimeParser.DURANTE)
                self.state = 879
                self.match(DateAndTimeParser.I)
                self.state = 880
                localctx._number = self.number()
                self.state = 881
                self.match(DateAndTimeParser.PASSATI)
                self.state = 882
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 885
                self.match(DateAndTimeParser.DURANTE)
                self.state = 886
                self.match(DateAndTimeParser.I)
                self.state = 887
                localctx._number = self.number()
                self.state = 888
                self.match(DateAndTimeParser.MESI)
                self.state = 889
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 892
                self.match(DateAndTimeParser.NEL)
                self.state = 893
                self.match(DateAndTimeParser.CORSO)
                self.state = 894
                self.match(DateAndTimeParser.DEGLI)
                self.state = 895
                self.match(DateAndTimeParser.SCORSI)
                self.state = 896
                localctx._number = self.number()
                self.state = 897
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 900
                self.match(DateAndTimeParser.NEL)
                self.state = 901
                self.match(DateAndTimeParser.CORSO)
                self.state = 902
                self.match(DateAndTimeParser.DEI)
                self.state = 903
                localctx._number = self.number()
                self.state = 904
                self.match(DateAndTimeParser.MESI)
                self.state = 905
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 908
                self.match(DateAndTimeParser.NEL)
                self.state = 909
                self.match(DateAndTimeParser.CORSO)
                self.state = 910
                self.match(DateAndTimeParser.DEI)
                self.state = 911
                localctx._number = self.number()
                self.state = 912
                self.match(DateAndTimeParser.SCORSI)
                self.state = 913
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 916
                self.match(DateAndTimeParser.NEL)
                self.state = 917
                self.match(DateAndTimeParser.CORSO)
                self.state = 918
                self.match(DateAndTimeParser.DEI)
                self.state = 919
                localctx._number = self.number()
                self.state = 920
                self.match(DateAndTimeParser.PASSATI)
                self.state = 921
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 924
                self.match(DateAndTimeParser.NEL)
                self.state = 925
                self.match(DateAndTimeParser.CORSO)
                self.state = 926
                self.match(DateAndTimeParser.DEI)
                self.state = 927
                localctx._number = self.number()
                self.state = 928
                self.match(DateAndTimeParser.MESI)
                self.state = 929
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Year_durationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Year_durationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def DURANTE(self):
            return self.getToken(DateAndTimeParser.DURANTE, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def PROSSIMI(self):
            return self.getToken(DateAndTimeParser.PROSSIMI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def CORSO(self):
            return self.getToken(DateAndTimeParser.CORSO, 0)

        def DELL(self):
            return self.getToken(DateAndTimeParser.DELL, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def DEI(self):
            return self.getToken(DateAndTimeParser.DEI, 0)

        def PER(self):
            return self.getToken(DateAndTimeParser.PER, 0)

        def LO(self):
            return self.getToken(DateAndTimeParser.LO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def SCORSI(self):
            return self.getToken(DateAndTimeParser.SCORSI, 0)

        def PASSATI(self):
            return self.getToken(DateAndTimeParser.PASSATI, 0)

        def DEGLI(self):
            return self.getToken(DateAndTimeParser.DEGLI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year_duration

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear_duration(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear_duration(self)




    def year_duration(self):

        localctx = DateAndTimeParser.Year_durationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_year_duration)
        try:
            self.state = 1117
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.match(DateAndTimeParser.DURANTE)
                self.state = 935
                self.match(DateAndTimeParser.IL)
                self.state = 936
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 937
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.match(DateAndTimeParser.DURANTE)
                self.state = 940
                self.match(DateAndTimeParser.L)
                self.state = 941
                self.match(DateAndTimeParser.ANNO)
                self.state = 942
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                self.match(DateAndTimeParser.DURANTE)
                self.state = 945
                self.match(DateAndTimeParser.I)
                self.state = 946
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 947
                localctx._number = self.number()
                self.state = 948
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 951
                self.match(DateAndTimeParser.DURANTE)
                self.state = 952
                self.match(DateAndTimeParser.I)
                self.state = 953
                localctx._number = self.number()
                self.state = 954
                self.match(DateAndTimeParser.ANNI)
                self.state = 955
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 958
                self.match(DateAndTimeParser.DURANTE)
                self.state = 959
                self.match(DateAndTimeParser.I)
                self.state = 960
                localctx._number = self.number()
                self.state = 961
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 962
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(DateAndTimeParser.NEL)
                self.state = 966
                self.match(DateAndTimeParser.CORSO)
                self.state = 967
                self.match(DateAndTimeParser.DELL)
                self.state = 968
                self.match(DateAndTimeParser.ANNO)
                self.state = 969
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 971
                self.match(DateAndTimeParser.NEL)
                self.state = 972
                self.match(DateAndTimeParser.CORSO)
                self.state = 973
                self.match(DateAndTimeParser.DEL)
                self.state = 974
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 975
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 977
                self.match(DateAndTimeParser.NEL)
                self.state = 978
                self.match(DateAndTimeParser.CORSO)
                self.state = 979
                self.match(DateAndTimeParser.DEI)
                self.state = 980
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 981
                localctx._number = self.number()
                self.state = 982
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 985
                self.match(DateAndTimeParser.NEL)
                self.state = 986
                self.match(DateAndTimeParser.CORSO)
                self.state = 987
                self.match(DateAndTimeParser.DEI)
                self.state = 988
                localctx._number = self.number()
                self.state = 989
                self.match(DateAndTimeParser.ANNI)
                self.state = 990
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 993
                self.match(DateAndTimeParser.NEL)
                self.state = 994
                self.match(DateAndTimeParser.CORSO)
                self.state = 995
                self.match(DateAndTimeParser.DEI)
                self.state = 996
                localctx._number = self.number()
                self.state = 997
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 998
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1001
                self.match(DateAndTimeParser.PER)
                self.state = 1002
                self.match(DateAndTimeParser.IL)
                self.state = 1003
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1004
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1006
                self.match(DateAndTimeParser.PER)
                self.state = 1007
                self.match(DateAndTimeParser.L)
                self.state = 1008
                self.match(DateAndTimeParser.ANNO)
                self.state = 1009
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1011
                self.match(DateAndTimeParser.PER)
                self.state = 1012
                self.match(DateAndTimeParser.I)
                self.state = 1013
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1014
                localctx._number = self.number()
                self.state = 1015
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1018
                self.match(DateAndTimeParser.PER)
                self.state = 1019
                self.match(DateAndTimeParser.I)
                self.state = 1020
                localctx._number = self.number()
                self.state = 1021
                self.match(DateAndTimeParser.PROSSIMI)
                self.state = 1022
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1025
                self.match(DateAndTimeParser.PER)
                self.state = 1026
                self.match(DateAndTimeParser.I)
                self.state = 1027
                localctx._number = self.number()
                self.state = 1028
                self.match(DateAndTimeParser.ANNI)
                self.state = 1029
                self.match(DateAndTimeParser.PROSSIMI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1032
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1033
                self.match(DateAndTimeParser.LO)
                self.state = 1034
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1035
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1037
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1038
                self.match(DateAndTimeParser.L)
                self.state = 1039
                self.match(DateAndTimeParser.ANNO)
                self.state = 1040
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1042
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1043
                self.match(DateAndTimeParser.GLI)
                self.state = 1044
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1045
                localctx._number = self.number()
                self.state = 1046
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1049
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1050
                self.match(DateAndTimeParser.I)
                self.state = 1051
                localctx._number = self.number()
                self.state = 1052
                self.match(DateAndTimeParser.ANNI)
                self.state = 1053
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1056
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1057
                self.match(DateAndTimeParser.I)
                self.state = 1058
                localctx._number = self.number()
                self.state = 1059
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1060
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1063
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1064
                self.match(DateAndTimeParser.I)
                self.state = 1065
                localctx._number = self.number()
                self.state = 1066
                self.match(DateAndTimeParser.PASSATI)
                self.state = 1067
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1070
                self.match(DateAndTimeParser.DURANTE)
                self.state = 1071
                self.match(DateAndTimeParser.I)
                self.state = 1072
                localctx._number = self.number()
                self.state = 1073
                self.match(DateAndTimeParser.ANNI)
                self.state = 1074
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1077
                self.match(DateAndTimeParser.NEL)
                self.state = 1078
                self.match(DateAndTimeParser.CORSO)
                self.state = 1079
                self.match(DateAndTimeParser.DEGLI)
                self.state = 1080
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1081
                localctx._number = self.number()
                self.state = 1082
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1085
                self.match(DateAndTimeParser.NEL)
                self.state = 1086
                self.match(DateAndTimeParser.CORSO)
                self.state = 1087
                self.match(DateAndTimeParser.DEI)
                self.state = 1088
                localctx._number = self.number()
                self.state = 1089
                self.match(DateAndTimeParser.ANNI)
                self.state = 1090
                self.match(DateAndTimeParser.SCORSI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1093
                self.match(DateAndTimeParser.NEL)
                self.state = 1094
                self.match(DateAndTimeParser.CORSO)
                self.state = 1095
                self.match(DateAndTimeParser.DEI)
                self.state = 1096
                localctx._number = self.number()
                self.state = 1097
                self.match(DateAndTimeParser.SCORSI)
                self.state = 1098
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1101
                self.match(DateAndTimeParser.NEL)
                self.state = 1102
                self.match(DateAndTimeParser.CORSO)
                self.state = 1103
                self.match(DateAndTimeParser.DEI)
                self.state = 1104
                localctx._number = self.number()
                self.state = 1105
                self.match(DateAndTimeParser.PASSATI)
                self.state = 1106
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1109
                self.match(DateAndTimeParser.NEL)
                self.state = 1110
                self.match(DateAndTimeParser.CORSO)
                self.state = 1111
                self.match(DateAndTimeParser.DEI)
                self.state = 1112
                localctx._number = self.number()
                self.state = 1113
                self.match(DateAndTimeParser.ANNI)
                self.state = 1114
                self.match(DateAndTimeParser.PASSATI)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def OGGI(self):
            return self.getToken(DateAndTimeParser.OGGI, 0)

        def DOMANI(self):
            return self.getToken(DateAndTimeParser.DOMANI, 0)

        def INDOMANI(self):
            return self.getToken(DateAndTimeParser.INDOMANI, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def GIORNO(self):
            return self.getToken(DateAndTimeParser.GIORNO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def IERI(self):
            return self.getToken(DateAndTimeParser.IERI, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def DOPODOMANI(self):
            return self.getToken(DateAndTimeParser.DOPODOMANI, 0)

        def ALTROIERI(self):
            return self.getToken(DateAndTimeParser.ALTROIERI, 0)

        def IERLALTRO(self):
            return self.getToken(DateAndTimeParser.IERLALTRO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def ENTRO(self):
            return self.getToken(DateAndTimeParser.ENTRO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_relative(self)




    def day_relative(self):

        localctx = DateAndTimeParser.Day_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_day_relative)
        try:
            self.state = 1196
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1119
                self.match(DateAndTimeParser.OGGI)
                localctx.s =  "$today$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.match(DateAndTimeParser.DOMANI)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1123
                self.match(DateAndTimeParser.INDOMANI)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1125
                self.match(DateAndTimeParser.UN)
                self.state = 1126
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1127
                self.match(DateAndTimeParser.DA)
                self.state = 1128
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1130
                self.match(DateAndTimeParser.UN)
                self.state = 1131
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1132
                self.match(DateAndTimeParser.DA)
                self.state = 1133
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$tomorrow$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1135
                self.match(DateAndTimeParser.IERI)
                localctx.s =  "$yesterday$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1137
                self.match(DateAndTimeParser.UN)
                self.state = 1138
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1139
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$yesterday$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1141
                self.match(DateAndTimeParser.DOPO)
                self.state = 1142
                self.match(DateAndTimeParser.DOMANI)
                localctx.s =  "$day_after_tomorrow$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1144
                self.match(DateAndTimeParser.DOPODOMANI)
                localctx.s =  "$day_after_tomorrow$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1146
                self.match(DateAndTimeParser.ALTROIERI)
                localctx.s =  "$day_before_yesterday$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1148
                self.match(DateAndTimeParser.IERLALTRO)
                localctx.s =  "$day_before_yesterday$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1150
                localctx._number = self.number()
                self.state = 1151
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1152
                self.match(DateAndTimeParser.DA)
                self.state = 1153
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1156
                localctx._number = self.number()
                self.state = 1157
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1158
                self.match(DateAndTimeParser.DA)
                self.state = 1159
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1162
                localctx._number = self.number()
                self.state = 1163
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1164
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1167
                self.match(DateAndTimeParser.ENTRO)
                self.state = 1168
                localctx._number = self.number()
                self.state = 1169
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1172
                self.match(DateAndTimeParser.DOPO)
                self.state = 1173
                localctx._number = self.number()
                self.state = 1174
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1177
                self.match(DateAndTimeParser.FRA)
                self.state = 1178
                localctx._number = self.number()
                self.state = 1179
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$day:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1182
                localctx._number = self.number()
                self.state = 1183
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1184
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1187
                localctx._number = self.number()
                self.state = 1188
                self.match(DateAndTimeParser.GIORNI)
                self.state = 1189
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$day:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1192
                self.match(DateAndTimeParser.UN)
                self.state = 1193
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1194
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$day:-1$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Day_absoluteContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Day_absoluteContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def LUNEDI(self):
            return self.getToken(DateAndTimeParser.LUNEDI, 0)

        def MARTEDI(self):
            return self.getToken(DateAndTimeParser.MARTEDI, 0)

        def MERCOLEDI(self):
            return self.getToken(DateAndTimeParser.MERCOLEDI, 0)

        def GIOVEDI(self):
            return self.getToken(DateAndTimeParser.GIOVEDI, 0)

        def VENERDI(self):
            return self.getToken(DateAndTimeParser.VENERDI, 0)

        def SABATO(self):
            return self.getToken(DateAndTimeParser.SABATO, 0)

        def DOMENICA(self):
            return self.getToken(DateAndTimeParser.DOMENICA, 0)

        def WEEKEND(self):
            return self.getToken(DateAndTimeParser.WEEKEND, 0)

        def WEEK(self):
            return self.getToken(DateAndTimeParser.WEEK, 0)

        def END(self):
            return self.getToken(DateAndTimeParser.END, 0)

        def FINE(self):
            return self.getToken(DateAndTimeParser.FINE, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_day_absolute

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDay_absolute(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDay_absolute(self)




    def day_absolute(self):

        localctx = DateAndTimeParser.Day_absoluteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_day_absolute)
        try:
            self.state = 1220
            token = self._input.LA(1)
            if token in [DateAndTimeParser.LUNEDI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.match(DateAndTimeParser.LUNEDI)
                localctx.s =  "$monday$" 

            elif token in [DateAndTimeParser.MARTEDI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.match(DateAndTimeParser.MARTEDI)
                localctx.s =  "$tuesday$" 

            elif token in [DateAndTimeParser.MERCOLEDI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1202
                self.match(DateAndTimeParser.MERCOLEDI)
                localctx.s =  "$wednesday$" 

            elif token in [DateAndTimeParser.GIOVEDI]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1204
                self.match(DateAndTimeParser.GIOVEDI)
                localctx.s =  "$thursday$" 

            elif token in [DateAndTimeParser.VENERDI]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1206
                self.match(DateAndTimeParser.VENERDI)
                localctx.s =  "$friday$" 

            elif token in [DateAndTimeParser.SABATO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1208
                self.match(DateAndTimeParser.SABATO)
                localctx.s =  "$saturday$" 

            elif token in [DateAndTimeParser.DOMENICA]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1210
                self.match(DateAndTimeParser.DOMENICA)
                localctx.s =  "$sunday$" 

            elif token in [DateAndTimeParser.WEEKEND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1212
                self.match(DateAndTimeParser.WEEKEND)
                localctx.s =  "$weekend$" 

            elif token in [DateAndTimeParser.WEEK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1214
                self.match(DateAndTimeParser.WEEK)
                self.state = 1215
                self.match(DateAndTimeParser.END)
                localctx.s =  "$weekend$" 

            elif token in [DateAndTimeParser.FINE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1217
                self.match(DateAndTimeParser.FINE)
                self.state = 1218
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekend$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Month_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Month_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth_relative(self)




    def month_relative(self):

        localctx = DateAndTimeParser.Month_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_month_relative)
        try:
            self.state = 1285
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1223
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.match(DateAndTimeParser.MESE)
                self.state = 1226
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1228
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1229
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1231
                self.match(DateAndTimeParser.UN)
                self.state = 1232
                self.match(DateAndTimeParser.MESE)
                self.state = 1233
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1235
                self.match(DateAndTimeParser.UN)
                self.state = 1236
                self.match(DateAndTimeParser.MESE)
                self.state = 1237
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$month:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1239
                self.match(DateAndTimeParser.MESE)
                self.state = 1240
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1242
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1243
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1245
                self.match(DateAndTimeParser.MESE)
                self.state = 1246
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1248
                self.match(DateAndTimeParser.FRA)
                self.state = 1249
                self.match(DateAndTimeParser.UN)
                self.state = 1250
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1252
                self.match(DateAndTimeParser.DOPO)
                self.state = 1253
                self.match(DateAndTimeParser.UN)
                self.state = 1254
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1256
                self.match(DateAndTimeParser.UN)
                self.state = 1257
                self.match(DateAndTimeParser.MESE)
                self.state = 1258
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$month:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1260
                self.match(DateAndTimeParser.FRA)
                self.state = 1261
                localctx._number = self.number()
                self.state = 1262
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1265
                self.match(DateAndTimeParser.DOPO)
                self.state = 1266
                localctx._number = self.number()
                self.state = 1267
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1270
                localctx._number = self.number()
                self.state = 1271
                self.match(DateAndTimeParser.MESI)
                self.state = 1272
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$month:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1275
                localctx._number = self.number()
                self.state = 1276
                self.match(DateAndTimeParser.MESI)
                self.state = 1277
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1280
                localctx._number = self.number()
                self.state = 1281
                self.match(DateAndTimeParser.MESI)
                self.state = 1282
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$month:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Year_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Year_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUEST(self):
            return self.getToken(DateAndTimeParser.QUEST, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear_relative(self)




    def year_relative(self):

        localctx = DateAndTimeParser.Year_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_year_relative)
        try:
            self.state = 1347
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(DateAndTimeParser.QUEST)
                self.state = 1288
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(DateAndTimeParser.ANNO)
                self.state = 1291
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1294
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1296
                self.match(DateAndTimeParser.UN)
                self.state = 1297
                self.match(DateAndTimeParser.ANNO)
                self.state = 1298
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1300
                self.match(DateAndTimeParser.UN)
                self.state = 1301
                self.match(DateAndTimeParser.ANNO)
                self.state = 1302
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1304
                self.match(DateAndTimeParser.ANNO)
                self.state = 1305
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1307
                self.match(DateAndTimeParser.ANNO)
                self.state = 1308
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1310
                self.match(DateAndTimeParser.FRA)
                self.state = 1311
                self.match(DateAndTimeParser.UN)
                self.state = 1312
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1314
                self.match(DateAndTimeParser.DOPO)
                self.state = 1315
                self.match(DateAndTimeParser.UN)
                self.state = 1316
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1318
                self.match(DateAndTimeParser.UN)
                self.state = 1319
                self.match(DateAndTimeParser.ANNO)
                self.state = 1320
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1322
                self.match(DateAndTimeParser.FRA)
                self.state = 1323
                localctx._number = self.number()
                self.state = 1324
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1327
                self.match(DateAndTimeParser.DOPO)
                self.state = 1328
                localctx._number = self.number()
                self.state = 1329
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1332
                localctx._number = self.number()
                self.state = 1333
                self.match(DateAndTimeParser.ANNI)
                self.state = 1334
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1337
                localctx._number = self.number()
                self.state = 1338
                self.match(DateAndTimeParser.ANNI)
                self.state = 1339
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1342
                localctx._number = self.number()
                self.state = 1343
                self.match(DateAndTimeParser.ANNI)
                self.state = 1344
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_numberContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._number = None # NumberContext

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def SECONDA(self):
            return self.getToken(DateAndTimeParser.SECONDA, 0)

        def TERZA(self):
            return self.getToken(DateAndTimeParser.TERZA, 0)

        def QUARTA(self):
            return self.getToken(DateAndTimeParser.QUARTA, 0)

        def QUINTA(self):
            return self.getToken(DateAndTimeParser.QUINTA, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_number

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_number(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_number(self)




    def week_number(self):

        localctx = DateAndTimeParser.Week_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_week_number)
        try:
            self.state = 1368
            token = self._input.LA(1)
            if token in [DateAndTimeParser.PRIMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1350
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  '1' 

            elif token in [DateAndTimeParser.SECONDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.match(DateAndTimeParser.SECONDA)
                self.state = 1353
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  '2' 

            elif token in [DateAndTimeParser.TERZA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1355
                self.match(DateAndTimeParser.TERZA)
                self.state = 1356
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  '3' 

            elif token in [DateAndTimeParser.QUARTA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1358
                self.match(DateAndTimeParser.QUARTA)
                self.state = 1359
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  '4' 

            elif token in [DateAndTimeParser.QUINTA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1361
                self.match(DateAndTimeParser.QUINTA)
                self.state = 1362
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.i =  '5' 

            elif token in [DateAndTimeParser.SETTIMANA]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1364
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1365
                localctx._number = self.number()
                localctx.i =  str(localctx._number.i) 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Week_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Week_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext

        def QUESTA(self):
            return self.getToken(DateAndTimeParser.QUESTA, 0)

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def IN(self):
            return self.getToken(DateAndTimeParser.IN, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def VENTURA(self):
            return self.getToken(DateAndTimeParser.VENTURA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def ENTRO(self):
            return self.getToken(DateAndTimeParser.ENTRO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_week_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterWeek_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitWeek_relative(self)




    def week_relative(self):

        localctx = DateAndTimeParser.Week_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_week_relative)
        try:
            self.state = 1453
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.match(DateAndTimeParser.QUESTA)
                self.state = 1371
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1373
                self.match(DateAndTimeParser.IN)
                self.state = 1374
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:0$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1376
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1377
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1379
                self.match(DateAndTimeParser.SCORSA)
                self.state = 1380
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1382
                self.match(DateAndTimeParser.UNA)
                self.state = 1383
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1384
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1386
                self.match(DateAndTimeParser.UNA)
                self.state = 1387
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1388
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$week:-1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1390
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1391
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1393
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1394
                self.match(DateAndTimeParser.VENTURA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1396
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 1397
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1399
                self.match(DateAndTimeParser.FRA)
                self.state = 1400
                self.match(DateAndTimeParser.UNA)
                self.state = 1401
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1403
                self.match(DateAndTimeParser.DOPO)
                self.state = 1404
                self.match(DateAndTimeParser.UNA)
                self.state = 1405
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1407
                self.match(DateAndTimeParser.UNA)
                self.state = 1408
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1409
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$week:1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1411
                self.match(DateAndTimeParser.FRA)
                self.state = 1412
                localctx._number = self.number()
                self.state = 1413
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1416
                self.match(DateAndTimeParser.DOPO)
                self.state = 1417
                localctx._number = self.number()
                self.state = 1418
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1421
                self.match(DateAndTimeParser.ENTRO)
                self.state = 1422
                localctx._number = self.number()
                self.state = 1423
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1426
                localctx._number = self.number()
                self.state = 1427
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1428
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1431
                localctx._number = self.number()
                self.state = 1432
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1433
                self.match(DateAndTimeParser.DA)
                self.state = 1434
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1437
                localctx._number = self.number()
                self.state = 1438
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1439
                self.match(DateAndTimeParser.DA)
                self.state = 1440
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$week:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1443
                localctx._number = self.number()
                self.state = 1444
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1445
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1448
                localctx._number = self.number()
                self.state = 1449
                self.match(DateAndTimeParser.SETTIMANE)
                self.state = 1450
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$week:-" + str(localctx._number.i) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YearContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.YearContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._YEARNUM = None # Token
            self._TIMENUM = None # Token
            self._threedignum = None # ThreedignumContext
            self._number = None # NumberContext

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def NEL(self):
            return self.getToken(DateAndTimeParser.NEL, 0)

        def QUEST(self):
            return self.getToken(DateAndTimeParser.QUEST, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def TIMENUM(self):
            return self.getToken(DateAndTimeParser.TIMENUM, 0)

        def threedignum(self):
            return self.getTypedRuleContext(DateAndTimeParser.ThreedignumContext,0)


        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def DEL(self):
            return self.getToken(DateAndTimeParser.DEL, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def DELL(self):
            return self.getToken(DateAndTimeParser.DELL, 0)

        def SCORSO(self):
            return self.getToken(DateAndTimeParser.SCORSO, 0)

        def PRECEDENTE(self):
            return self.getToken(DateAndTimeParser.PRECEDENTE, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PROSSIMO(self):
            return self.getToken(DateAndTimeParser.PROSSIMO, 0)

        def VENTURO(self):
            return self.getToken(DateAndTimeParser.VENTURO, 0)

        def DA(self):
            return self.getToken(DateAndTimeParser.DA, 0)

        def ADESSO(self):
            return self.getToken(DateAndTimeParser.ADESSO, 0)

        def ORA(self):
            return self.getToken(DateAndTimeParser.ORA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def number(self):
            return self.getTypedRuleContext(DateAndTimeParser.NumberContext,0)


        def getRuleIndex(self):
            return DateAndTimeParser.RULE_year

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYear(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYear(self)




    def year(self):

        localctx = DateAndTimeParser.YearContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_year)
        try:
            self.state = 1590
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1457
                self.match(DateAndTimeParser.NEL)
                self.state = 1458
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1460
                self.match(DateAndTimeParser.QUEST)
                self.state = 1461
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:0$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1463
                self.match(DateAndTimeParser.ANNO)
                self.state = 1464
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  (None if localctx._YEARNUM is None else localctx._YEARNUM.text) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1466
                self.match(DateAndTimeParser.ANNO)
                self.state = 1467
                localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
                localctx.s =  (None if localctx._TIMENUM is None else localctx._TIMENUM.text) 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1469
                self.match(DateAndTimeParser.ANNO)
                self.state = 1470
                localctx._threedignum = self.threedignum()
                localctx.s =  (None if localctx._threedignum is None else self._input.getText((localctx._threedignum.start,localctx._threedignum.stop))) 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1473
                self.match(DateAndTimeParser.DOPO)
                self.state = 1474
                self.match(DateAndTimeParser.IL)
                self.state = 1475
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1477
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1478
                self.match(DateAndTimeParser.DEL)
                self.state = 1479
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1481
                self.match(DateAndTimeParser.DOPO)
                self.state = 1482
                self.match(DateAndTimeParser.L)
                self.state = 1483
                self.match(DateAndTimeParser.ANNO)
                self.state = 1484
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1486
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1487
                self.match(DateAndTimeParser.DELL)
                self.state = 1488
                self.match(DateAndTimeParser.ANNO)
                self.state = 1489
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$"  
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1491
                self.match(DateAndTimeParser.ANNO)
                self.state = 1492
                self.match(DateAndTimeParser.SCORSO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1494
                self.match(DateAndTimeParser.SCORSO)
                self.state = 1495
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1497
                self.match(DateAndTimeParser.ANNO)
                self.state = 1498
                self.match(DateAndTimeParser.PRECEDENTE)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1500
                self.match(DateAndTimeParser.UN)
                self.state = 1501
                self.match(DateAndTimeParser.ANNO)
                self.state = 1502
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1504
                self.match(DateAndTimeParser.UN)
                self.state = 1505
                self.match(DateAndTimeParser.ANNO)
                self.state = 1506
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-1$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1508
                self.match(DateAndTimeParser.ANNO)
                self.state = 1509
                self.match(DateAndTimeParser.PROSSIMO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1511
                self.match(DateAndTimeParser.PROSSIMO)
                self.state = 1512
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1514
                self.match(DateAndTimeParser.ANNO)
                self.state = 1515
                self.match(DateAndTimeParser.VENTURO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1517
                self.match(DateAndTimeParser.UN)
                self.state = 1518
                self.match(DateAndTimeParser.ANNO)
                self.state = 1519
                self.match(DateAndTimeParser.DA)
                self.state = 1520
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1522
                self.match(DateAndTimeParser.UN)
                self.state = 1523
                self.match(DateAndTimeParser.ANNO)
                self.state = 1524
                self.match(DateAndTimeParser.DA)
                self.state = 1525
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1527
                self.match(DateAndTimeParser.DOPO)
                self.state = 1528
                self.match(DateAndTimeParser.UN)
                self.state = 1529
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1531
                self.match(DateAndTimeParser.FRA)
                self.state = 1532
                self.match(DateAndTimeParser.UN)
                self.state = 1533
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$year:1$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1535
                self.match(DateAndTimeParser.DOPO)
                self.state = 1536
                self.match(DateAndTimeParser.IL)
                self.state = 1537
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$afteryear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1539
                self.match(DateAndTimeParser.PRIMA)
                self.state = 1540
                self.match(DateAndTimeParser.DEL)
                self.state = 1541
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$beforeyear:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1543
                self.match(DateAndTimeParser.ANNI)
                self.state = 1544
                localctx._number = self.number()
                localctx.s =  "$period:19" + (None if localctx._number is None else self._input.getText((localctx._number.start,localctx._number.stop))) + "$" 
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1547
                localctx._number = self.number()
                self.state = 1548
                self.match(DateAndTimeParser.ANNI)
                self.state = 1549
                self.match(DateAndTimeParser.DA)
                self.state = 1550
                self.match(DateAndTimeParser.ADESSO)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1553
                localctx._number = self.number()
                self.state = 1554
                self.match(DateAndTimeParser.ANNI)
                self.state = 1555
                self.match(DateAndTimeParser.DA)
                self.state = 1556
                self.match(DateAndTimeParser.ORA)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1559
                localctx._number = self.number()
                self.state = 1560
                self.match(DateAndTimeParser.ANNI)
                self.state = 1561
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1564
                self.match(DateAndTimeParser.DOPO)
                self.state = 1565
                localctx._number = self.number()
                self.state = 1566
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1569
                self.match(DateAndTimeParser.FRA)
                self.state = 1570
                localctx._number = self.number()
                self.state = 1571
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$year:" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1574
                localctx._number = self.number()
                self.state = 1575
                self.match(DateAndTimeParser.ANNI)
                self.state = 1576
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1579
                localctx._number = self.number()
                self.state = 1580
                self.match(DateAndTimeParser.ANNI)
                self.state = 1581
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$year:-" + str(localctx._number.i) + "$" 
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1584
                self.match(DateAndTimeParser.ANNI)
                self.state = 1585
                localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
                localctx.s =  "$period:" + (None if localctx._YEARNUM is None else localctx._YEARNUM.text) + "$" 
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1587
                self.match(DateAndTimeParser.ANNI)
                self.state = 1588
                localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
                localctx.s =  "$period:" + (None if localctx._TIMENUM is None else localctx._TIMENUM.text) + "$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_repeatContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Date_repeatContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def OGNI(self):
            return self.getToken(DateAndTimeParser.OGNI, 0)

        def GIORNO(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.GIORNO)
            else:
                return self.getToken(DateAndTimeParser.GIORNO, i)

        def QUOTIDIANAMENTE(self):
            return self.getToken(DateAndTimeParser.QUOTIDIANAMENTE, 0)

        def TUTTI(self):
            return self.getToken(DateAndTimeParser.TUTTI, 0)

        def I(self):
            return self.getToken(DateAndTimeParser.I, 0)

        def GIORNI(self):
            return self.getToken(DateAndTimeParser.GIORNI, 0)

        def GIORNALMENTE(self):
            return self.getToken(DateAndTimeParser.GIORNALMENTE, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def SETTIMANA(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.SETTIMANA)
            else:
                return self.getToken(DateAndTimeParser.SETTIMANA, i)

        def SETTIMANALMENTE(self):
            return self.getToken(DateAndTimeParser.SETTIMANALMENTE, 0)

        def TUTTE(self):
            return self.getToken(DateAndTimeParser.TUTTE, 0)

        def LE(self):
            return self.getToken(DateAndTimeParser.LE, 0)

        def SETTIMANE(self):
            return self.getToken(DateAndTimeParser.SETTIMANE, 0)

        def BISETTIMANALMENTE(self):
            return self.getToken(DateAndTimeParser.BISETTIMANALMENTE, 0)

        def DUE(self):
            return self.getToken(DateAndTimeParser.DUE, 0)

        def VOLTE(self):
            return self.getToken(DateAndTimeParser.VOLTE, 0)

        def AL(self):
            return self.getToken(DateAndTimeParser.AL, 0)

        def MESE(self, i=None):
            if i is None:
                return self.getTokens(DateAndTimeParser.MESE)
            else:
                return self.getToken(DateAndTimeParser.MESE, i)

        def MENSILMENTE(self):
            return self.getToken(DateAndTimeParser.MENSILMENTE, 0)

        def MESI(self):
            return self.getToken(DateAndTimeParser.MESI, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def TRIMESTRALMENTE(self):
            return self.getToken(DateAndTimeParser.TRIMESTRALMENTE, 0)

        def QUATTRO(self):
            return self.getToken(DateAndTimeParser.QUATTRO, 0)

        def ALL(self):
            return self.getToken(DateAndTimeParser.ALL, 0)

        def ANNO(self):
            return self.getToken(DateAndTimeParser.ANNO, 0)

        def L(self):
            return self.getToken(DateAndTimeParser.L, 0)

        def TRIMESTRE(self):
            return self.getToken(DateAndTimeParser.TRIMESTRE, 0)

        def GLI(self):
            return self.getToken(DateAndTimeParser.GLI, 0)

        def ANNI(self):
            return self.getToken(DateAndTimeParser.ANNI, 0)

        def ANNUALMENTE(self):
            return self.getToken(DateAndTimeParser.ANNUALMENTE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date_repeat

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate_repeat(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate_repeat(self)




    def date_repeat(self):

        localctx = DateAndTimeParser.Date_repeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_date_repeat)
        try:
            self.state = 1672
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.match(DateAndTimeParser.OGNI)
                self.state = 1593
                self.match(DateAndTimeParser.GIORNO)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1595
                self.match(DateAndTimeParser.QUOTIDIANAMENTE)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1597
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1598
                self.match(DateAndTimeParser.I)
                self.state = 1599
                self.match(DateAndTimeParser.GIORNI)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1601
                self.match(DateAndTimeParser.GIORNALMENTE)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1603
                self.match(DateAndTimeParser.GIORNO)
                self.state = 1604
                self.match(DateAndTimeParser.DOPO)
                self.state = 1605
                self.match(DateAndTimeParser.GIORNO)
                localctx.s =  "$daily$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1607
                self.match(DateAndTimeParser.OGNI)
                self.state = 1608
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1610
                self.match(DateAndTimeParser.SETTIMANALMENTE)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1612
                self.match(DateAndTimeParser.TUTTE)
                self.state = 1613
                self.match(DateAndTimeParser.LE)
                self.state = 1614
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1616
                self.match(DateAndTimeParser.SETTIMANA)
                self.state = 1617
                self.match(DateAndTimeParser.DOPO)
                self.state = 1618
                self.match(DateAndTimeParser.SETTIMANA)
                localctx.s =  "$weekly$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1620
                self.match(DateAndTimeParser.BISETTIMANALMENTE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1622
                self.match(DateAndTimeParser.OGNI)
                self.state = 1623
                self.match(DateAndTimeParser.DUE)
                self.state = 1624
                self.match(DateAndTimeParser.SETTIMANE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1626
                self.match(DateAndTimeParser.DUE)
                self.state = 1627
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1628
                self.match(DateAndTimeParser.AL)
                self.state = 1629
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$biweekly$" 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1631
                self.match(DateAndTimeParser.OGNI)
                self.state = 1632
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1634
                self.match(DateAndTimeParser.MENSILMENTE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1636
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1637
                self.match(DateAndTimeParser.I)
                self.state = 1638
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1640
                self.match(DateAndTimeParser.MESE)
                self.state = 1641
                self.match(DateAndTimeParser.DOPO)
                self.state = 1642
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "$monthly$" 
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1644
                self.match(DateAndTimeParser.OGNI)
                self.state = 1645
                self.match(DateAndTimeParser.TRE)
                self.state = 1646
                self.match(DateAndTimeParser.MESI)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1648
                self.match(DateAndTimeParser.TRIMESTRALMENTE)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1650
                self.match(DateAndTimeParser.QUATTRO)
                self.state = 1651
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1652
                self.match(DateAndTimeParser.ALL)
                self.state = 1653
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1655
                self.match(DateAndTimeParser.QUATTRO)
                self.state = 1656
                self.match(DateAndTimeParser.VOLTE)
                self.state = 1657
                self.match(DateAndTimeParser.L)
                self.state = 1658
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1660
                self.match(DateAndTimeParser.OGNI)
                self.state = 1661
                self.match(DateAndTimeParser.TRIMESTRE)
                localctx.s =  "$quarterly$" 
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1663
                self.match(DateAndTimeParser.OGNI)
                self.state = 1664
                self.match(DateAndTimeParser.ANNO)
                localctx.s =  "$yearly$" 
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1666
                self.match(DateAndTimeParser.TUTTI)
                self.state = 1667
                self.match(DateAndTimeParser.GLI)
                self.state = 1668
                self.match(DateAndTimeParser.ANNI)
                localctx.s =  "$yearly$" 
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1670
                self.match(DateAndTimeParser.ANNUALMENTE)
                localctx.s =  "$yearly$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.DateContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None
            self._number = None # NumberContext
            self._month = None # MonthContext
            self.a = None # NumberContext
            self.b = None # NumberContext

        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(DateAndTimeParser.NumberContext)
            else:
                return self.getTypedRuleContext(DateAndTimeParser.NumberContext,i)


        def month(self):
            return self.getTypedRuleContext(DateAndTimeParser.MonthContext,0)


        def PRIMO(self):
            return self.getToken(DateAndTimeParser.PRIMO, 0)

        def SLASH(self):
            return self.getToken(DateAndTimeParser.SLASH, 0)

        def maybedi(self):
            return self.getTypedRuleContext(DateAndTimeParser.MaybediContext,0)


        def QUESTO(self):
            return self.getToken(DateAndTimeParser.QUESTO, 0)

        def MESE(self):
            return self.getToken(DateAndTimeParser.MESE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_date

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterDate(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitDate(self)




    def date(self):

        localctx = DateAndTimeParser.DateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_date)
        try:
            self.state = 1701
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1674
                localctx._number = self.number()
                self.state = 1675
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1678
                self.match(DateAndTimeParser.PRIMO)
                self.state = 1679
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":01" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                localctx.a = self.number()
                self.state = 1683
                self.match(DateAndTimeParser.SLASH)
                self.state = 1684
                localctx.b = self.number()
                localctx.s =  "%02d" % (localctx.b.i) + ":" + "%02d" % (localctx.a.i) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1687
                localctx._number = self.number()
                self.state = 1688
                self.maybedi()
                self.state = 1689
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1692
                localctx._number = self.number()
                self.state = 1693
                self.maybedi()
                self.state = 1694
                self.match(DateAndTimeParser.QUESTO)
                self.state = 1695
                self.match(DateAndTimeParser.MESE)
                localctx.s =  "_:" + "%02d" % (localctx._number.i) 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1698
                localctx._month = self.month()
                localctx.s =  "%02d" % (localctx._month.i) + ":_" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybesettimanaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybesettimanaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SETTIMANA(self):
            return self.getToken(DateAndTimeParser.SETTIMANA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybesettimana

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybesettimana(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybesettimana(self)




    def maybesettimana(self):

        localctx = DateAndTimeParser.MaybesettimanaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_maybesettimana)
        try:
            self.state = 1705
            token = self._input.LA(1)
            if token in [DateAndTimeParser.DI]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.SETTIMANA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1704
                self.match(DateAndTimeParser.SETTIMANA)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybediContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybediContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DI(self):
            return self.getToken(DateAndTimeParser.DI, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybedi

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybedi(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybedi(self)




    def maybedi(self):

        localctx = DateAndTimeParser.MaybediContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_maybedi)
        try:
            self.state = 1709
            token = self._input.LA(1)
            if token in [DateAndTimeParser.AGOSTO, DateAndTimeParser.APRILE, DateAndTimeParser.DICEMBRE, DateAndTimeParser.FEBBRAIO, DateAndTimeParser.GENNAIO, DateAndTimeParser.GIUGNO, DateAndTimeParser.LUGLIO, DateAndTimeParser.MAGGIO, DateAndTimeParser.MARZO, DateAndTimeParser.NOVEMBRE, DateAndTimeParser.OTTOBRE, DateAndTimeParser.QUESTO, DateAndTimeParser.SETTEMBRE]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.DI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1708
                self.match(DateAndTimeParser.DI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybetheContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybetheContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IL(self):
            return self.getToken(DateAndTimeParser.IL, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybethe

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybethe(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybethe(self)




    def maybethe(self):

        localctx = DateAndTimeParser.MaybetheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_maybethe)
        try:
            self.state = 1713
            token = self._input.LA(1)
            if token in [DateAndTimeParser.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.IL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1712
                self.match(DateAndTimeParser.IL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.EandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def E(self):
            return self.getToken(DateAndTimeParser.E, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_eand

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterEand(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitEand(self)




    def eand(self):

        localctx = DateAndTimeParser.EandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_eand)
        try:
            self.state = 1717
            token = self._input.LA(1)
            if token in [DateAndTimeParser.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.E]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self.match(DateAndTimeParser.E)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybealleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybealleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALLE(self):
            return self.getToken(DateAndTimeParser.ALLE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybealle

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybealle(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybealle(self)




    def maybealle(self):

        localctx = DateAndTimeParser.MaybealleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_maybealle)
        try:
            self.state = 1721
            token = self._input.LA(1)
            if token in [DateAndTimeParser.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.ALLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                self.match(DateAndTimeParser.ALLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaybeoreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MaybeoreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ORE(self):
            return self.getToken(DateAndTimeParser.ORE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_maybeore

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMaybeore(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMaybeore(self)




    def maybeore(self):

        localctx = DateAndTimeParser.MaybeoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_maybeore)
        try:
            self.state = 1725
            token = self._input.LA(1)
            if token in [DateAndTimeParser.EOF]:
                self.enterOuterAlt(localctx, 1)


            elif token in [DateAndTimeParser.ORE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1724
                self.match(DateAndTimeParser.ORE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MonthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.MonthContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None

        def GENNAIO(self):
            return self.getToken(DateAndTimeParser.GENNAIO, 0)

        def FEBBRAIO(self):
            return self.getToken(DateAndTimeParser.FEBBRAIO, 0)

        def MARZO(self):
            return self.getToken(DateAndTimeParser.MARZO, 0)

        def APRILE(self):
            return self.getToken(DateAndTimeParser.APRILE, 0)

        def MAGGIO(self):
            return self.getToken(DateAndTimeParser.MAGGIO, 0)

        def GIUGNO(self):
            return self.getToken(DateAndTimeParser.GIUGNO, 0)

        def LUGLIO(self):
            return self.getToken(DateAndTimeParser.LUGLIO, 0)

        def AGOSTO(self):
            return self.getToken(DateAndTimeParser.AGOSTO, 0)

        def SETTEMBRE(self):
            return self.getToken(DateAndTimeParser.SETTEMBRE, 0)

        def OTTOBRE(self):
            return self.getToken(DateAndTimeParser.OTTOBRE, 0)

        def NOVEMBRE(self):
            return self.getToken(DateAndTimeParser.NOVEMBRE, 0)

        def DICEMBRE(self):
            return self.getToken(DateAndTimeParser.DICEMBRE, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_month

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterMonth(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitMonth(self)




    def month(self):

        localctx = DateAndTimeParser.MonthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_month)
        try:
            self.state = 1751
            token = self._input.LA(1)
            if token in [DateAndTimeParser.GENNAIO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1727
                self.match(DateAndTimeParser.GENNAIO)
                localctx.i =  1 

            elif token in [DateAndTimeParser.FEBBRAIO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1729
                self.match(DateAndTimeParser.FEBBRAIO)
                localctx.i =  2 

            elif token in [DateAndTimeParser.MARZO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1731
                self.match(DateAndTimeParser.MARZO)
                localctx.i =  3 

            elif token in [DateAndTimeParser.APRILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1733
                self.match(DateAndTimeParser.APRILE)
                localctx.i =  4 

            elif token in [DateAndTimeParser.MAGGIO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1735
                self.match(DateAndTimeParser.MAGGIO)
                localctx.i =  5 

            elif token in [DateAndTimeParser.GIUGNO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1737
                self.match(DateAndTimeParser.GIUGNO)
                localctx.i =  6 

            elif token in [DateAndTimeParser.LUGLIO]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1739
                self.match(DateAndTimeParser.LUGLIO)
                localctx.i =  7 

            elif token in [DateAndTimeParser.AGOSTO]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1741
                self.match(DateAndTimeParser.AGOSTO)
                localctx.i =  8 

            elif token in [DateAndTimeParser.SETTEMBRE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1743
                self.match(DateAndTimeParser.SETTEMBRE)
                localctx.i =  9 

            elif token in [DateAndTimeParser.OTTOBRE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1745
                self.match(DateAndTimeParser.OTTOBRE)
                localctx.i =  10 

            elif token in [DateAndTimeParser.NOVEMBRE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1747
                self.match(DateAndTimeParser.NOVEMBRE)
                localctx.i =  11 

            elif token in [DateAndTimeParser.DICEMBRE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1749
                self.match(DateAndTimeParser.DICEMBRE)
                localctx.i =  12 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeasonContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.SeasonContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def AUTUNNO(self):
            return self.getToken(DateAndTimeParser.AUTUNNO, 0)

        def ESTATE(self):
            return self.getToken(DateAndTimeParser.ESTATE, 0)

        def INVERNO(self):
            return self.getToken(DateAndTimeParser.INVERNO, 0)

        def PRIMAVERA(self):
            return self.getToken(DateAndTimeParser.PRIMAVERA, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_season

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterSeason(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitSeason(self)




    def season(self):

        localctx = DateAndTimeParser.SeasonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_season)
        try:
            self.state = 1761
            token = self._input.LA(1)
            if token in [DateAndTimeParser.AUTUNNO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1753
                self.match(DateAndTimeParser.AUTUNNO)
                localctx.s =  "$autumn$" 

            elif token in [DateAndTimeParser.ESTATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1755
                self.match(DateAndTimeParser.ESTATE)
                localctx.s =  "$summer$" 

            elif token in [DateAndTimeParser.INVERNO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1757
                self.match(DateAndTimeParser.INVERNO)
                localctx.s =  "$winter$" 

            elif token in [DateAndTimeParser.PRIMAVERA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1759
                self.match(DateAndTimeParser.PRIMAVERA)
                localctx.s =  "$spring$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HolidayContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.HolidayContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def FERRAGOSTO(self):
            return self.getToken(DateAndTimeParser.FERRAGOSTO, 0)

        def NATALE(self):
            return self.getToken(DateAndTimeParser.NATALE, 0)

        def PASQUA(self):
            return self.getToken(DateAndTimeParser.PASQUA, 0)

        def SANVALENTINO(self):
            return self.getToken(DateAndTimeParser.SANVALENTINO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_holiday

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterHoliday(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitHoliday(self)




    def holiday(self):

        localctx = DateAndTimeParser.HolidayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_holiday)
        try:
            self.state = 1771
            token = self._input.LA(1)
            if token in [DateAndTimeParser.FERRAGOSTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1763
                self.match(DateAndTimeParser.FERRAGOSTO)
                localctx.s =  "$feast_of_the_assumption$" 

            elif token in [DateAndTimeParser.NATALE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1765
                self.match(DateAndTimeParser.NATALE)
                localctx.s =  "$christmas$" 

            elif token in [DateAndTimeParser.PASQUA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1767
                self.match(DateAndTimeParser.PASQUA)
                localctx.s =  "$easter$" 

            elif token in [DateAndTimeParser.SANVALENTINO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1769
                self.match(DateAndTimeParser.SANVALENTINO)
                localctx.s =  "$valentine$" 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Season_relativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.Season_relativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def QUESTA(self):
            return self.getToken(DateAndTimeParser.QUESTA, 0)

        def STAGIONE(self):
            return self.getToken(DateAndTimeParser.STAGIONE, 0)

        def SCORSA(self):
            return self.getToken(DateAndTimeParser.SCORSA, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def FA(self):
            return self.getToken(DateAndTimeParser.FA, 0)

        def PRIMA(self):
            return self.getToken(DateAndTimeParser.PRIMA, 0)

        def PROSSIMA(self):
            return self.getToken(DateAndTimeParser.PROSSIMA, 0)

        def VENTURA(self):
            return self.getToken(DateAndTimeParser.VENTURA, 0)

        def FRA(self):
            return self.getToken(DateAndTimeParser.FRA, 0)

        def DOPO(self):
            return self.getToken(DateAndTimeParser.DOPO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_season_relative

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterSeason_relative(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitSeason_relative(self)




    def season_relative(self):

        localctx = DateAndTimeParser.Season_relativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_season_relative)
        try:
            self.state = 1811
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(DateAndTimeParser.QUESTA)
                self.state = 1774
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:0$" 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1777
                self.match(DateAndTimeParser.SCORSA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1779
                self.match(DateAndTimeParser.SCORSA)
                self.state = 1780
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1782
                self.match(DateAndTimeParser.UNA)
                self.state = 1783
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1784
                self.match(DateAndTimeParser.FA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1786
                self.match(DateAndTimeParser.UNA)
                self.state = 1787
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1788
                self.match(DateAndTimeParser.PRIMA)
                localctx.s =  "$season:-1$" 
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1790
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1791
                self.match(DateAndTimeParser.PROSSIMA)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1793
                self.match(DateAndTimeParser.PROSSIMA)
                self.state = 1794
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1796
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1797
                self.match(DateAndTimeParser.VENTURA)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1799
                self.match(DateAndTimeParser.FRA)
                self.state = 1800
                self.match(DateAndTimeParser.UNA)
                self.state = 1801
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1803
                self.match(DateAndTimeParser.DOPO)
                self.state = 1804
                self.match(DateAndTimeParser.UNA)
                self.state = 1805
                self.match(DateAndTimeParser.STAGIONE)
                localctx.s =  "$season:1$" 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1807
                self.match(DateAndTimeParser.UNA)
                self.state = 1808
                self.match(DateAndTimeParser.STAGIONE)
                self.state = 1809
                self.match(DateAndTimeParser.DOPO)
                localctx.s =  "$season:1$" 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.NumberContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._NUMBER = None # Token

        def NUMBER(self):
            return self.getToken(DateAndTimeParser.NUMBER, 0)

        def UN(self):
            return self.getToken(DateAndTimeParser.UN, 0)

        def UNA(self):
            return self.getToken(DateAndTimeParser.UNA, 0)

        def DUE(self):
            return self.getToken(DateAndTimeParser.DUE, 0)

        def TRE(self):
            return self.getToken(DateAndTimeParser.TRE, 0)

        def QUATTRO(self):
            return self.getToken(DateAndTimeParser.QUATTRO, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_number

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterNumber(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitNumber(self)




    def number(self):

        localctx = DateAndTimeParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_number)
        try:
            self.state = 1825
            token = self._input.LA(1)
            if token in [DateAndTimeParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1813
                localctx._NUMBER = self.match(DateAndTimeParser.NUMBER)
                localctx.i =  int((None if localctx._NUMBER is None else localctx._NUMBER.text))

            elif token in [DateAndTimeParser.UN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.match(DateAndTimeParser.UN)
                localctx.i =  1 

            elif token in [DateAndTimeParser.UNA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1817
                self.match(DateAndTimeParser.UNA)
                localctx.i =  1 

            elif token in [DateAndTimeParser.DUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1819
                self.match(DateAndTimeParser.DUE)
                localctx.i =  2 

            elif token in [DateAndTimeParser.TRE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1821
                self.match(DateAndTimeParser.TRE)
                localctx.i =  3 

            elif token in [DateAndTimeParser.QUATTRO]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1823
                self.match(DateAndTimeParser.QUATTRO)
                localctx.i =  4 

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThreedignumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.ThreedignumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._THREEDIGNUM = None # Token

        def THREEDIGNUM(self):
            return self.getToken(DateAndTimeParser.THREEDIGNUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_threedignum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterThreedignum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitThreedignum(self)




    def threedignum(self):

        localctx = DateAndTimeParser.ThreedignumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_threedignum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            localctx._THREEDIGNUM = self.match(DateAndTimeParser.THREEDIGNUM)
            localctx.i =  int((None if localctx._THREEDIGNUM is None else localctx._THREEDIGNUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YearnumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.YearnumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._YEARNUM = None # Token

        def YEARNUM(self):
            return self.getToken(DateAndTimeParser.YEARNUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_yearnum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterYearnum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitYearnum(self)




    def yearnum(self):

        localctx = DateAndTimeParser.YearnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_yearnum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            localctx._YEARNUM = self.match(DateAndTimeParser.YEARNUM)
            localctx.i =  int((None if localctx._YEARNUM is None else localctx._YEARNUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimenumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(DateAndTimeParser.TimenumContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.i = None
            self._TIMENUM = None # Token

        def TIMENUM(self):
            return self.getToken(DateAndTimeParser.TIMENUM, 0)

        def getRuleIndex(self):
            return DateAndTimeParser.RULE_timenum

        def enterRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.enterTimenum(self)

        def exitRule(self, listener):
            if isinstance( listener, DateAndTimeListener ):
                listener.exitTimenum(self)




    def timenum(self):

        localctx = DateAndTimeParser.TimenumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_timenum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            localctx._TIMENUM = self.match(DateAndTimeParser.TIMENUM)
            localctx.i =  int((None if localctx._TIMENUM is None else localctx._TIMENUM.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




